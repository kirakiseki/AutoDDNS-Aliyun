/// <reference types="node" />
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';
export declare class FileField extends $tea.Model {
    filename: string;
    contentType: string;
    content: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuntimeObject extends $tea.Model {
    autoretry: boolean;
    ignoreSSL: boolean;
    maxAttempts: number;
    backoffPolicy: string;
    backoffPeriod: number;
    readTimeout: number;
    connectTimeout: number;
    httpProxy: string;
    httpsProxy: string;
    noProxy: string;
    maxIdleConns: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client {
    static readAsString(body: Readable): Promise<string>;
    static getEndpoint(endpoint: string, serverUse: boolean, endpointType: string): string;
    static getHost(productId: string, regionId: string, endpoint: string): string;
    static convert(input: $tea.Model, output: $tea.Model): void;
    static getNonce(): string;
    static getSignature(request: $tea.Request, secret: string): string;
    static getSignatureV1(query: {
        [key: string]: string;
    }, method: string, secret: string): string;
    static json(body: $tea.Response): Promise<{
        [key: string]: any;
    }>;
    static hasError(obj: {
        [key: string]: any;
    }): boolean;
    static getTimestamp(): string;
    static query(filter: {
        [key: string]: any;
    }): {
        [key: string]: string;
    };
    static default(real: string, default_: string): string;
    static defaultNumber(real: number, default_: number): number;
    static getUserAgent(userAgent: string): string;
    static getDate(): string;
    static parseXml<T>(body: string, clazz: T): {
        [key: string]: any;
    };
    static _xmlCast<T>(obj: any, clazz: T): {
        [key: string]: any;
    };
    static toForm(body: {
        [key: string]: any;
    }, content: Readable, boundary: string): Readable;
    static getErrMessage(xml: string): {
        [key: string]: any;
    };
    static isFail(response: $tea.Response): boolean;
    static getBoundary(): string;
    static empty(val: string): boolean;
    static equal(val1: string, val2: string): boolean;
    static getOpenPlatFormEndpoint(endpoint: string, regionId: string): string;
}
