"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const $tea = __importStar(require("@alicloud/tea-typescript"));
const kitx = __importStar(require("kitx"));
const xml2js_1 = require("xml2js");
const os_1 = require("os");
const DEFAULT_USER_AGENT = `AlibabaCloud (${os_1.platform()}; ${os_1.arch()}) Node.js/${process.version} Core/1.0.1 TeaDSL/1`;
function parseXML(body) {
    let parser = new xml2js_1.Parser({ explicitArray: false });
    let result = {};
    parser.parseString(body, function (err, output) {
        result.err = err;
        result.output = output;
    });
    if (result.err) {
        throw result.err;
    }
    return result.output;
}
function encode(str) {
    var result = encodeURIComponent(str);
    return result.replace(/!/g, '%21')
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29')
        .replace(/\*/g, '%2A');
}
function replaceRepeatList(target, repeat, prefix) {
    if (prefix) {
        prefix = prefix + '.';
    }
    for (var i = 0; i < repeat.length; i++) {
        var item = repeat[i];
        let key = prefix + (i + 1);
        if (typeof item === 'undefined' || item == null) {
            target[key] = '';
            continue;
        }
        if (Array.isArray(item)) {
            replaceRepeatList(target, item, key);
        }
        else if (item instanceof Object) {
            flatMap(target, item, key);
        }
        else {
            target[key] = item.toString();
        }
    }
}
function flatMap(target, params, prefix = '') {
    if (prefix) {
        prefix = prefix + '.';
    }
    let keys = Object.keys(params);
    for (let i = 0; i < keys.length; i++) {
        let key = keys[i];
        let value = params[key];
        key = prefix + key;
        if (typeof value === 'undefined' || value == null) {
            target[key] = '';
            continue;
        }
        if (Array.isArray(value)) {
            replaceRepeatList(target, value, key);
        }
        else if (value instanceof Object) {
            flatMap(target, value, key);
        }
        else {
            target[key] = value.toString();
        }
    }
    return target;
}
function normalize(params) {
    var list = [];
    var flated = {};
    flatMap(flated, params);
    var keys = Object.keys(flated).sort();
    for (let i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = flated[key];
        list.push([encode(key), encode(value)]);
    }
    return list;
}
function canonicalize(normalized) {
    var fields = [];
    for (var i = 0; i < normalized.length; i++) {
        var [key, value] = normalized[i];
        fields.push(key + '=' + value);
    }
    return fields.join('&');
}
class FileField extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            filename: 'filename',
            contentType: 'contentType',
            content: 'content',
        };
    }
    static types() {
        return {
            filename: 'string',
            contentType: 'string',
            content: 'Readable',
        };
    }
}
exports.FileField = FileField;
class FileFormStream extends stream_1.Readable {
    constructor(form, content, boundary) {
        super();
        this.form = form;
        this.keys = Object.keys(form);
        this.index = 0;
        this.boundary = boundary;
        this.streaming = false;
        this.content = content;
    }
    _read() {
        if (this.streaming) {
            return;
        }
        const separator = this.boundary;
        if (this.index < this.keys.length) {
            const name = this.keys[this.index];
            const fieldValue = this.form[name];
            if (name === 'file') {
                let body = `--${separator}\r\n` +
                    `Content-Disposition: form-data; name="${name}"; filename=${fieldValue.filename}\r\n` +
                    `Content-Type: ${fieldValue.contentType}\r\n\r\n`;
                this.push(Buffer.from(body));
                this.streaming = true;
                this.content.on('data', (chunk) => {
                    this.push(chunk);
                });
                this.content.on('end', () => {
                    this.index++;
                    this.streaming = false;
                });
            }
            else {
                this.push(Buffer.from(`--${separator}\r\n` +
                    `Content-Disposition: form-data; name="${name}"\r\n\r\n` +
                    `${encodeURIComponent(fieldValue)}\r\n`));
                this.index++;
            }
        }
        else {
            this.push(Buffer.from(`\r\n--${separator}--\r\n`));
            this.push(null);
        }
    }
}
class RuntimeObject extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            autoretry: 'autoretry',
            ignoreSSL: 'ignoreSSL',
            maxAttempts: 'max_attempts',
            backoffPolicy: 'backoff_policy',
            backoffPeriod: 'backoff_period',
            readTimeout: 'readTimeout',
            connectTimeout: 'connectTimeout',
            httpProxy: 'httpProxy',
            httpsProxy: 'httpsProxy',
            noProxy: 'noProxy',
            maxIdleConns: 'maxIdleConns',
        };
    }
    static types() {
        return {
            autoretry: 'boolean',
            ignoreSSL: 'boolean',
            maxAttempts: 'number',
            backoffPolicy: 'string',
            backoffPeriod: 'number',
            readTimeout: 'number',
            connectTimeout: 'number',
            httpProxy: 'string',
            httpsProxy: 'string',
            noProxy: 'string',
            maxIdleConns: 'number',
        };
    }
}
exports.RuntimeObject = RuntimeObject;
class Client {
    static readAsString(body) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                if (!body) {
                    resolve('');
                }
                let result = '';
                body.on('data', (data) => {
                    result += data;
                });
                body.on('end', () => {
                    resolve(result);
                });
                body.on('err', (err) => {
                    reject(err);
                });
            });
        });
    }
    static getEndpoint(endpoint, serverUse, endpointType) {
        if (endpointType == "internal") {
            let strs = endpoint.split(".");
            strs[0] += "-internal";
            endpoint = strs.join(".");
        }
        if (serverUse && endpointType == "accelerate") {
            return "oss-accelerate.aliyuncs.com";
        }
        return endpoint;
    }
    static getHost(productId, regionId, endpoint) {
        return endpoint;
    }
    static convert(input, output) {
        if (!output) {
            return;
        }
        let inputModel = Object.assign({}, input);
        let constructor = output.constructor;
        for (let key of Object.keys(constructor.names())) {
            if (inputModel[key]) {
                output[key] = inputModel[key];
            }
        }
    }
    static getNonce() {
        return kitx.makeNonce();
    }
    static getSignature(request, secret) {
        var method = (request.method || 'GET').toUpperCase();
        var normalized = normalize(request.query);
        var canonicalized = canonicalize(normalized);
        var stringToSign = `${method}&${encode('/')}&${encode(canonicalized)}`;
        const key = secret + '&';
        return kitx.sha1(stringToSign, key, 'base64');
    }
    static getSignatureV1(query, method, secret) {
        var normalized = normalize(query);
        var canonicalized = canonicalize(normalized);
        var stringToSign = `${method}&${encode('/')}&${encode(canonicalized)}`;
        const key = secret + '&';
        return kitx.sha1(stringToSign, key, 'base64');
    }
    static json(body) {
        return __awaiter(this, void 0, void 0, function* () {
            let bytes = yield body.readBytes();
            let content = bytes.toString();
            try {
                let result = JSON.parse(content);
                return result;
            }
            catch (err) {
                return {};
            }
        });
    }
    static hasError(obj) {
        if (!obj) {
            return true;
        }
        if (obj.Code && obj.Code !== '0') {
            return true;
        }
        return false;
    }
    static getTimestamp() {
        let date = new Date();
        let YYYY = date.getUTCFullYear();
        let MM = kitx.pad2(date.getUTCMonth() + 1);
        let DD = kitx.pad2(date.getUTCDate());
        let HH = kitx.pad2(date.getUTCHours());
        let mm = kitx.pad2(date.getUTCMinutes());
        let ss = kitx.pad2(date.getUTCSeconds());
        return `${YYYY}-${MM}-${DD}T${HH}:${mm}:${ss}Z`;
    }
    static query(filter) {
        if (!filter) {
            return {};
        }
        let ret = {};
        flatMap(ret, filter);
        return ret;
    }
    static default(real, default_) {
        if (typeof real === 'undefined') {
            return default_;
        }
        return real;
    }
    static defaultNumber(real, default_) {
        if (typeof real === 'undefined') {
            return default_;
        }
        return real;
    }
    static getUserAgent(userAgent) {
        if (!userAgent || !userAgent.length) {
            return DEFAULT_USER_AGENT;
        }
        return DEFAULT_USER_AGENT + " " + userAgent;
    }
    static getDate() {
        let date = new Date();
        let YYYY = date.getUTCFullYear();
        let MM = kitx.pad2(date.getUTCMonth() + 1);
        let DD = kitx.pad2(date.getUTCDate());
        let HH = kitx.pad2(date.getUTCHours());
        let mm = kitx.pad2(date.getUTCMinutes());
        let ss = kitx.pad2(date.getUTCSeconds());
        return `${YYYY}-${MM}-${DD}T${HH}:${mm}:${ss}Z`;
    }
    static parseXml(body, clazz) {
        let ret = parseXML(body);
        if (typeof clazz !== 'undefined') {
            ret = this._xmlCast(ret, clazz);
        }
        return ret;
    }
    static _xmlCast(obj, clazz) {
        obj = obj || {};
        let ret = {};
        let clz = clazz;
        let names = clz.names();
        let types = clz.types();
        Object.keys(names).forEach((key) => {
            let originName = names[key];
            let value = obj[originName];
            let type = types[key];
            switch (type) {
                case 'boolean':
                    if (!value) {
                        ret[originName] = false;
                        return;
                    }
                    ret[originName] = value === 'false' ? false : true;
                    return;
                case 'number':
                    if (value != 0 && !value) {
                        ret[originName] = NaN;
                        return;
                    }
                    ret[originName] = +value;
                    return;
                case 'string':
                    if (!value) {
                        ret[originName] = '';
                        return;
                    }
                    ret[originName] = value.toString();
                    return;
                default:
                    if (type.type === 'array') {
                        if (!value) {
                            ret[originName] = [];
                            return;
                        }
                        if (!Array.isArray(value)) {
                            value = [value];
                        }
                        if (typeof type.itemType === 'function') {
                            ret[originName] = value.map((d) => {
                                return this._xmlCast(d, type.itemType);
                            });
                        }
                        else {
                            ret[originName] = value;
                        }
                    }
                    else if (typeof type === 'function') {
                        if (!value) {
                            value = {};
                        }
                        ret[originName] = this._xmlCast(value, type);
                    }
                    else {
                        ret[originName] = value;
                    }
            }
        });
        return ret;
    }
    static toForm(body, content, boundary) {
        return new FileFormStream(body, content, boundary);
    }
    static getErrMessage(xml) {
        let body = parseXML(xml);
        return body.Error || {};
    }
    static isFail(response) {
        return !response || response.statusCode < 200 || response.statusCode >= 300;
    }
    static getBoundary() {
        return kitx.makeNonce();
    }
    static empty(val) {
        return !val;
    }
    static equal(val1, val2) {
        return val1 === val2;
    }
    static getOpenPlatFormEndpoint(endpoint, regionId) {
        const supportRegionId = ['ap-southeast-1', 'ap-northeast-1', 'eu-central-1', 'cn-hongkong', 'ap-south-1'];
        if (regionId && regionId.length && supportRegionId.indexOf(regionId.toLowerCase()) != -1) {
            let strs = endpoint.split('.');
            strs[0] = strs[0] + "." + regionId.toLowerCase();
            return strs.join(".");
        }
        else {
            return endpoint;
        }
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map