"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddCustomLineRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            lineName: 'LineName',
            ipSegment: 'IpSegment',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            lineName: 'string',
            ipSegment: { 'type': 'array', 'itemType': AddCustomLineRequestIpSegment },
        };
    }
}
exports.AddCustomLineRequest = AddCustomLineRequest;
class AddCustomLineResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lineId: 'LineId',
            requestId: 'RequestId',
            lineCode: 'LineCode',
        };
    }
    static types() {
        return {
            lineId: 'number',
            requestId: 'string',
            lineCode: 'string',
        };
    }
}
exports.AddCustomLineResponseBody = AddCustomLineResponseBody;
class AddCustomLineResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddCustomLineResponseBody,
        };
    }
}
exports.AddCustomLineResponse = AddCustomLineResponse;
class AddDnsCacheDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            instanceId: 'InstanceId',
            cacheTtlMin: 'CacheTtlMin',
            cacheTtlMax: 'CacheTtlMax',
            sourceProtocol: 'SourceProtocol',
            sourceEdns: 'SourceEdns',
            remark: 'Remark',
            sourceDnsServer: 'SourceDnsServer',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            instanceId: 'string',
            cacheTtlMin: 'number',
            cacheTtlMax: 'number',
            sourceProtocol: 'string',
            sourceEdns: 'string',
            remark: 'string',
            sourceDnsServer: { 'type': 'array', 'itemType': AddDnsCacheDomainRequestSourceDnsServer },
        };
    }
}
exports.AddDnsCacheDomainRequest = AddDnsCacheDomainRequest;
class AddDnsCacheDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AddDnsCacheDomainResponseBody = AddDnsCacheDomainResponseBody;
class AddDnsCacheDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDnsCacheDomainResponseBody,
        };
    }
}
exports.AddDnsCacheDomainResponse = AddDnsCacheDomainResponse;
class AddDnsGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            strategyName: 'StrategyName',
            lines: 'Lines',
            defaultAddrPoolType: 'DefaultAddrPoolType',
            defaultLbaStrategy: 'DefaultLbaStrategy',
            defaultMinAvailableAddrNum: 'DefaultMinAvailableAddrNum',
            defaultMaxReturnAddrNum: 'DefaultMaxReturnAddrNum',
            defaultLatencyOptimization: 'DefaultLatencyOptimization',
            failoverAddrPoolType: 'FailoverAddrPoolType',
            failoverLbaStrategy: 'FailoverLbaStrategy',
            failoverMinAvailableAddrNum: 'FailoverMinAvailableAddrNum',
            failoverMaxReturnAddrNum: 'FailoverMaxReturnAddrNum',
            failoverLatencyOptimization: 'FailoverLatencyOptimization',
            strategyMode: 'StrategyMode',
            defaultAddrPool: 'DefaultAddrPool',
            failoverAddrPool: 'FailoverAddrPool',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            strategyName: 'string',
            lines: 'string',
            defaultAddrPoolType: 'string',
            defaultLbaStrategy: 'string',
            defaultMinAvailableAddrNum: 'number',
            defaultMaxReturnAddrNum: 'number',
            defaultLatencyOptimization: 'string',
            failoverAddrPoolType: 'string',
            failoverLbaStrategy: 'string',
            failoverMinAvailableAddrNum: 'number',
            failoverMaxReturnAddrNum: 'number',
            failoverLatencyOptimization: 'string',
            strategyMode: 'string',
            defaultAddrPool: { 'type': 'array', 'itemType': AddDnsGtmAccessStrategyRequestDefaultAddrPool },
            failoverAddrPool: { 'type': 'array', 'itemType': AddDnsGtmAccessStrategyRequestFailoverAddrPool },
        };
    }
}
exports.AddDnsGtmAccessStrategyRequest = AddDnsGtmAccessStrategyRequest;
class AddDnsGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            strategyId: 'StrategyId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            strategyId: 'string',
        };
    }
}
exports.AddDnsGtmAccessStrategyResponseBody = AddDnsGtmAccessStrategyResponseBody;
class AddDnsGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDnsGtmAccessStrategyResponseBody,
        };
    }
}
exports.AddDnsGtmAccessStrategyResponse = AddDnsGtmAccessStrategyResponse;
class AddDnsGtmAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
            name: 'Name',
            type: 'Type',
            lbaStrategy: 'LbaStrategy',
            monitorStatus: 'MonitorStatus',
            protocolType: 'ProtocolType',
            interval: 'Interval',
            evaluationCount: 'EvaluationCount',
            timeout: 'Timeout',
            monitorExtendInfo: 'MonitorExtendInfo',
            addr: 'Addr',
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
            name: 'string',
            type: 'string',
            lbaStrategy: 'string',
            monitorStatus: 'string',
            protocolType: 'string',
            interval: 'number',
            evaluationCount: 'number',
            timeout: 'number',
            monitorExtendInfo: 'string',
            addr: { 'type': 'array', 'itemType': AddDnsGtmAddressPoolRequestAddr },
            ispCityNode: { 'type': 'array', 'itemType': AddDnsGtmAddressPoolRequestIspCityNode },
        };
    }
}
exports.AddDnsGtmAddressPoolRequest = AddDnsGtmAddressPoolRequest;
class AddDnsGtmAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            addrPoolId: 'AddrPoolId',
            monitorConfigId: 'MonitorConfigId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            addrPoolId: 'string',
            monitorConfigId: 'string',
        };
    }
}
exports.AddDnsGtmAddressPoolResponseBody = AddDnsGtmAddressPoolResponseBody;
class AddDnsGtmAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDnsGtmAddressPoolResponseBody,
        };
    }
}
exports.AddDnsGtmAddressPoolResponse = AddDnsGtmAddressPoolResponse;
class AddDnsGtmMonitorRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
            protocolType: 'ProtocolType',
            interval: 'Interval',
            evaluationCount: 'EvaluationCount',
            timeout: 'Timeout',
            monitorExtendInfo: 'MonitorExtendInfo',
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
            protocolType: 'string',
            interval: 'number',
            evaluationCount: 'number',
            timeout: 'number',
            monitorExtendInfo: 'string',
            ispCityNode: { 'type': 'array', 'itemType': AddDnsGtmMonitorRequestIspCityNode },
        };
    }
}
exports.AddDnsGtmMonitorRequest = AddDnsGtmMonitorRequest;
class AddDnsGtmMonitorResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            monitorConfigId: 'MonitorConfigId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            monitorConfigId: 'string',
        };
    }
}
exports.AddDnsGtmMonitorResponseBody = AddDnsGtmMonitorResponseBody;
class AddDnsGtmMonitorResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDnsGtmMonitorResponseBody,
        };
    }
}
exports.AddDnsGtmMonitorResponse = AddDnsGtmMonitorResponse;
class AddDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            domainName: 'DomainName',
            groupId: 'GroupId',
            resourceGroupId: 'ResourceGroupId',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            domainName: 'string',
            groupId: 'string',
            resourceGroupId: 'string',
            userClientIp: 'string',
        };
    }
}
exports.AddDomainRequest = AddDomainRequest;
class AddDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            domainId: 'DomainId',
            requestId: 'RequestId',
            domainName: 'DomainName',
            punyCode: 'PunyCode',
            dnsServers: 'DnsServers',
            groupId: 'GroupId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            domainId: 'string',
            requestId: 'string',
            domainName: 'string',
            punyCode: 'string',
            dnsServers: AddDomainResponseBodyDnsServers,
            groupId: 'string',
        };
    }
}
exports.AddDomainResponseBody = AddDomainResponseBody;
class AddDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDomainResponseBody,
        };
    }
}
exports.AddDomainResponse = AddDomainResponse;
class AddDomainBackupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            domainName: 'DomainName',
            periodType: 'PeriodType',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            domainName: 'string',
            periodType: 'string',
            userClientIp: 'string',
        };
    }
}
exports.AddDomainBackupRequest = AddDomainBackupRequest;
class AddDomainBackupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            periodType: 'PeriodType',
            requestId: 'RequestId',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            periodType: 'string',
            requestId: 'string',
            domainName: 'string',
        };
    }
}
exports.AddDomainBackupResponseBody = AddDomainBackupResponseBody;
class AddDomainBackupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDomainBackupResponseBody,
        };
    }
}
exports.AddDomainBackupResponse = AddDomainBackupResponse;
class AddDomainGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            groupName: 'GroupName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            groupName: 'string',
        };
    }
}
exports.AddDomainGroupRequest = AddDomainGroupRequest;
class AddDomainGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            requestId: 'RequestId',
            groupId: 'GroupId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            requestId: 'string',
            groupId: 'string',
        };
    }
}
exports.AddDomainGroupResponseBody = AddDomainGroupResponseBody;
class AddDomainGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDomainGroupResponseBody,
        };
    }
}
exports.AddDomainGroupResponse = AddDomainGroupResponse;
class AddDomainRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            RR: 'RR',
            type: 'Type',
            value: 'Value',
            TTL: 'TTL',
            priority: 'Priority',
            line: 'Line',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            RR: 'string',
            type: 'string',
            value: 'string',
            TTL: 'number',
            priority: 'number',
            line: 'string',
        };
    }
}
exports.AddDomainRecordRequest = AddDomainRecordRequest;
class AddDomainRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            recordId: 'RecordId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            recordId: 'string',
        };
    }
}
exports.AddDomainRecordResponseBody = AddDomainRecordResponseBody;
class AddDomainRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDomainRecordResponseBody,
        };
    }
}
exports.AddDomainRecordResponse = AddDomainRecordResponse;
class AddGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            strategyName: 'StrategyName',
            defaultAddrPoolId: 'DefaultAddrPoolId',
            failoverAddrPoolId: 'FailoverAddrPoolId',
            accessLines: 'AccessLines',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            strategyName: 'string',
            defaultAddrPoolId: 'string',
            failoverAddrPoolId: 'string',
            accessLines: 'string',
        };
    }
}
exports.AddGtmAccessStrategyRequest = AddGtmAccessStrategyRequest;
class AddGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            strategyId: 'StrategyId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            strategyId: 'string',
        };
    }
}
exports.AddGtmAccessStrategyResponseBody = AddGtmAccessStrategyResponseBody;
class AddGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddGtmAccessStrategyResponseBody,
        };
    }
}
exports.AddGtmAccessStrategyResponse = AddGtmAccessStrategyResponse;
class AddGtmAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
            name: 'Name',
            type: 'Type',
            minAvailableAddrNum: 'MinAvailableAddrNum',
            monitorStatus: 'MonitorStatus',
            protocolType: 'ProtocolType',
            interval: 'Interval',
            evaluationCount: 'EvaluationCount',
            timeout: 'Timeout',
            monitorExtendInfo: 'MonitorExtendInfo',
            addr: 'Addr',
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
            name: 'string',
            type: 'string',
            minAvailableAddrNum: 'number',
            monitorStatus: 'string',
            protocolType: 'string',
            interval: 'number',
            evaluationCount: 'number',
            timeout: 'number',
            monitorExtendInfo: 'string',
            addr: { 'type': 'array', 'itemType': AddGtmAddressPoolRequestAddr },
            ispCityNode: { 'type': 'array', 'itemType': AddGtmAddressPoolRequestIspCityNode },
        };
    }
}
exports.AddGtmAddressPoolRequest = AddGtmAddressPoolRequest;
class AddGtmAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            addrPoolId: 'AddrPoolId',
            monitorConfigId: 'MonitorConfigId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            addrPoolId: 'string',
            monitorConfigId: 'string',
        };
    }
}
exports.AddGtmAddressPoolResponseBody = AddGtmAddressPoolResponseBody;
class AddGtmAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddGtmAddressPoolResponseBody,
        };
    }
}
exports.AddGtmAddressPoolResponse = AddGtmAddressPoolResponse;
class AddGtmMonitorRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
            protocolType: 'ProtocolType',
            interval: 'Interval',
            evaluationCount: 'EvaluationCount',
            timeout: 'Timeout',
            monitorExtendInfo: 'MonitorExtendInfo',
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
            protocolType: 'string',
            interval: 'number',
            evaluationCount: 'number',
            timeout: 'number',
            monitorExtendInfo: 'string',
            ispCityNode: { 'type': 'array', 'itemType': AddGtmMonitorRequestIspCityNode },
        };
    }
}
exports.AddGtmMonitorRequest = AddGtmMonitorRequest;
class AddGtmMonitorResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            monitorConfigId: 'MonitorConfigId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            monitorConfigId: 'string',
        };
    }
}
exports.AddGtmMonitorResponseBody = AddGtmMonitorResponseBody;
class AddGtmMonitorResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddGtmMonitorResponseBody,
        };
    }
}
exports.AddGtmMonitorResponse = AddGtmMonitorResponse;
class AddGtmRecoveryPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            name: 'Name',
            remark: 'Remark',
            faultAddrPool: 'FaultAddrPool',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            name: 'string',
            remark: 'string',
            faultAddrPool: 'string',
        };
    }
}
exports.AddGtmRecoveryPlanRequest = AddGtmRecoveryPlanRequest;
class AddGtmRecoveryPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recoveryPlanId: 'RecoveryPlanId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            recoveryPlanId: 'string',
            requestId: 'string',
        };
    }
}
exports.AddGtmRecoveryPlanResponseBody = AddGtmRecoveryPlanResponseBody;
class AddGtmRecoveryPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddGtmRecoveryPlanResponseBody,
        };
    }
}
exports.AddGtmRecoveryPlanResponse = AddGtmRecoveryPlanResponse;
class BindInstanceDomainsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            domainNames: 'DomainNames',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            domainNames: 'string',
        };
    }
}
exports.BindInstanceDomainsRequest = BindInstanceDomainsRequest;
class BindInstanceDomainsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            failedCount: 'FailedCount',
            successCount: 'SuccessCount',
        };
    }
    static types() {
        return {
            requestId: 'string',
            failedCount: 'number',
            successCount: 'number',
        };
    }
}
exports.BindInstanceDomainsResponseBody = BindInstanceDomainsResponseBody;
class BindInstanceDomainsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BindInstanceDomainsResponseBody,
        };
    }
}
exports.BindInstanceDomainsResponse = BindInstanceDomainsResponse;
class ChangeDomainGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            groupId: 'GroupId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            groupId: 'string',
        };
    }
}
exports.ChangeDomainGroupRequest = ChangeDomainGroupRequest;
class ChangeDomainGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            requestId: 'RequestId',
            groupId: 'GroupId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            requestId: 'string',
            groupId: 'string',
        };
    }
}
exports.ChangeDomainGroupResponseBody = ChangeDomainGroupResponseBody;
class ChangeDomainGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ChangeDomainGroupResponseBody,
        };
    }
}
exports.ChangeDomainGroupResponse = ChangeDomainGroupResponse;
class ChangeDomainOfDnsProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            newDomain: 'NewDomain',
            force: 'Force',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            newDomain: 'string',
            force: 'boolean',
        };
    }
}
exports.ChangeDomainOfDnsProductRequest = ChangeDomainOfDnsProductRequest;
class ChangeDomainOfDnsProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            originalDomain: 'OriginalDomain',
        };
    }
    static types() {
        return {
            requestId: 'string',
            originalDomain: 'string',
        };
    }
}
exports.ChangeDomainOfDnsProductResponseBody = ChangeDomainOfDnsProductResponseBody;
class ChangeDomainOfDnsProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ChangeDomainOfDnsProductResponseBody,
        };
    }
}
exports.ChangeDomainOfDnsProductResponse = ChangeDomainOfDnsProductResponse;
class CopyGtmConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            sourceId: 'SourceId',
            targetId: 'TargetId',
            copyType: 'CopyType',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            sourceId: 'string',
            targetId: 'string',
            copyType: 'string',
        };
    }
}
exports.CopyGtmConfigRequest = CopyGtmConfigRequest;
class CopyGtmConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.CopyGtmConfigResponseBody = CopyGtmConfigResponseBody;
class CopyGtmConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CopyGtmConfigResponseBody,
        };
    }
}
exports.CopyGtmConfigResponse = CopyGtmConfigResponse;
class DeleteCustomLinesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            lineIds: 'LineIds',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            lineIds: 'string',
        };
    }
}
exports.DeleteCustomLinesRequest = DeleteCustomLinesRequest;
class DeleteCustomLinesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteCustomLinesResponseBody = DeleteCustomLinesResponseBody;
class DeleteCustomLinesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteCustomLinesResponseBody,
        };
    }
}
exports.DeleteCustomLinesResponse = DeleteCustomLinesResponse;
class DeleteDnsCacheDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
        };
    }
}
exports.DeleteDnsCacheDomainRequest = DeleteDnsCacheDomainRequest;
class DeleteDnsCacheDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteDnsCacheDomainResponseBody = DeleteDnsCacheDomainResponseBody;
class DeleteDnsCacheDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDnsCacheDomainResponseBody,
        };
    }
}
exports.DeleteDnsCacheDomainResponse = DeleteDnsCacheDomainResponse;
class DeleteDnsGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
        };
    }
}
exports.DeleteDnsGtmAccessStrategyRequest = DeleteDnsGtmAccessStrategyRequest;
class DeleteDnsGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteDnsGtmAccessStrategyResponseBody = DeleteDnsGtmAccessStrategyResponseBody;
class DeleteDnsGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDnsGtmAccessStrategyResponseBody,
        };
    }
}
exports.DeleteDnsGtmAccessStrategyResponse = DeleteDnsGtmAccessStrategyResponse;
class DeleteDnsGtmAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
        };
    }
}
exports.DeleteDnsGtmAddressPoolRequest = DeleteDnsGtmAddressPoolRequest;
class DeleteDnsGtmAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteDnsGtmAddressPoolResponseBody = DeleteDnsGtmAddressPoolResponseBody;
class DeleteDnsGtmAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDnsGtmAddressPoolResponseBody,
        };
    }
}
exports.DeleteDnsGtmAddressPoolResponse = DeleteDnsGtmAddressPoolResponse;
class DeleteDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
        };
    }
}
exports.DeleteDomainRequest = DeleteDomainRequest;
class DeleteDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            requestId: 'string',
            domainName: 'string',
        };
    }
}
exports.DeleteDomainResponseBody = DeleteDomainResponseBody;
class DeleteDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDomainResponseBody,
        };
    }
}
exports.DeleteDomainResponse = DeleteDomainResponse;
class DeleteDomainGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            groupId: 'GroupId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            groupId: 'string',
        };
    }
}
exports.DeleteDomainGroupRequest = DeleteDomainGroupRequest;
class DeleteDomainGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteDomainGroupResponseBody = DeleteDomainGroupResponseBody;
class DeleteDomainGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDomainGroupResponseBody,
        };
    }
}
exports.DeleteDomainGroupResponse = DeleteDomainGroupResponse;
class DeleteDomainRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recordId: 'RecordId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recordId: 'string',
        };
    }
}
exports.DeleteDomainRecordRequest = DeleteDomainRecordRequest;
class DeleteDomainRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            recordId: 'RecordId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            recordId: 'string',
        };
    }
}
exports.DeleteDomainRecordResponseBody = DeleteDomainRecordResponseBody;
class DeleteDomainRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDomainRecordResponseBody,
        };
    }
}
exports.DeleteDomainRecordResponse = DeleteDomainRecordResponse;
class DeleteGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
        };
    }
}
exports.DeleteGtmAccessStrategyRequest = DeleteGtmAccessStrategyRequest;
class DeleteGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteGtmAccessStrategyResponseBody = DeleteGtmAccessStrategyResponseBody;
class DeleteGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteGtmAccessStrategyResponseBody,
        };
    }
}
exports.DeleteGtmAccessStrategyResponse = DeleteGtmAccessStrategyResponse;
class DeleteGtmAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
        };
    }
}
exports.DeleteGtmAddressPoolRequest = DeleteGtmAddressPoolRequest;
class DeleteGtmAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteGtmAddressPoolResponseBody = DeleteGtmAddressPoolResponseBody;
class DeleteGtmAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteGtmAddressPoolResponseBody,
        };
    }
}
exports.DeleteGtmAddressPoolResponse = DeleteGtmAddressPoolResponse;
class DeleteGtmRecoveryPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recoveryPlanId: 'RecoveryPlanId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recoveryPlanId: 'number',
        };
    }
}
exports.DeleteGtmRecoveryPlanRequest = DeleteGtmRecoveryPlanRequest;
class DeleteGtmRecoveryPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteGtmRecoveryPlanResponseBody = DeleteGtmRecoveryPlanResponseBody;
class DeleteGtmRecoveryPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteGtmRecoveryPlanResponseBody,
        };
    }
}
exports.DeleteGtmRecoveryPlanResponse = DeleteGtmRecoveryPlanResponse;
class DeleteSubDomainRecordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            RR: 'RR',
            type: 'Type',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            RR: 'string',
            type: 'string',
        };
    }
}
exports.DeleteSubDomainRecordsRequest = DeleteSubDomainRecordsRequest;
class DeleteSubDomainRecordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            RR: 'RR',
            totalCount: 'TotalCount',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            RR: 'string',
            totalCount: 'string',
            requestId: 'string',
        };
    }
}
exports.DeleteSubDomainRecordsResponseBody = DeleteSubDomainRecordsResponseBody;
class DeleteSubDomainRecordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteSubDomainRecordsResponseBody,
        };
    }
}
exports.DeleteSubDomainRecordsResponse = DeleteSubDomainRecordsResponse;
class DescribeBatchResultCountRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            taskId: 'TaskId',
            batchType: 'BatchType',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            taskId: 'number',
            batchType: 'string',
        };
    }
}
exports.DescribeBatchResultCountRequest = DescribeBatchResultCountRequest;
class DescribeBatchResultCountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            totalCount: 'TotalCount',
            taskId: 'TaskId',
            requestId: 'RequestId',
            failedCount: 'FailedCount',
            successCount: 'SuccessCount',
            batchType: 'BatchType',
            reason: 'Reason',
        };
    }
    static types() {
        return {
            status: 'number',
            totalCount: 'number',
            taskId: 'number',
            requestId: 'string',
            failedCount: 'number',
            successCount: 'number',
            batchType: 'string',
            reason: 'string',
        };
    }
}
exports.DescribeBatchResultCountResponseBody = DescribeBatchResultCountResponseBody;
class DescribeBatchResultCountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeBatchResultCountResponseBody,
        };
    }
}
exports.DescribeBatchResultCountResponse = DescribeBatchResultCountResponse;
class DescribeBatchResultDetailRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            taskId: 'TaskId',
            batchType: 'BatchType',
            status: 'Status',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            taskId: 'number',
            batchType: 'string',
            status: 'string',
        };
    }
}
exports.DescribeBatchResultDetailRequest = DescribeBatchResultDetailRequest;
class DescribeBatchResultDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            batchResultDetails: 'BatchResultDetails',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            batchResultDetails: DescribeBatchResultDetailResponseBodyBatchResultDetails,
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
        };
    }
}
exports.DescribeBatchResultDetailResponseBody = DescribeBatchResultDetailResponseBody;
class DescribeBatchResultDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeBatchResultDetailResponseBody,
        };
    }
}
exports.DescribeBatchResultDetailResponse = DescribeBatchResultDetailResponse;
class DescribeCustomLineRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lineId: 'LineId',
            lang: 'Lang',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lineId: 'number',
            lang: 'string',
            userClientIp: 'string',
        };
    }
}
exports.DescribeCustomLineRequest = DescribeCustomLineRequest;
class DescribeCustomLineResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            ipSegmentList: 'IpSegmentList',
            domainName: 'DomainName',
            id: 'Id',
            code: 'Code',
            name: 'Name',
        };
    }
    static types() {
        return {
            requestId: 'string',
            ipSegmentList: { 'type': 'array', 'itemType': DescribeCustomLineResponseBodyIpSegmentList },
            domainName: 'string',
            id: 'number',
            code: 'string',
            name: 'string',
        };
    }
}
exports.DescribeCustomLineResponseBody = DescribeCustomLineResponseBody;
class DescribeCustomLineResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeCustomLineResponseBody,
        };
    }
}
exports.DescribeCustomLineResponse = DescribeCustomLineResponse;
class DescribeCustomLinesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            domainName: 'string',
        };
    }
}
exports.DescribeCustomLinesRequest = DescribeCustomLinesRequest;
class DescribeCustomLinesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            customLines: 'CustomLines',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            customLines: { 'type': 'array', 'itemType': DescribeCustomLinesResponseBodyCustomLines },
            totalItems: 'number',
        };
    }
}
exports.DescribeCustomLinesResponseBody = DescribeCustomLinesResponseBody;
class DescribeCustomLinesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeCustomLinesResponseBody,
        };
    }
}
exports.DescribeCustomLinesResponse = DescribeCustomLinesResponse;
class DescribeDnsCacheDomainsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            keyword: 'Keyword',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.DescribeDnsCacheDomainsRequest = DescribeDnsCacheDomainsRequest;
class DescribeDnsCacheDomainsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domains: 'Domains',
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
        };
    }
    static types() {
        return {
            domains: { 'type': 'array', 'itemType': DescribeDnsCacheDomainsResponseBodyDomains },
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
        };
    }
}
exports.DescribeDnsCacheDomainsResponseBody = DescribeDnsCacheDomainsResponseBody;
class DescribeDnsCacheDomainsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsCacheDomainsResponseBody,
        };
    }
}
exports.DescribeDnsCacheDomainsResponse = DescribeDnsCacheDomainsResponse;
class DescribeDnsGtmAccessStrategiesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            strategyMode: 'StrategyMode',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            strategyMode: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesRequest = DescribeDnsGtmAccessStrategiesRequest;
class DescribeDnsGtmAccessStrategiesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            strategies: 'Strategies',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            strategies: DescribeDnsGtmAccessStrategiesResponseBodyStrategies,
            totalPages: 'number',
            totalItems: 'number',
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponseBody = DescribeDnsGtmAccessStrategiesResponseBody;
class DescribeDnsGtmAccessStrategiesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmAccessStrategiesResponseBody,
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponse = DescribeDnsGtmAccessStrategiesResponse;
class DescribeDnsGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyRequest = DescribeDnsGtmAccessStrategyRequest;
class DescribeDnsGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failoverMinAvailableAddrNum: 'FailoverMinAvailableAddrNum',
            defaultAddrPoolType: 'DefaultAddrPoolType',
            defaultAvailableAddrNum: 'DefaultAvailableAddrNum',
            strategyId: 'StrategyId',
            failoverAddrPoolGroupStatus: 'FailoverAddrPoolGroupStatus',
            failoverAvailableAddrNum: 'FailoverAvailableAddrNum',
            failoverLbaStrategy: 'FailoverLbaStrategy',
            defaultMaxReturnAddrNum: 'DefaultMaxReturnAddrNum',
            strategyMode: 'StrategyMode',
            createTimestamp: 'CreateTimestamp',
            defaultLbaStrategy: 'DefaultLbaStrategy',
            defaultAddrPoolGroupStatus: 'DefaultAddrPoolGroupStatus',
            failoverAddrPoolType: 'FailoverAddrPoolType',
            requestId: 'RequestId',
            instanceId: 'InstanceId',
            failoverAddrPools: 'FailoverAddrPools',
            defaultLatencyOptimization: 'DefaultLatencyOptimization',
            effectiveAddrPoolGroupType: 'EffectiveAddrPoolGroupType',
            createTime: 'CreateTime',
            defaultAddrPools: 'DefaultAddrPools',
            defaultMinAvailableAddrNum: 'DefaultMinAvailableAddrNum',
            failoverLatencyOptimization: 'FailoverLatencyOptimization',
            strategyName: 'StrategyName',
            failoverMaxReturnAddrNum: 'FailoverMaxReturnAddrNum',
            accessMode: 'AccessMode',
            lines: 'Lines',
        };
    }
    static types() {
        return {
            failoverMinAvailableAddrNum: 'number',
            defaultAddrPoolType: 'string',
            defaultAvailableAddrNum: 'number',
            strategyId: 'string',
            failoverAddrPoolGroupStatus: 'string',
            failoverAvailableAddrNum: 'number',
            failoverLbaStrategy: 'string',
            defaultMaxReturnAddrNum: 'number',
            strategyMode: 'string',
            createTimestamp: 'number',
            defaultLbaStrategy: 'string',
            defaultAddrPoolGroupStatus: 'string',
            failoverAddrPoolType: 'string',
            requestId: 'string',
            instanceId: 'string',
            failoverAddrPools: DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPools,
            defaultLatencyOptimization: 'string',
            effectiveAddrPoolGroupType: 'string',
            createTime: 'string',
            defaultAddrPools: DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPools,
            defaultMinAvailableAddrNum: 'number',
            failoverLatencyOptimization: 'string',
            strategyName: 'string',
            failoverMaxReturnAddrNum: 'number',
            accessMode: 'string',
            lines: DescribeDnsGtmAccessStrategyResponseBodyLines,
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponseBody = DescribeDnsGtmAccessStrategyResponseBody;
class DescribeDnsGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmAccessStrategyResponseBody,
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponse = DescribeDnsGtmAccessStrategyResponse;
class DescribeDnsGtmAccessStrategyAvailableConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            strategyMode: 'StrategyMode',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            strategyMode: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigRequest = DescribeDnsGtmAccessStrategyAvailableConfigRequest;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            selectedDomainLines: 'SelectedDomainLines',
            domainAddrPools: 'DomainAddrPools',
            ipv4AddrPools: 'Ipv4AddrPools',
            requestId: 'RequestId',
            selectedIpv4Lines: 'SelectedIpv4Lines',
            ipv6AddrPools: 'Ipv6AddrPools',
            suggestSetDefaultLine: 'SuggestSetDefaultLine',
            selectedIpv6Lines: 'SelectedIpv6Lines',
            lines: 'Lines',
        };
    }
    static types() {
        return {
            selectedDomainLines: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedDomainLines,
            domainAddrPools: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPools,
            ipv4AddrPools: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPools,
            requestId: 'string',
            selectedIpv4Lines: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv4Lines,
            ipv6AddrPools: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPools,
            suggestSetDefaultLine: 'boolean',
            selectedIpv6Lines: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv6Lines,
            lines: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLines,
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBody = DescribeDnsGtmAccessStrategyAvailableConfigResponseBody;
class DescribeDnsGtmAccessStrategyAvailableConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmAccessStrategyAvailableConfigResponseBody,
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponse = DescribeDnsGtmAccessStrategyAvailableConfigResponse;
class DescribeDnsGtmAddrAttributeInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            type: 'Type',
            addrs: 'Addrs',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            type: 'string',
            addrs: 'string',
        };
    }
}
exports.DescribeDnsGtmAddrAttributeInfoRequest = DescribeDnsGtmAddrAttributeInfoRequest;
class DescribeDnsGtmAddrAttributeInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            addr: 'Addr',
        };
    }
    static types() {
        return {
            requestId: 'string',
            addr: DescribeDnsGtmAddrAttributeInfoResponseBodyAddr,
        };
    }
}
exports.DescribeDnsGtmAddrAttributeInfoResponseBody = DescribeDnsGtmAddrAttributeInfoResponseBody;
class DescribeDnsGtmAddrAttributeInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmAddrAttributeInfoResponseBody,
        };
    }
}
exports.DescribeDnsGtmAddrAttributeInfoResponse = DescribeDnsGtmAddrAttributeInfoResponse;
class DescribeDnsGtmAddressPoolAvailableConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeDnsGtmAddressPoolAvailableConfigRequest = DescribeDnsGtmAddressPoolAvailableConfigRequest;
class DescribeDnsGtmAddressPoolAvailableConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            attributeInfos: 'AttributeInfos',
        };
    }
    static types() {
        return {
            requestId: 'string',
            attributeInfos: DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfos,
        };
    }
}
exports.DescribeDnsGtmAddressPoolAvailableConfigResponseBody = DescribeDnsGtmAddressPoolAvailableConfigResponseBody;
class DescribeDnsGtmAddressPoolAvailableConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmAddressPoolAvailableConfigResponseBody,
        };
    }
}
exports.DescribeDnsGtmAddressPoolAvailableConfigResponse = DescribeDnsGtmAddressPoolAvailableConfigResponse;
class DescribeDnsGtmAvailableAlertGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
        };
    }
}
exports.DescribeDnsGtmAvailableAlertGroupRequest = DescribeDnsGtmAvailableAlertGroupRequest;
class DescribeDnsGtmAvailableAlertGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            availableAlertGroup: 'AvailableAlertGroup',
        };
    }
    static types() {
        return {
            requestId: 'string',
            availableAlertGroup: 'string',
        };
    }
}
exports.DescribeDnsGtmAvailableAlertGroupResponseBody = DescribeDnsGtmAvailableAlertGroupResponseBody;
class DescribeDnsGtmAvailableAlertGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmAvailableAlertGroupResponseBody,
        };
    }
}
exports.DescribeDnsGtmAvailableAlertGroupResponse = DescribeDnsGtmAvailableAlertGroupResponse;
class DescribeDnsGtmInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeDnsGtmInstanceRequest = DescribeDnsGtmInstanceRequest;
class DescribeDnsGtmInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expireTimestamp: 'ExpireTimestamp',
            requestId: 'RequestId',
            resourceGroupId: 'ResourceGroupId',
            instanceId: 'InstanceId',
            taskQuota: 'TaskQuota',
            config: 'Config',
            createTime: 'CreateTime',
            smsQuota: 'SmsQuota',
            versionCode: 'VersionCode',
            paymentType: 'PaymentType',
            expireTime: 'ExpireTime',
            createTimestamp: 'CreateTimestamp',
            usedQuota: 'UsedQuota',
        };
    }
    static types() {
        return {
            expireTimestamp: 'number',
            requestId: 'string',
            resourceGroupId: 'string',
            instanceId: 'string',
            taskQuota: 'number',
            config: DescribeDnsGtmInstanceResponseBodyConfig,
            createTime: 'string',
            smsQuota: 'number',
            versionCode: 'string',
            paymentType: 'string',
            expireTime: 'string',
            createTimestamp: 'number',
            usedQuota: DescribeDnsGtmInstanceResponseBodyUsedQuota,
        };
    }
}
exports.DescribeDnsGtmInstanceResponseBody = DescribeDnsGtmInstanceResponseBody;
class DescribeDnsGtmInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmInstanceResponseBody,
        };
    }
}
exports.DescribeDnsGtmInstanceResponse = DescribeDnsGtmInstanceResponse;
class DescribeDnsGtmInstanceAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolRequest = DescribeDnsGtmInstanceAddressPoolRequest;
class DescribeDnsGtmInstanceAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrs: 'Addrs',
            requestId: 'RequestId',
            lbaStrategy: 'LbaStrategy',
            createTime: 'CreateTime',
            addrCount: 'AddrCount',
            name: 'Name',
            type: 'Type',
            updateTime: 'UpdateTime',
            addrPoolId: 'AddrPoolId',
            updateTimestamp: 'UpdateTimestamp',
            monitorConfigId: 'MonitorConfigId',
            monitorStatus: 'MonitorStatus',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            addrs: DescribeDnsGtmInstanceAddressPoolResponseBodyAddrs,
            requestId: 'string',
            lbaStrategy: 'string',
            createTime: 'string',
            addrCount: 'number',
            name: 'string',
            type: 'string',
            updateTime: 'string',
            addrPoolId: 'string',
            updateTimestamp: 'number',
            monitorConfigId: 'string',
            monitorStatus: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolResponseBody = DescribeDnsGtmInstanceAddressPoolResponseBody;
class DescribeDnsGtmInstanceAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmInstanceAddressPoolResponseBody,
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolResponse = DescribeDnsGtmInstanceAddressPoolResponse;
class DescribeDnsGtmInstanceAddressPoolsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolsRequest = DescribeDnsGtmInstanceAddressPoolsRequest;
class DescribeDnsGtmInstanceAddressPoolsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
            addrPools: 'AddrPools',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            totalItems: 'number',
            addrPools: DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPools,
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolsResponseBody = DescribeDnsGtmInstanceAddressPoolsResponseBody;
class DescribeDnsGtmInstanceAddressPoolsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmInstanceAddressPoolsResponseBody,
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolsResponse = DescribeDnsGtmInstanceAddressPoolsResponse;
class DescribeDnsGtmInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            keyword: 'Keyword',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            keyword: 'string',
            resourceGroupId: 'string',
        };
    }
}
exports.DescribeDnsGtmInstancesRequest = DescribeDnsGtmInstancesRequest;
class DescribeDnsGtmInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            gtmInstances: 'GtmInstances',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            gtmInstances: { 'type': 'array', 'itemType': DescribeDnsGtmInstancesResponseBodyGtmInstances },
            totalPages: 'number',
            totalItems: 'number',
        };
    }
}
exports.DescribeDnsGtmInstancesResponseBody = DescribeDnsGtmInstancesResponseBody;
class DescribeDnsGtmInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmInstancesResponseBody,
        };
    }
}
exports.DescribeDnsGtmInstancesResponse = DescribeDnsGtmInstancesResponse;
class DescribeDnsGtmInstanceStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeDnsGtmInstanceStatusRequest = DescribeDnsGtmInstanceStatusRequest;
class DescribeDnsGtmInstanceStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            strategyNotAvailableNum: 'StrategyNotAvailableNum',
            addrAvailableNum: 'AddrAvailableNum',
            requestId: 'RequestId',
            switchToFailoverStrategyNum: 'SwitchToFailoverStrategyNum',
            addrNotAvailableNum: 'AddrNotAvailableNum',
            addrPoolGroupNotAvailableNum: 'AddrPoolGroupNotAvailableNum',
        };
    }
    static types() {
        return {
            strategyNotAvailableNum: 'number',
            addrAvailableNum: 'number',
            requestId: 'string',
            switchToFailoverStrategyNum: 'number',
            addrNotAvailableNum: 'number',
            addrPoolGroupNotAvailableNum: 'number',
        };
    }
}
exports.DescribeDnsGtmInstanceStatusResponseBody = DescribeDnsGtmInstanceStatusResponseBody;
class DescribeDnsGtmInstanceStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmInstanceStatusResponseBody,
        };
    }
}
exports.DescribeDnsGtmInstanceStatusResponse = DescribeDnsGtmInstanceStatusResponse;
class DescribeDnsGtmInstanceSystemCnameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeDnsGtmInstanceSystemCnameRequest = DescribeDnsGtmInstanceSystemCnameRequest;
class DescribeDnsGtmInstanceSystemCnameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            systemCname: 'SystemCname',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            systemCname: 'string',
            requestId: 'string',
        };
    }
}
exports.DescribeDnsGtmInstanceSystemCnameResponseBody = DescribeDnsGtmInstanceSystemCnameResponseBody;
class DescribeDnsGtmInstanceSystemCnameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmInstanceSystemCnameResponseBody,
        };
    }
}
exports.DescribeDnsGtmInstanceSystemCnameResponse = DescribeDnsGtmInstanceSystemCnameResponse;
class DescribeDnsGtmLogsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
            keyword: 'Keyword',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            startTimestamp: 'StartTimestamp',
            endTimestamp: 'EndTimestamp',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTimestamp: 'number',
            endTimestamp: 'number',
        };
    }
}
exports.DescribeDnsGtmLogsRequest = DescribeDnsGtmLogsRequest;
class DescribeDnsGtmLogsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            logs: 'Logs',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            logs: DescribeDnsGtmLogsResponseBodyLogs,
            totalItems: 'number',
        };
    }
}
exports.DescribeDnsGtmLogsResponseBody = DescribeDnsGtmLogsResponseBody;
class DescribeDnsGtmLogsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmLogsResponseBody,
        };
    }
}
exports.DescribeDnsGtmLogsResponse = DescribeDnsGtmLogsResponse;
class DescribeDnsGtmMonitorAvailableConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigRequest = DescribeDnsGtmMonitorAvailableConfigRequest;
class DescribeDnsGtmMonitorAvailableConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ipv4IspCityNodes: 'Ipv4IspCityNodes',
            domainIpv4IspCityNodes: 'DomainIpv4IspCityNodes',
            requestId: 'RequestId',
            domainIpv6IspCityNodes: 'DomainIpv6IspCityNodes',
            ipv6IspCityNodes: 'Ipv6IspCityNodes',
        };
    }
    static types() {
        return {
            ipv4IspCityNodes: DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodes,
            domainIpv4IspCityNodes: DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodes,
            requestId: 'string',
            domainIpv6IspCityNodes: DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodes,
            ipv6IspCityNodes: DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodes,
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBody = DescribeDnsGtmMonitorAvailableConfigResponseBody;
class DescribeDnsGtmMonitorAvailableConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmMonitorAvailableConfigResponseBody,
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponse = DescribeDnsGtmMonitorAvailableConfigResponse;
class DescribeDnsGtmMonitorConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            monitorConfigId: 'MonitorConfigId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            monitorConfigId: 'string',
        };
    }
}
exports.DescribeDnsGtmMonitorConfigRequest = DescribeDnsGtmMonitorConfigRequest;
class DescribeDnsGtmMonitorConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            timeout: 'Timeout',
            protocolType: 'ProtocolType',
            ispCityNodes: 'IspCityNodes',
            createTime: 'CreateTime',
            updateTime: 'UpdateTime',
            evaluationCount: 'EvaluationCount',
            updateTimestamp: 'UpdateTimestamp',
            monitorExtendInfo: 'MonitorExtendInfo',
            monitorConfigId: 'MonitorConfigId',
            createTimestamp: 'CreateTimestamp',
            interval: 'Interval',
        };
    }
    static types() {
        return {
            requestId: 'string',
            timeout: 'number',
            protocolType: 'string',
            ispCityNodes: DescribeDnsGtmMonitorConfigResponseBodyIspCityNodes,
            createTime: 'string',
            updateTime: 'string',
            evaluationCount: 'number',
            updateTimestamp: 'number',
            monitorExtendInfo: 'string',
            monitorConfigId: 'string',
            createTimestamp: 'number',
            interval: 'number',
        };
    }
}
exports.DescribeDnsGtmMonitorConfigResponseBody = DescribeDnsGtmMonitorConfigResponseBody;
class DescribeDnsGtmMonitorConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsGtmMonitorConfigResponseBody,
        };
    }
}
exports.DescribeDnsGtmMonitorConfigResponse = DescribeDnsGtmMonitorConfigResponse;
class DescribeDnsProductInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeDnsProductInstanceRequest = DescribeDnsProductInstanceRequest;
class DescribeDnsProductInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            monitorNodeCount: 'MonitorNodeCount',
            inBlackHole: 'InBlackHole',
            bindDomainCount: 'BindDomainCount',
            regionLines: 'RegionLines',
            bindCount: 'BindCount',
            endTime: 'EndTime',
            startTimestamp: 'StartTimestamp',
            ISPLines: 'ISPLines',
            endTimestamp: 'EndTimestamp',
            dnsServers: 'DnsServers',
            DDosDefendQuery: 'DDosDefendQuery',
            dnsSecurity: 'DnsSecurity',
            domainType: 'DomainType',
            URLForwardCount: 'URLForwardCount',
            TTLMinValue: 'TTLMinValue',
            paymentType: 'PaymentType',
            versionName: 'VersionName',
            overseaLine: 'OverseaLine',
            ISPRegionLines: 'ISPRegionLines',
            gslb: 'Gslb',
            bindUsedCount: 'BindUsedCount',
            requestId: 'RequestId',
            dnsSLBCount: 'DnsSLBCount',
            instanceId: 'InstanceId',
            monitorTaskCount: 'MonitorTaskCount',
            startTime: 'StartTime',
            DDosDefendFlow: 'DDosDefendFlow',
            monitorFrequency: 'MonitorFrequency',
            searchEngineLines: 'SearchEngineLines',
            bindDomainUsedCount: 'BindDomainUsedCount',
            versionCode: 'VersionCode',
            overseaDDosDefendFlow: 'OverseaDDosDefendFlow',
            inClean: 'InClean',
            subDomainLevel: 'SubDomainLevel',
            domain: 'Domain',
        };
    }
    static types() {
        return {
            monitorNodeCount: 'number',
            inBlackHole: 'boolean',
            bindDomainCount: 'number',
            regionLines: 'boolean',
            bindCount: 'number',
            endTime: 'string',
            startTimestamp: 'number',
            ISPLines: 'string',
            endTimestamp: 'number',
            dnsServers: DescribeDnsProductInstanceResponseBodyDnsServers,
            DDosDefendQuery: 'number',
            dnsSecurity: 'string',
            domainType: 'string',
            URLForwardCount: 'number',
            TTLMinValue: 'number',
            paymentType: 'string',
            versionName: 'string',
            overseaLine: 'string',
            ISPRegionLines: 'string',
            gslb: 'boolean',
            bindUsedCount: 'number',
            requestId: 'string',
            dnsSLBCount: 'number',
            instanceId: 'string',
            monitorTaskCount: 'number',
            startTime: 'string',
            DDosDefendFlow: 'number',
            monitorFrequency: 'number',
            searchEngineLines: 'string',
            bindDomainUsedCount: 'number',
            versionCode: 'string',
            overseaDDosDefendFlow: 'number',
            inClean: 'boolean',
            subDomainLevel: 'number',
            domain: 'string',
        };
    }
}
exports.DescribeDnsProductInstanceResponseBody = DescribeDnsProductInstanceResponseBody;
class DescribeDnsProductInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsProductInstanceResponseBody,
        };
    }
}
exports.DescribeDnsProductInstanceResponse = DescribeDnsProductInstanceResponse;
class DescribeDnsProductInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            versionCode: 'VersionCode',
            domainType: 'DomainType',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            versionCode: 'string',
            domainType: 'string',
        };
    }
}
exports.DescribeDnsProductInstancesRequest = DescribeDnsProductInstancesRequest;
class DescribeDnsProductInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            domainType: 'DomainType',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            dnsProducts: 'DnsProducts',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            domainType: 'string',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            dnsProducts: DescribeDnsProductInstancesResponseBodyDnsProducts,
        };
    }
}
exports.DescribeDnsProductInstancesResponseBody = DescribeDnsProductInstancesResponseBody;
class DescribeDnsProductInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDnsProductInstancesResponseBody,
        };
    }
}
exports.DescribeDnsProductInstancesResponse = DescribeDnsProductInstancesResponse;
class DescribeDNSSLBSubDomainsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            rr: 'Rr',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            rr: 'string',
        };
    }
}
exports.DescribeDNSSLBSubDomainsRequest = DescribeDNSSLBSubDomainsRequest;
class DescribeDNSSLBSubDomainsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            slbSubDomains: 'SlbSubDomains',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            slbSubDomains: DescribeDNSSLBSubDomainsResponseBodySlbSubDomains,
        };
    }
}
exports.DescribeDNSSLBSubDomainsResponseBody = DescribeDNSSLBSubDomainsResponseBody;
class DescribeDNSSLBSubDomainsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDNSSLBSubDomainsResponseBody,
        };
    }
}
exports.DescribeDNSSLBSubDomainsResponse = DescribeDNSSLBSubDomainsResponse;
class DescribeDohAccountStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            startDate: 'StartDate',
            endDate: 'EndDate',
        };
    }
    static types() {
        return {
            lang: 'string',
            startDate: 'string',
            endDate: 'string',
        };
    }
}
exports.DescribeDohAccountStatisticsRequest = DescribeDohAccountStatisticsRequest;
class DescribeDohAccountStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            requestId: 'string',
            statistics: { 'type': 'array', 'itemType': DescribeDohAccountStatisticsResponseBodyStatistics },
        };
    }
}
exports.DescribeDohAccountStatisticsResponseBody = DescribeDohAccountStatisticsResponseBody;
class DescribeDohAccountStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDohAccountStatisticsResponseBody,
        };
    }
}
exports.DescribeDohAccountStatisticsResponse = DescribeDohAccountStatisticsResponse;
class DescribeDohDomainStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            domainName: 'DomainName',
            startDate: 'StartDate',
            endDate: 'EndDate',
        };
    }
    static types() {
        return {
            lang: 'string',
            domainName: 'string',
            startDate: 'string',
            endDate: 'string',
        };
    }
}
exports.DescribeDohDomainStatisticsRequest = DescribeDohDomainStatisticsRequest;
class DescribeDohDomainStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            requestId: 'string',
            statistics: { 'type': 'array', 'itemType': DescribeDohDomainStatisticsResponseBodyStatistics },
        };
    }
}
exports.DescribeDohDomainStatisticsResponseBody = DescribeDohDomainStatisticsResponseBody;
class DescribeDohDomainStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDohDomainStatisticsResponseBody,
        };
    }
}
exports.DescribeDohDomainStatisticsResponse = DescribeDohDomainStatisticsResponse;
class DescribeDohDomainStatisticsSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            startDate: 'StartDate',
            endDate: 'EndDate',
            orderBy: 'OrderBy',
            direction: 'Direction',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startDate: 'string',
            endDate: 'string',
            orderBy: 'string',
            direction: 'string',
            domainName: 'string',
        };
    }
}
exports.DescribeDohDomainStatisticsSummaryRequest = DescribeDohDomainStatisticsSummaryRequest;
class DescribeDohDomainStatisticsSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            totalItems: 'number',
            statistics: { 'type': 'array', 'itemType': DescribeDohDomainStatisticsSummaryResponseBodyStatistics },
        };
    }
}
exports.DescribeDohDomainStatisticsSummaryResponseBody = DescribeDohDomainStatisticsSummaryResponseBody;
class DescribeDohDomainStatisticsSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDohDomainStatisticsSummaryResponseBody,
        };
    }
}
exports.DescribeDohDomainStatisticsSummaryResponse = DescribeDohDomainStatisticsSummaryResponse;
class DescribeDohSubDomainStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            subDomain: 'SubDomain',
            startDate: 'StartDate',
            endDate: 'EndDate',
        };
    }
    static types() {
        return {
            lang: 'string',
            subDomain: 'string',
            startDate: 'string',
            endDate: 'string',
        };
    }
}
exports.DescribeDohSubDomainStatisticsRequest = DescribeDohSubDomainStatisticsRequest;
class DescribeDohSubDomainStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            requestId: 'string',
            statistics: { 'type': 'array', 'itemType': DescribeDohSubDomainStatisticsResponseBodyStatistics },
        };
    }
}
exports.DescribeDohSubDomainStatisticsResponseBody = DescribeDohSubDomainStatisticsResponseBody;
class DescribeDohSubDomainStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDohSubDomainStatisticsResponseBody,
        };
    }
}
exports.DescribeDohSubDomainStatisticsResponse = DescribeDohSubDomainStatisticsResponse;
class DescribeDohSubDomainStatisticsSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            startDate: 'StartDate',
            endDate: 'EndDate',
            orderBy: 'OrderBy',
            direction: 'Direction',
            subDomain: 'SubDomain',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startDate: 'string',
            endDate: 'string',
            orderBy: 'string',
            direction: 'string',
            subDomain: 'string',
            domainName: 'string',
        };
    }
}
exports.DescribeDohSubDomainStatisticsSummaryRequest = DescribeDohSubDomainStatisticsSummaryRequest;
class DescribeDohSubDomainStatisticsSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            totalItems: 'number',
            statistics: { 'type': 'array', 'itemType': DescribeDohSubDomainStatisticsSummaryResponseBodyStatistics },
        };
    }
}
exports.DescribeDohSubDomainStatisticsSummaryResponseBody = DescribeDohSubDomainStatisticsSummaryResponseBody;
class DescribeDohSubDomainStatisticsSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDohSubDomainStatisticsSummaryResponseBody,
        };
    }
}
exports.DescribeDohSubDomainStatisticsSummaryResponse = DescribeDohSubDomainStatisticsSummaryResponse;
class DescribeDohUserInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            startDate: 'StartDate',
            endDate: 'EndDate',
        };
    }
    static types() {
        return {
            lang: 'string',
            startDate: 'string',
            endDate: 'string',
        };
    }
}
exports.DescribeDohUserInfoRequest = DescribeDohUserInfoRequest;
class DescribeDohUserInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            subDomainCount: 'SubDomainCount',
            pdnsId: 'PdnsId',
            domainCount: 'DomainCount',
        };
    }
    static types() {
        return {
            requestId: 'string',
            subDomainCount: 'number',
            pdnsId: 'number',
            domainCount: 'number',
        };
    }
}
exports.DescribeDohUserInfoResponseBody = DescribeDohUserInfoResponseBody;
class DescribeDohUserInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDohUserInfoResponseBody,
        };
    }
}
exports.DescribeDohUserInfoResponse = DescribeDohUserInfoResponse;
class DescribeDomainDnssecInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
        };
    }
}
exports.DescribeDomainDnssecInfoRequest = DescribeDomainDnssecInfoRequest;
class DescribeDomainDnssecInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            requestId: 'RequestId',
            digest: 'Digest',
            domainName: 'DomainName',
            publicKey: 'PublicKey',
            digestType: 'DigestType',
            dsRecord: 'DsRecord',
            keyTag: 'KeyTag',
            flags: 'Flags',
            algorithm: 'Algorithm',
        };
    }
    static types() {
        return {
            status: 'string',
            requestId: 'string',
            digest: 'string',
            domainName: 'string',
            publicKey: 'string',
            digestType: 'string',
            dsRecord: 'string',
            keyTag: 'string',
            flags: 'string',
            algorithm: 'string',
        };
    }
}
exports.DescribeDomainDnssecInfoResponseBody = DescribeDomainDnssecInfoResponseBody;
class DescribeDomainDnssecInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainDnssecInfoResponseBody,
        };
    }
}
exports.DescribeDomainDnssecInfoResponse = DescribeDomainDnssecInfoResponse;
class DescribeDomainGroupsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            keyWord: 'KeyWord',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            keyWord: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.DescribeDomainGroupsRequest = DescribeDomainGroupsRequest;
class DescribeDomainGroupsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainGroups: 'DomainGroups',
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
        };
    }
    static types() {
        return {
            domainGroups: DescribeDomainGroupsResponseBodyDomainGroups,
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
        };
    }
}
exports.DescribeDomainGroupsResponseBody = DescribeDomainGroupsResponseBody;
class DescribeDomainGroupsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainGroupsResponseBody,
        };
    }
}
exports.DescribeDomainGroupsResponse = DescribeDomainGroupsResponse;
class DescribeDomainInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            needDetailAttributes: 'NeedDetailAttributes',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            needDetailAttributes: 'boolean',
        };
    }
}
exports.DescribeDomainInfoRequest = DescribeDomainInfoRequest;
class DescribeDomainInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recordLineTreeJson: 'RecordLineTreeJson',
            groupName: 'GroupName',
            inBlackHole: 'InBlackHole',
            regionLines: 'RegionLines',
            slaveDns: 'SlaveDns',
            aliDomain: 'AliDomain',
            requestId: 'RequestId',
            resourceGroupId: 'ResourceGroupId',
            instanceId: 'InstanceId',
            domainName: 'DomainName',
            createTime: 'CreateTime',
            punyCode: 'PunyCode',
            dnsServers: 'DnsServers',
            remark: 'Remark',
            groupId: 'GroupId',
            versionCode: 'VersionCode',
            recordLines: 'RecordLines',
            domainId: 'DomainId',
            availableTtls: 'AvailableTtls',
            minTtl: 'MinTtl',
            inClean: 'InClean',
            versionName: 'VersionName',
            lineType: 'LineType',
        };
    }
    static types() {
        return {
            recordLineTreeJson: 'string',
            groupName: 'string',
            inBlackHole: 'boolean',
            regionLines: 'boolean',
            slaveDns: 'boolean',
            aliDomain: 'boolean',
            requestId: 'string',
            resourceGroupId: 'string',
            instanceId: 'string',
            domainName: 'string',
            createTime: 'string',
            punyCode: 'string',
            dnsServers: DescribeDomainInfoResponseBodyDnsServers,
            remark: 'string',
            groupId: 'string',
            versionCode: 'string',
            recordLines: DescribeDomainInfoResponseBodyRecordLines,
            domainId: 'string',
            availableTtls: DescribeDomainInfoResponseBodyAvailableTtls,
            minTtl: 'number',
            inClean: 'boolean',
            versionName: 'string',
            lineType: 'string',
        };
    }
}
exports.DescribeDomainInfoResponseBody = DescribeDomainInfoResponseBody;
class DescribeDomainInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainInfoResponseBody,
        };
    }
}
exports.DescribeDomainInfoResponse = DescribeDomainInfoResponse;
class DescribeDomainLogsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            keyWord: 'KeyWord',
            groupId: 'GroupId',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            startDate: 'StartDate',
            endDate: 'endDate',
            type: 'Type',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            keyWord: 'string',
            groupId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startDate: 'string',
            endDate: 'string',
            type: 'string',
        };
    }
}
exports.DescribeDomainLogsRequest = DescribeDomainLogsRequest;
class DescribeDomainLogsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            domainLogs: 'DomainLogs',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            domainLogs: DescribeDomainLogsResponseBodyDomainLogs,
        };
    }
}
exports.DescribeDomainLogsResponseBody = DescribeDomainLogsResponseBody;
class DescribeDomainLogsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainLogsResponseBody,
        };
    }
}
exports.DescribeDomainLogsResponse = DescribeDomainLogsResponse;
class DescribeDomainNsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            domainType: 'DomainType',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            domainType: 'string',
        };
    }
}
exports.DescribeDomainNsRequest = DescribeDomainNsRequest;
class DescribeDomainNsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            allAliDns: 'AllAliDns',
            requestId: 'RequestId',
            expectDnsServers: 'ExpectDnsServers',
            dnsServers: 'DnsServers',
            includeAliDns: 'IncludeAliDns',
        };
    }
    static types() {
        return {
            allAliDns: 'boolean',
            requestId: 'string',
            expectDnsServers: DescribeDomainNsResponseBodyExpectDnsServers,
            dnsServers: DescribeDomainNsResponseBodyDnsServers,
            includeAliDns: 'boolean',
        };
    }
}
exports.DescribeDomainNsResponseBody = DescribeDomainNsResponseBody;
class DescribeDomainNsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainNsResponseBody,
        };
    }
}
exports.DescribeDomainNsResponse = DescribeDomainNsResponse;
class DescribeDomainRecordInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recordId: 'RecordId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recordId: 'string',
        };
    }
}
exports.DescribeDomainRecordInfoRequest = DescribeDomainRecordInfoRequest;
class DescribeDomainRecordInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            RR: 'RR',
            groupName: 'GroupName',
            requestId: 'RequestId',
            domainName: 'DomainName',
            priority: 'Priority',
            punyCode: 'PunyCode',
            TTL: 'TTL',
            groupId: 'GroupId',
            line: 'Line',
            locked: 'Locked',
            type: 'Type',
            domainId: 'DomainId',
            value: 'Value',
            recordId: 'RecordId',
        };
    }
    static types() {
        return {
            status: 'string',
            RR: 'string',
            groupName: 'string',
            requestId: 'string',
            domainName: 'string',
            priority: 'number',
            punyCode: 'string',
            TTL: 'number',
            groupId: 'string',
            line: 'string',
            locked: 'boolean',
            type: 'string',
            domainId: 'string',
            value: 'string',
            recordId: 'string',
        };
    }
}
exports.DescribeDomainRecordInfoResponseBody = DescribeDomainRecordInfoResponseBody;
class DescribeDomainRecordInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainRecordInfoResponseBody,
        };
    }
}
exports.DescribeDomainRecordInfoResponse = DescribeDomainRecordInfoResponse;
class DescribeDomainRecordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            keyWord: 'KeyWord',
            RRKeyWord: 'RRKeyWord',
            typeKeyWord: 'TypeKeyWord',
            valueKeyWord: 'ValueKeyWord',
            orderBy: 'OrderBy',
            direction: 'Direction',
            searchMode: 'SearchMode',
            groupId: 'GroupId',
            type: 'Type',
            line: 'Line',
            status: 'Status',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            keyWord: 'string',
            RRKeyWord: 'string',
            typeKeyWord: 'string',
            valueKeyWord: 'string',
            orderBy: 'string',
            direction: 'string',
            searchMode: 'string',
            groupId: 'number',
            type: 'string',
            line: 'string',
            status: 'string',
        };
    }
}
exports.DescribeDomainRecordsRequest = DescribeDomainRecordsRequest;
class DescribeDomainRecordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            domainRecords: 'DomainRecords',
            pageNumber: 'PageNumber',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            domainRecords: DescribeDomainRecordsResponseBodyDomainRecords,
            pageNumber: 'number',
        };
    }
}
exports.DescribeDomainRecordsResponseBody = DescribeDomainRecordsResponseBody;
class DescribeDomainRecordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainRecordsResponseBody,
        };
    }
}
exports.DescribeDomainRecordsResponse = DescribeDomainRecordsResponse;
class DescribeDomainsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            keyWord: 'KeyWord',
            groupId: 'GroupId',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            searchMode: 'SearchMode',
            resourceGroupId: 'ResourceGroupId',
            orderBy: 'OrderBy',
            direction: 'Direction',
            starmark: 'Starmark',
            startDate: 'StartDate',
            endDate: 'EndDate',
            tag: 'Tag',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            keyWord: 'string',
            groupId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            searchMode: 'string',
            resourceGroupId: 'string',
            orderBy: 'string',
            direction: 'string',
            starmark: 'boolean',
            startDate: 'string',
            endDate: 'string',
            tag: { 'type': 'array', 'itemType': DescribeDomainsRequestTag },
        };
    }
}
exports.DescribeDomainsRequest = DescribeDomainsRequest;
class DescribeDomainsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domains: 'Domains',
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
        };
    }
    static types() {
        return {
            domains: DescribeDomainsResponseBodyDomains,
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
        };
    }
}
exports.DescribeDomainsResponseBody = DescribeDomainsResponseBody;
class DescribeDomainsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainsResponseBody,
        };
    }
}
exports.DescribeDomainsResponse = DescribeDomainsResponse;
class DescribeDomainStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            startDate: 'StartDate',
            endDate: 'EndDate',
            domainType: 'DomainType',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            startDate: 'string',
            endDate: 'string',
            domainType: 'string',
        };
    }
}
exports.DescribeDomainStatisticsRequest = DescribeDomainStatisticsRequest;
class DescribeDomainStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            requestId: 'string',
            statistics: DescribeDomainStatisticsResponseBodyStatistics,
        };
    }
}
exports.DescribeDomainStatisticsResponseBody = DescribeDomainStatisticsResponseBody;
class DescribeDomainStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainStatisticsResponseBody,
        };
    }
}
exports.DescribeDomainStatisticsResponse = DescribeDomainStatisticsResponse;
class DescribeDomainStatisticsSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            startDate: 'StartDate',
            endDate: 'EndDate',
            orderBy: 'OrderBy',
            direction: 'Direction',
            searchMode: 'SearchMode',
            keyword: 'Keyword',
            threshold: 'Threshold',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startDate: 'string',
            endDate: 'string',
            orderBy: 'string',
            direction: 'string',
            searchMode: 'string',
            keyword: 'string',
            threshold: 'number',
        };
    }
}
exports.DescribeDomainStatisticsSummaryRequest = DescribeDomainStatisticsSummaryRequest;
class DescribeDomainStatisticsSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            totalItems: 'number',
            statistics: DescribeDomainStatisticsSummaryResponseBodyStatistics,
        };
    }
}
exports.DescribeDomainStatisticsSummaryResponseBody = DescribeDomainStatisticsSummaryResponseBody;
class DescribeDomainStatisticsSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeDomainStatisticsSummaryResponseBody,
        };
    }
}
exports.DescribeDomainStatisticsSummaryResponse = DescribeDomainStatisticsSummaryResponse;
class DescribeGtmAccessStrategiesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.DescribeGtmAccessStrategiesRequest = DescribeGtmAccessStrategiesRequest;
class DescribeGtmAccessStrategiesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            strategies: 'Strategies',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            strategies: DescribeGtmAccessStrategiesResponseBodyStrategies,
            totalPages: 'number',
            totalItems: 'number',
        };
    }
}
exports.DescribeGtmAccessStrategiesResponseBody = DescribeGtmAccessStrategiesResponseBody;
class DescribeGtmAccessStrategiesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmAccessStrategiesResponseBody,
        };
    }
}
exports.DescribeGtmAccessStrategiesResponse = DescribeGtmAccessStrategiesResponse;
class DescribeGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
        };
    }
}
exports.DescribeGtmAccessStrategyRequest = DescribeGtmAccessStrategyRequest;
class DescribeGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            instanceId: 'InstanceId',
            strategyId: 'StrategyId',
            defaultAddrPoolStatus: 'DefaultAddrPoolStatus',
            failoverAddrPoolId: 'FailoverAddrPoolId',
            accessStatus: 'AccessStatus',
            defaultAddrPoolMonitorStatus: 'DefaultAddrPoolMonitorStatus',
            defaultAddrPoolName: 'DefaultAddrPoolName',
            defultAddrPoolId: 'DefultAddrPoolId',
            strategyName: 'StrategyName',
            failoverAddrPoolStatus: 'FailoverAddrPoolStatus',
            accessMode: 'AccessMode',
            strategyMode: 'StrategyMode',
            failoverAddrPoolMonitorStatus: 'FailoverAddrPoolMonitorStatus',
            failoverAddrPoolName: 'FailoverAddrPoolName',
            lines: 'Lines',
        };
    }
    static types() {
        return {
            requestId: 'string',
            instanceId: 'string',
            strategyId: 'string',
            defaultAddrPoolStatus: 'string',
            failoverAddrPoolId: 'string',
            accessStatus: 'string',
            defaultAddrPoolMonitorStatus: 'string',
            defaultAddrPoolName: 'string',
            defultAddrPoolId: 'string',
            strategyName: 'string',
            failoverAddrPoolStatus: 'string',
            accessMode: 'string',
            strategyMode: 'string',
            failoverAddrPoolMonitorStatus: 'string',
            failoverAddrPoolName: 'string',
            lines: DescribeGtmAccessStrategyResponseBodyLines,
        };
    }
}
exports.DescribeGtmAccessStrategyResponseBody = DescribeGtmAccessStrategyResponseBody;
class DescribeGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmAccessStrategyResponseBody,
        };
    }
}
exports.DescribeGtmAccessStrategyResponse = DescribeGtmAccessStrategyResponse;
class DescribeGtmAccessStrategyAvailableConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeGtmAccessStrategyAvailableConfigRequest = DescribeGtmAccessStrategyAvailableConfigRequest;
class DescribeGtmAccessStrategyAvailableConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            addrPools: 'AddrPools',
            lines: 'Lines',
        };
    }
    static types() {
        return {
            requestId: 'string',
            addrPools: DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPools,
            lines: DescribeGtmAccessStrategyAvailableConfigResponseBodyLines,
        };
    }
}
exports.DescribeGtmAccessStrategyAvailableConfigResponseBody = DescribeGtmAccessStrategyAvailableConfigResponseBody;
class DescribeGtmAccessStrategyAvailableConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmAccessStrategyAvailableConfigResponseBody,
        };
    }
}
exports.DescribeGtmAccessStrategyAvailableConfigResponse = DescribeGtmAccessStrategyAvailableConfigResponse;
class DescribeGtmAvailableAlertGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
        };
    }
}
exports.DescribeGtmAvailableAlertGroupRequest = DescribeGtmAvailableAlertGroupRequest;
class DescribeGtmAvailableAlertGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            availableAlertGroup: 'AvailableAlertGroup',
        };
    }
    static types() {
        return {
            requestId: 'string',
            availableAlertGroup: 'string',
        };
    }
}
exports.DescribeGtmAvailableAlertGroupResponseBody = DescribeGtmAvailableAlertGroupResponseBody;
class DescribeGtmAvailableAlertGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmAvailableAlertGroupResponseBody,
        };
    }
}
exports.DescribeGtmAvailableAlertGroupResponse = DescribeGtmAvailableAlertGroupResponse;
class DescribeGtmInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            needDetailAttributes: 'NeedDetailAttributes',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            needDetailAttributes: 'boolean',
        };
    }
}
exports.DescribeGtmInstanceRequest = DescribeGtmInstanceRequest;
class DescribeGtmInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expireTimestamp: 'ExpireTimestamp',
            userDomainName: 'UserDomainName',
            requestId: 'RequestId',
            lbaStrategy: 'LbaStrategy',
            instanceId: 'InstanceId',
            createTime: 'CreateTime',
            cnameMode: 'CnameMode',
            ttl: 'Ttl',
            cname: 'Cname',
            instanceName: 'InstanceName',
            versionCode: 'VersionCode',
            alertGroup: 'AlertGroup',
            addressPoolNum: 'AddressPoolNum',
            accessStrategyNum: 'AccessStrategyNum',
            expireTime: 'ExpireTime',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            expireTimestamp: 'number',
            userDomainName: 'string',
            requestId: 'string',
            lbaStrategy: 'string',
            instanceId: 'string',
            createTime: 'string',
            cnameMode: 'string',
            ttl: 'number',
            cname: 'string',
            instanceName: 'string',
            versionCode: 'string',
            alertGroup: 'string',
            addressPoolNum: 'number',
            accessStrategyNum: 'number',
            expireTime: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmInstanceResponseBody = DescribeGtmInstanceResponseBody;
class DescribeGtmInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmInstanceResponseBody,
        };
    }
}
exports.DescribeGtmInstanceResponse = DescribeGtmInstanceResponse;
class DescribeGtmInstanceAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
        };
    }
}
exports.DescribeGtmInstanceAddressPoolRequest = DescribeGtmInstanceAddressPoolRequest;
class DescribeGtmInstanceAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            addrs: 'Addrs',
            requestId: 'RequestId',
            createTime: 'CreateTime',
            addrCount: 'AddrCount',
            name: 'Name',
            type: 'Type',
            updateTime: 'UpdateTime',
            addrPoolId: 'AddrPoolId',
            updateTimestamp: 'UpdateTimestamp',
            monitorConfigId: 'MonitorConfigId',
            minAvailableAddrNum: 'MinAvailableAddrNum',
            monitorStatus: 'MonitorStatus',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            status: 'string',
            addrs: DescribeGtmInstanceAddressPoolResponseBodyAddrs,
            requestId: 'string',
            createTime: 'string',
            addrCount: 'number',
            name: 'string',
            type: 'string',
            updateTime: 'string',
            addrPoolId: 'string',
            updateTimestamp: 'number',
            monitorConfigId: 'string',
            minAvailableAddrNum: 'number',
            monitorStatus: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmInstanceAddressPoolResponseBody = DescribeGtmInstanceAddressPoolResponseBody;
class DescribeGtmInstanceAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmInstanceAddressPoolResponseBody,
        };
    }
}
exports.DescribeGtmInstanceAddressPoolResponse = DescribeGtmInstanceAddressPoolResponse;
class DescribeGtmInstanceAddressPoolsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.DescribeGtmInstanceAddressPoolsRequest = DescribeGtmInstanceAddressPoolsRequest;
class DescribeGtmInstanceAddressPoolsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
            addrPools: 'AddrPools',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            totalItems: 'number',
            addrPools: DescribeGtmInstanceAddressPoolsResponseBodyAddrPools,
        };
    }
}
exports.DescribeGtmInstanceAddressPoolsResponseBody = DescribeGtmInstanceAddressPoolsResponseBody;
class DescribeGtmInstanceAddressPoolsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmInstanceAddressPoolsResponseBody,
        };
    }
}
exports.DescribeGtmInstanceAddressPoolsResponse = DescribeGtmInstanceAddressPoolsResponse;
class DescribeGtmInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            keyword: 'Keyword',
            resourceGroupId: 'ResourceGroupId',
            needDetailAttributes: 'NeedDetailAttributes',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            keyword: 'string',
            resourceGroupId: 'string',
            needDetailAttributes: 'boolean',
        };
    }
}
exports.DescribeGtmInstancesRequest = DescribeGtmInstancesRequest;
class DescribeGtmInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            gtmInstances: 'GtmInstances',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            gtmInstances: DescribeGtmInstancesResponseBodyGtmInstances,
            totalPages: 'number',
            totalItems: 'number',
        };
    }
}
exports.DescribeGtmInstancesResponseBody = DescribeGtmInstancesResponseBody;
class DescribeGtmInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmInstancesResponseBody,
        };
    }
}
exports.DescribeGtmInstancesResponse = DescribeGtmInstancesResponse;
class DescribeGtmInstanceStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeGtmInstanceStatusRequest = DescribeGtmInstanceStatusRequest;
class DescribeGtmInstanceStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            strategyNotAvailableNum: 'StrategyNotAvailableNum',
            requestId: 'RequestId',
            switchToFailoverStrategyNum: 'SwitchToFailoverStrategyNum',
            statusReason: 'StatusReason',
            addrNotAvailableNum: 'AddrNotAvailableNum',
            addrPoolNotAvailableNum: 'AddrPoolNotAvailableNum',
        };
    }
    static types() {
        return {
            status: 'string',
            strategyNotAvailableNum: 'number',
            requestId: 'string',
            switchToFailoverStrategyNum: 'number',
            statusReason: 'string',
            addrNotAvailableNum: 'number',
            addrPoolNotAvailableNum: 'number',
        };
    }
}
exports.DescribeGtmInstanceStatusResponseBody = DescribeGtmInstanceStatusResponseBody;
class DescribeGtmInstanceStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmInstanceStatusResponseBody,
        };
    }
}
exports.DescribeGtmInstanceStatusResponse = DescribeGtmInstanceStatusResponse;
class DescribeGtmInstanceSystemCnameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeGtmInstanceSystemCnameRequest = DescribeGtmInstanceSystemCnameRequest;
class DescribeGtmInstanceSystemCnameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            systemCname: 'SystemCname',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            systemCname: 'string',
            requestId: 'string',
        };
    }
}
exports.DescribeGtmInstanceSystemCnameResponseBody = DescribeGtmInstanceSystemCnameResponseBody;
class DescribeGtmInstanceSystemCnameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmInstanceSystemCnameResponseBody,
        };
    }
}
exports.DescribeGtmInstanceSystemCnameResponse = DescribeGtmInstanceSystemCnameResponse;
class DescribeGtmLogsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            instanceId: 'InstanceId',
            keyword: 'Keyword',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            startTimestamp: 'StartTimestamp',
            endTimestamp: 'EndTimestamp',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            instanceId: 'string',
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTimestamp: 'number',
            endTimestamp: 'number',
        };
    }
}
exports.DescribeGtmLogsRequest = DescribeGtmLogsRequest;
class DescribeGtmLogsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            logs: 'Logs',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            logs: DescribeGtmLogsResponseBodyLogs,
            totalItems: 'number',
        };
    }
}
exports.DescribeGtmLogsResponseBody = DescribeGtmLogsResponseBody;
class DescribeGtmLogsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmLogsResponseBody,
        };
    }
}
exports.DescribeGtmLogsResponse = DescribeGtmLogsResponse;
class DescribeGtmMonitorAvailableConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
        };
    }
}
exports.DescribeGtmMonitorAvailableConfigRequest = DescribeGtmMonitorAvailableConfigRequest;
class DescribeGtmMonitorAvailableConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            ispCityNodes: 'IspCityNodes',
        };
    }
    static types() {
        return {
            requestId: 'string',
            ispCityNodes: DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodes,
        };
    }
}
exports.DescribeGtmMonitorAvailableConfigResponseBody = DescribeGtmMonitorAvailableConfigResponseBody;
class DescribeGtmMonitorAvailableConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmMonitorAvailableConfigResponseBody,
        };
    }
}
exports.DescribeGtmMonitorAvailableConfigResponse = DescribeGtmMonitorAvailableConfigResponse;
class DescribeGtmMonitorConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            monitorConfigId: 'MonitorConfigId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            monitorConfigId: 'string',
        };
    }
}
exports.DescribeGtmMonitorConfigRequest = DescribeGtmMonitorConfigRequest;
class DescribeGtmMonitorConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            timeout: 'Timeout',
            protocolType: 'ProtocolType',
            ispCityNodes: 'IspCityNodes',
            createTime: 'CreateTime',
            updateTime: 'UpdateTime',
            evaluationCount: 'EvaluationCount',
            updateTimestamp: 'UpdateTimestamp',
            monitorExtendInfo: 'MonitorExtendInfo',
            monitorConfigId: 'MonitorConfigId',
            createTimestamp: 'CreateTimestamp',
            interval: 'Interval',
        };
    }
    static types() {
        return {
            requestId: 'string',
            timeout: 'number',
            protocolType: 'string',
            ispCityNodes: DescribeGtmMonitorConfigResponseBodyIspCityNodes,
            createTime: 'string',
            updateTime: 'string',
            evaluationCount: 'number',
            updateTimestamp: 'number',
            monitorExtendInfo: 'string',
            monitorConfigId: 'string',
            createTimestamp: 'number',
            interval: 'number',
        };
    }
}
exports.DescribeGtmMonitorConfigResponseBody = DescribeGtmMonitorConfigResponseBody;
class DescribeGtmMonitorConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmMonitorConfigResponseBody,
        };
    }
}
exports.DescribeGtmMonitorConfigResponse = DescribeGtmMonitorConfigResponse;
class DescribeGtmRecoveryPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            recoveryPlanId: 'RecoveryPlanId',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            recoveryPlanId: 'number',
        };
    }
}
exports.DescribeGtmRecoveryPlanRequest = DescribeGtmRecoveryPlanRequest;
class DescribeGtmRecoveryPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            lastRollbackTime: 'LastRollbackTime',
            faultAddrPoolNum: 'FaultAddrPoolNum',
            faultAddrPools: 'FaultAddrPools',
            lastExecuteTime: 'LastExecuteTime',
            requestId: 'RequestId',
            createTime: 'CreateTime',
            lastExecuteTimestamp: 'LastExecuteTimestamp',
            remark: 'Remark',
            name: 'Name',
            recoveryPlanId: 'RecoveryPlanId',
            updateTime: 'UpdateTime',
            updateTimestamp: 'UpdateTimestamp',
            lastRollbackTimestamp: 'LastRollbackTimestamp',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            status: 'string',
            lastRollbackTime: 'string',
            faultAddrPoolNum: 'number',
            faultAddrPools: DescribeGtmRecoveryPlanResponseBodyFaultAddrPools,
            lastExecuteTime: 'string',
            requestId: 'string',
            createTime: 'string',
            lastExecuteTimestamp: 'number',
            remark: 'string',
            name: 'string',
            recoveryPlanId: 'number',
            updateTime: 'string',
            updateTimestamp: 'number',
            lastRollbackTimestamp: 'number',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmRecoveryPlanResponseBody = DescribeGtmRecoveryPlanResponseBody;
class DescribeGtmRecoveryPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmRecoveryPlanResponseBody,
        };
    }
}
exports.DescribeGtmRecoveryPlanResponse = DescribeGtmRecoveryPlanResponse;
class DescribeGtmRecoveryPlanAvailableConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
        };
    }
}
exports.DescribeGtmRecoveryPlanAvailableConfigRequest = DescribeGtmRecoveryPlanAvailableConfigRequest;
class DescribeGtmRecoveryPlanAvailableConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instances: 'Instances',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            instances: DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstances,
            requestId: 'string',
        };
    }
}
exports.DescribeGtmRecoveryPlanAvailableConfigResponseBody = DescribeGtmRecoveryPlanAvailableConfigResponseBody;
class DescribeGtmRecoveryPlanAvailableConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmRecoveryPlanAvailableConfigResponseBody,
        };
    }
}
exports.DescribeGtmRecoveryPlanAvailableConfigResponse = DescribeGtmRecoveryPlanAvailableConfigResponse;
class DescribeGtmRecoveryPlansRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            keyword: 'Keyword',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.DescribeGtmRecoveryPlansRequest = DescribeGtmRecoveryPlansRequest;
class DescribeGtmRecoveryPlansResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recoveryPlans: 'RecoveryPlans',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            recoveryPlans: DescribeGtmRecoveryPlansResponseBodyRecoveryPlans,
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            totalItems: 'number',
        };
    }
}
exports.DescribeGtmRecoveryPlansResponseBody = DescribeGtmRecoveryPlansResponseBody;
class DescribeGtmRecoveryPlansResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeGtmRecoveryPlansResponseBody,
        };
    }
}
exports.DescribeGtmRecoveryPlansResponse = DescribeGtmRecoveryPlansResponse;
class DescribeInstanceDomainsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            instanceId: 'string',
        };
    }
}
exports.DescribeInstanceDomainsRequest = DescribeInstanceDomainsRequest;
class DescribeInstanceDomainsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            instanceDomains: 'InstanceDomains',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            instanceDomains: { 'type': 'array', 'itemType': DescribeInstanceDomainsResponseBodyInstanceDomains },
            totalPages: 'number',
            totalItems: 'number',
        };
    }
}
exports.DescribeInstanceDomainsResponseBody = DescribeInstanceDomainsResponseBody;
class DescribeInstanceDomainsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeInstanceDomainsResponseBody,
        };
    }
}
exports.DescribeInstanceDomainsResponse = DescribeInstanceDomainsResponse;
class DescribeRecordLogsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            keyWord: 'KeyWord',
            startDate: 'StartDate',
            endDate: 'endDate',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            keyWord: 'string',
            startDate: 'string',
            endDate: 'string',
        };
    }
}
exports.DescribeRecordLogsRequest = DescribeRecordLogsRequest;
class DescribeRecordLogsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            recordLogs: 'RecordLogs',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            recordLogs: DescribeRecordLogsResponseBodyRecordLogs,
        };
    }
}
exports.DescribeRecordLogsResponseBody = DescribeRecordLogsResponseBody;
class DescribeRecordLogsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeRecordLogsResponseBody,
        };
    }
}
exports.DescribeRecordLogsResponse = DescribeRecordLogsResponse;
class DescribeRecordStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            startDate: 'StartDate',
            endDate: 'EndDate',
            domainName: 'DomainName',
            rr: 'Rr',
            domainType: 'DomainType',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            startDate: 'string',
            endDate: 'string',
            domainName: 'string',
            rr: 'string',
            domainType: 'string',
        };
    }
}
exports.DescribeRecordStatisticsRequest = DescribeRecordStatisticsRequest;
class DescribeRecordStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            requestId: 'string',
            statistics: DescribeRecordStatisticsResponseBodyStatistics,
        };
    }
}
exports.DescribeRecordStatisticsResponseBody = DescribeRecordStatisticsResponseBody;
class DescribeRecordStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeRecordStatisticsResponseBody,
        };
    }
}
exports.DescribeRecordStatisticsResponse = DescribeRecordStatisticsResponse;
class DescribeRecordStatisticsSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            startDate: 'StartDate',
            endDate: 'EndDate',
            orderBy: 'OrderBy',
            direction: 'Direction',
            domainName: 'DomainName',
            searchMode: 'SearchMode',
            keyword: 'Keyword',
            threshold: 'Threshold',
            domainType: 'DomainType',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startDate: 'string',
            endDate: 'string',
            orderBy: 'string',
            direction: 'string',
            domainName: 'string',
            searchMode: 'string',
            keyword: 'string',
            threshold: 'number',
            domainType: 'string',
        };
    }
}
exports.DescribeRecordStatisticsSummaryRequest = DescribeRecordStatisticsSummaryRequest;
class DescribeRecordStatisticsSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
            statistics: 'Statistics',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            totalPages: 'number',
            totalItems: 'number',
            statistics: DescribeRecordStatisticsSummaryResponseBodyStatistics,
        };
    }
}
exports.DescribeRecordStatisticsSummaryResponseBody = DescribeRecordStatisticsSummaryResponseBody;
class DescribeRecordStatisticsSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeRecordStatisticsSummaryResponseBody,
        };
    }
}
exports.DescribeRecordStatisticsSummaryResponse = DescribeRecordStatisticsSummaryResponse;
class DescribeSubDomainRecordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            subDomain: 'SubDomain',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            type: 'Type',
            line: 'Line',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            subDomain: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            type: 'string',
            line: 'string',
            domainName: 'string',
        };
    }
}
exports.DescribeSubDomainRecordsRequest = DescribeSubDomainRecordsRequest;
class DescribeSubDomainRecordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            domainRecords: 'DomainRecords',
            pageNumber: 'PageNumber',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            domainRecords: DescribeSubDomainRecordsResponseBodyDomainRecords,
            pageNumber: 'number',
        };
    }
}
exports.DescribeSubDomainRecordsResponseBody = DescribeSubDomainRecordsResponseBody;
class DescribeSubDomainRecordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeSubDomainRecordsResponseBody,
        };
    }
}
exports.DescribeSubDomainRecordsResponse = DescribeSubDomainRecordsResponse;
class DescribeSupportLinesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
        };
    }
}
exports.DescribeSupportLinesRequest = DescribeSupportLinesRequest;
class DescribeSupportLinesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recordLines: 'RecordLines',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            recordLines: DescribeSupportLinesResponseBodyRecordLines,
            requestId: 'string',
        };
    }
}
exports.DescribeSupportLinesResponseBody = DescribeSupportLinesResponseBody;
class DescribeSupportLinesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeSupportLinesResponseBody,
        };
    }
}
exports.DescribeSupportLinesResponse = DescribeSupportLinesResponse;
class DescribeTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            resourceType: 'ResourceType',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            resourceType: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.DescribeTagsRequest = DescribeTagsRequest;
class DescribeTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            tags: 'Tags',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            tags: { 'type': 'array', 'itemType': DescribeTagsResponseBodyTags },
        };
    }
}
exports.DescribeTagsResponseBody = DescribeTagsResponseBody;
class DescribeTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeTagsResponseBody,
        };
    }
}
exports.DescribeTagsResponse = DescribeTagsResponse;
class DescribeTransferDomainsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
            transferType: 'TransferType',
            domainName: 'DomainName',
            fromUserId: 'FromUserId',
            targetUserId: 'TargetUserId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            transferType: 'string',
            domainName: 'string',
            fromUserId: 'number',
            targetUserId: 'number',
        };
    }
}
exports.DescribeTransferDomainsRequest = DescribeTransferDomainsRequest;
class DescribeTransferDomainsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'TotalCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            domainTransfers: 'DomainTransfers',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            domainTransfers: DescribeTransferDomainsResponseBodyDomainTransfers,
        };
    }
}
exports.DescribeTransferDomainsResponseBody = DescribeTransferDomainsResponseBody;
class DescribeTransferDomainsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DescribeTransferDomainsResponseBody,
        };
    }
}
exports.DescribeTransferDomainsResponse = DescribeTransferDomainsResponse;
class ExecuteGtmRecoveryPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recoveryPlanId: 'RecoveryPlanId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recoveryPlanId: 'number',
        };
    }
}
exports.ExecuteGtmRecoveryPlanRequest = ExecuteGtmRecoveryPlanRequest;
class ExecuteGtmRecoveryPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.ExecuteGtmRecoveryPlanResponseBody = ExecuteGtmRecoveryPlanResponseBody;
class ExecuteGtmRecoveryPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ExecuteGtmRecoveryPlanResponseBody,
        };
    }
}
exports.ExecuteGtmRecoveryPlanResponse = ExecuteGtmRecoveryPlanResponse;
class GetMainDomainNameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            inputString: 'InputString',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            inputString: 'string',
        };
    }
}
exports.GetMainDomainNameRequest = GetMainDomainNameRequest;
class GetMainDomainNameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            RR: 'RR',
            requestId: 'RequestId',
            domainName: 'DomainName',
            domainLevel: 'DomainLevel',
        };
    }
    static types() {
        return {
            RR: 'string',
            requestId: 'string',
            domainName: 'string',
            domainLevel: 'number',
        };
    }
}
exports.GetMainDomainNameResponseBody = GetMainDomainNameResponseBody;
class GetMainDomainNameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetMainDomainNameResponseBody,
        };
    }
}
exports.GetMainDomainNameResponse = GetMainDomainNameResponse;
class GetTxtRecordForVerifyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            domainName: 'DomainName',
            type: 'Type',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            domainName: 'string',
            type: 'string',
            userClientIp: 'string',
        };
    }
}
exports.GetTxtRecordForVerifyRequest = GetTxtRecordForVerifyRequest;
class GetTxtRecordForVerifyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            RR: 'RR',
            requestId: 'RequestId',
            domainName: 'DomainName',
            value: 'Value',
        };
    }
    static types() {
        return {
            RR: 'string',
            requestId: 'string',
            domainName: 'string',
            value: 'string',
        };
    }
}
exports.GetTxtRecordForVerifyResponseBody = GetTxtRecordForVerifyResponseBody;
class GetTxtRecordForVerifyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetTxtRecordForVerifyResponseBody,
        };
    }
}
exports.GetTxtRecordForVerifyResponse = GetTxtRecordForVerifyResponse;
class ListTagResourcesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            resourceType: 'ResourceType',
            nextToken: 'NextToken',
            size: 'Size',
            tag: 'Tag',
            resourceId: 'ResourceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            resourceType: 'string',
            nextToken: 'string',
            size: 'number',
            tag: { 'type': 'array', 'itemType': ListTagResourcesRequestTag },
            resourceId: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListTagResourcesRequest = ListTagResourcesRequest;
class ListTagResourcesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'NextToken',
            requestId: 'RequestId',
            tagResources: 'TagResources',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            requestId: 'string',
            tagResources: { 'type': 'array', 'itemType': ListTagResourcesResponseBodyTagResources },
        };
    }
}
exports.ListTagResourcesResponseBody = ListTagResourcesResponseBody;
class ListTagResourcesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListTagResourcesResponseBody,
        };
    }
}
exports.ListTagResourcesResponse = ListTagResourcesResponse;
class ModifyHichinaDomainDNSRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
        };
    }
}
exports.ModifyHichinaDomainDNSRequest = ModifyHichinaDomainDNSRequest;
class ModifyHichinaDomainDNSResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            newDnsServers: 'NewDnsServers',
            originalDnsServers: 'OriginalDnsServers',
        };
    }
    static types() {
        return {
            requestId: 'string',
            newDnsServers: ModifyHichinaDomainDNSResponseBodyNewDnsServers,
            originalDnsServers: ModifyHichinaDomainDNSResponseBodyOriginalDnsServers,
        };
    }
}
exports.ModifyHichinaDomainDNSResponseBody = ModifyHichinaDomainDNSResponseBody;
class ModifyHichinaDomainDNSResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ModifyHichinaDomainDNSResponseBody,
        };
    }
}
exports.ModifyHichinaDomainDNSResponse = ModifyHichinaDomainDNSResponse;
class MoveDomainResourceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            resourceId: 'ResourceId',
            newResourceGroupId: 'NewResourceGroupId',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            resourceId: 'string',
            newResourceGroupId: 'string',
            userClientIp: 'string',
        };
    }
}
exports.MoveDomainResourceGroupRequest = MoveDomainResourceGroupRequest;
class MoveDomainResourceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.MoveDomainResourceGroupResponseBody = MoveDomainResourceGroupResponseBody;
class MoveDomainResourceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: MoveDomainResourceGroupResponseBody,
        };
    }
}
exports.MoveDomainResourceGroupResponse = MoveDomainResourceGroupResponse;
class MoveGtmResourceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            resourceId: 'ResourceId',
            newResourceGroupId: 'NewResourceGroupId',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            resourceId: 'string',
            newResourceGroupId: 'string',
            userClientIp: 'string',
        };
    }
}
exports.MoveGtmResourceGroupRequest = MoveGtmResourceGroupRequest;
class MoveGtmResourceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.MoveGtmResourceGroupResponseBody = MoveGtmResourceGroupResponseBody;
class MoveGtmResourceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: MoveGtmResourceGroupResponseBody,
        };
    }
}
exports.MoveGtmResourceGroupResponse = MoveGtmResourceGroupResponse;
class OperateBatchDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            type: 'Type',
            domainRecordInfo: 'DomainRecordInfo',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            type: 'string',
            domainRecordInfo: { 'type': 'array', 'itemType': OperateBatchDomainRequestDomainRecordInfo },
        };
    }
}
exports.OperateBatchDomainRequest = OperateBatchDomainRequest;
class OperateBatchDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            taskId: 'TaskId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            taskId: 'number',
            requestId: 'string',
        };
    }
}
exports.OperateBatchDomainResponseBody = OperateBatchDomainResponseBody;
class OperateBatchDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: OperateBatchDomainResponseBody,
        };
    }
}
exports.OperateBatchDomainResponse = OperateBatchDomainResponse;
class PreviewGtmRecoveryPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recoveryPlanId: 'RecoveryPlanId',
            pageNumber: 'PageNumber',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recoveryPlanId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.PreviewGtmRecoveryPlanRequest = PreviewGtmRecoveryPlanRequest;
class PreviewGtmRecoveryPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageSize: 'PageSize',
            requestId: 'RequestId',
            pageNumber: 'PageNumber',
            previews: 'Previews',
            totalPages: 'TotalPages',
            totalItems: 'TotalItems',
        };
    }
    static types() {
        return {
            pageSize: 'number',
            requestId: 'string',
            pageNumber: 'number',
            previews: PreviewGtmRecoveryPlanResponseBodyPreviews,
            totalPages: 'number',
            totalItems: 'number',
        };
    }
}
exports.PreviewGtmRecoveryPlanResponseBody = PreviewGtmRecoveryPlanResponseBody;
class PreviewGtmRecoveryPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PreviewGtmRecoveryPlanResponseBody,
        };
    }
}
exports.PreviewGtmRecoveryPlanResponse = PreviewGtmRecoveryPlanResponse;
class RetrieveDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
        };
    }
}
exports.RetrieveDomainRequest = RetrieveDomainRequest;
class RetrieveDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.RetrieveDomainResponseBody = RetrieveDomainResponseBody;
class RetrieveDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RetrieveDomainResponseBody,
        };
    }
}
exports.RetrieveDomainResponse = RetrieveDomainResponse;
class RollbackGtmRecoveryPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recoveryPlanId: 'RecoveryPlanId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recoveryPlanId: 'number',
        };
    }
}
exports.RollbackGtmRecoveryPlanRequest = RollbackGtmRecoveryPlanRequest;
class RollbackGtmRecoveryPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.RollbackGtmRecoveryPlanResponseBody = RollbackGtmRecoveryPlanResponseBody;
class RollbackGtmRecoveryPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RollbackGtmRecoveryPlanResponseBody,
        };
    }
}
exports.RollbackGtmRecoveryPlanResponse = RollbackGtmRecoveryPlanResponse;
class SetDnsGtmAccessModeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
            accessMode: 'AccessMode',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
            accessMode: 'string',
        };
    }
}
exports.SetDnsGtmAccessModeRequest = SetDnsGtmAccessModeRequest;
class SetDnsGtmAccessModeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SetDnsGtmAccessModeResponseBody = SetDnsGtmAccessModeResponseBody;
class SetDnsGtmAccessModeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDnsGtmAccessModeResponseBody,
        };
    }
}
exports.SetDnsGtmAccessModeResponse = SetDnsGtmAccessModeResponse;
class SetDnsGtmMonitorStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            monitorConfigId: 'MonitorConfigId',
            status: 'Status',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            monitorConfigId: 'string',
            status: 'string',
        };
    }
}
exports.SetDnsGtmMonitorStatusRequest = SetDnsGtmMonitorStatusRequest;
class SetDnsGtmMonitorStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SetDnsGtmMonitorStatusResponseBody = SetDnsGtmMonitorStatusResponseBody;
class SetDnsGtmMonitorStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDnsGtmMonitorStatusResponseBody,
        };
    }
}
exports.SetDnsGtmMonitorStatusResponse = SetDnsGtmMonitorStatusResponse;
class SetDNSSLBStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            subDomain: 'SubDomain',
            open: 'Open',
            domainName: 'DomainName',
            type: 'Type',
            line: 'Line',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            subDomain: 'string',
            open: 'boolean',
            domainName: 'string',
            type: 'string',
            line: 'string',
        };
    }
}
exports.SetDNSSLBStatusRequest = SetDNSSLBStatusRequest;
class SetDNSSLBStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            recordCount: 'RecordCount',
            open: 'Open',
        };
    }
    static types() {
        return {
            requestId: 'string',
            recordCount: 'number',
            open: 'boolean',
        };
    }
}
exports.SetDNSSLBStatusResponseBody = SetDNSSLBStatusResponseBody;
class SetDNSSLBStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDNSSLBStatusResponseBody,
        };
    }
}
exports.SetDNSSLBStatusResponse = SetDNSSLBStatusResponse;
class SetDomainDnssecStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            domainName: 'DomainName',
            status: 'Status',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            domainName: 'string',
            status: 'string',
        };
    }
}
exports.SetDomainDnssecStatusRequest = SetDomainDnssecStatusRequest;
class SetDomainDnssecStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SetDomainDnssecStatusResponseBody = SetDomainDnssecStatusResponseBody;
class SetDomainDnssecStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDomainDnssecStatusResponseBody,
        };
    }
}
exports.SetDomainDnssecStatusResponse = SetDomainDnssecStatusResponse;
class SetDomainRecordStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recordId: 'RecordId',
            status: 'Status',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recordId: 'string',
            status: 'string',
        };
    }
}
exports.SetDomainRecordStatusRequest = SetDomainRecordStatusRequest;
class SetDomainRecordStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            requestId: 'RequestId',
            recordId: 'RecordId',
        };
    }
    static types() {
        return {
            status: 'string',
            requestId: 'string',
            recordId: 'string',
        };
    }
}
exports.SetDomainRecordStatusResponseBody = SetDomainRecordStatusResponseBody;
class SetDomainRecordStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDomainRecordStatusResponseBody,
        };
    }
}
exports.SetDomainRecordStatusResponse = SetDomainRecordStatusResponse;
class SetGtmAccessModeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
            accessMode: 'AccessMode',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
            accessMode: 'string',
        };
    }
}
exports.SetGtmAccessModeRequest = SetGtmAccessModeRequest;
class SetGtmAccessModeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SetGtmAccessModeResponseBody = SetGtmAccessModeResponseBody;
class SetGtmAccessModeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetGtmAccessModeResponseBody,
        };
    }
}
exports.SetGtmAccessModeResponse = SetGtmAccessModeResponse;
class SetGtmMonitorStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            monitorConfigId: 'MonitorConfigId',
            status: 'Status',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            monitorConfigId: 'string',
            status: 'string',
        };
    }
}
exports.SetGtmMonitorStatusRequest = SetGtmMonitorStatusRequest;
class SetGtmMonitorStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SetGtmMonitorStatusResponseBody = SetGtmMonitorStatusResponseBody;
class SetGtmMonitorStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetGtmMonitorStatusResponseBody,
        };
    }
}
exports.SetGtmMonitorStatusResponse = SetGtmMonitorStatusResponse;
class SwitchDnsGtmInstanceStrategyModeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            strategyMode: 'StrategyMode',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            strategyMode: 'string',
        };
    }
}
exports.SwitchDnsGtmInstanceStrategyModeRequest = SwitchDnsGtmInstanceStrategyModeRequest;
class SwitchDnsGtmInstanceStrategyModeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SwitchDnsGtmInstanceStrategyModeResponseBody = SwitchDnsGtmInstanceStrategyModeResponseBody;
class SwitchDnsGtmInstanceStrategyModeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SwitchDnsGtmInstanceStrategyModeResponseBody,
        };
    }
}
exports.SwitchDnsGtmInstanceStrategyModeResponse = SwitchDnsGtmInstanceStrategyModeResponse;
class TagResourcesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            resourceType: 'ResourceType',
            overWrite: 'OverWrite',
            tag: 'Tag',
            resourceId: 'ResourceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            resourceType: 'string',
            overWrite: 'boolean',
            tag: { 'type': 'array', 'itemType': TagResourcesRequestTag },
            resourceId: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.TagResourcesRequest = TagResourcesRequest;
class TagResourcesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.TagResourcesResponseBody = TagResourcesResponseBody;
class TagResourcesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: TagResourcesResponseBody,
        };
    }
}
exports.TagResourcesResponse = TagResourcesResponse;
class TransferDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            domainNames: 'DomainNames',
            remark: 'Remark',
            targetUserId: 'TargetUserId',
            userClientIp: 'UserClientIp',
        };
    }
    static types() {
        return {
            lang: 'string',
            domainNames: 'string',
            remark: 'string',
            targetUserId: 'number',
            userClientIp: 'string',
        };
    }
}
exports.TransferDomainRequest = TransferDomainRequest;
class TransferDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            taskId: 'TaskId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            taskId: 'number',
            requestId: 'string',
        };
    }
}
exports.TransferDomainResponseBody = TransferDomainResponseBody;
class TransferDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: TransferDomainResponseBody,
        };
    }
}
exports.TransferDomainResponse = TransferDomainResponse;
class UnbindInstanceDomainsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainNames: 'DomainNames',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainNames: 'string',
            instanceId: 'string',
        };
    }
}
exports.UnbindInstanceDomainsRequest = UnbindInstanceDomainsRequest;
class UnbindInstanceDomainsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            failedCount: 'FailedCount',
            successCount: 'SuccessCount',
        };
    }
    static types() {
        return {
            requestId: 'string',
            failedCount: 'number',
            successCount: 'number',
        };
    }
}
exports.UnbindInstanceDomainsResponseBody = UnbindInstanceDomainsResponseBody;
class UnbindInstanceDomainsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UnbindInstanceDomainsResponseBody,
        };
    }
}
exports.UnbindInstanceDomainsResponse = UnbindInstanceDomainsResponse;
class UntagResourcesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            resourceType: 'ResourceType',
            all: 'All',
            resourceId: 'ResourceId',
            tagKey: 'TagKey',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            resourceType: 'string',
            all: 'boolean',
            resourceId: { 'type': 'array', 'itemType': 'string' },
            tagKey: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UntagResourcesRequest = UntagResourcesRequest;
class UntagResourcesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UntagResourcesResponseBody = UntagResourcesResponseBody;
class UntagResourcesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UntagResourcesResponseBody,
        };
    }
}
exports.UntagResourcesResponse = UntagResourcesResponse;
class UpdateCustomLineRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            lineName: 'LineName',
            lineId: 'LineId',
            ipSegment: 'IpSegment',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            lineName: 'string',
            lineId: 'number',
            ipSegment: { 'type': 'array', 'itemType': UpdateCustomLineRequestIpSegment },
        };
    }
}
exports.UpdateCustomLineRequest = UpdateCustomLineRequest;
class UpdateCustomLineResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateCustomLineResponseBody = UpdateCustomLineResponseBody;
class UpdateCustomLineResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateCustomLineResponseBody,
        };
    }
}
exports.UpdateCustomLineResponse = UpdateCustomLineResponse;
class UpdateDnsCacheDomainRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            instanceId: 'InstanceId',
            cacheTtlMin: 'CacheTtlMin',
            cacheTtlMax: 'CacheTtlMax',
            sourceProtocol: 'SourceProtocol',
            sourceEdns: 'SourceEdns',
            sourceDnsServer: 'SourceDnsServer',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            instanceId: 'string',
            cacheTtlMin: 'number',
            cacheTtlMax: 'number',
            sourceProtocol: 'string',
            sourceEdns: 'string',
            sourceDnsServer: { 'type': 'array', 'itemType': UpdateDnsCacheDomainRequestSourceDnsServer },
        };
    }
}
exports.UpdateDnsCacheDomainRequest = UpdateDnsCacheDomainRequest;
class UpdateDnsCacheDomainResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateDnsCacheDomainResponseBody = UpdateDnsCacheDomainResponseBody;
class UpdateDnsCacheDomainResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDnsCacheDomainResponseBody,
        };
    }
}
exports.UpdateDnsCacheDomainResponse = UpdateDnsCacheDomainResponse;
class UpdateDnsCacheDomainRemarkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            remark: 'Remark',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            remark: 'string',
        };
    }
}
exports.UpdateDnsCacheDomainRemarkRequest = UpdateDnsCacheDomainRemarkRequest;
class UpdateDnsCacheDomainRemarkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateDnsCacheDomainRemarkResponseBody = UpdateDnsCacheDomainRemarkResponseBody;
class UpdateDnsCacheDomainRemarkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDnsCacheDomainRemarkResponseBody,
        };
    }
}
exports.UpdateDnsCacheDomainRemarkResponse = UpdateDnsCacheDomainRemarkResponse;
class UpdateDnsGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
            strategyName: 'StrategyName',
            lines: 'Lines',
            defaultAddrPoolType: 'DefaultAddrPoolType',
            defaultLbaStrategy: 'DefaultLbaStrategy',
            defaultMinAvailableAddrNum: 'DefaultMinAvailableAddrNum',
            defaultMaxReturnAddrNum: 'DefaultMaxReturnAddrNum',
            defaultLatencyOptimization: 'DefaultLatencyOptimization',
            failoverAddrPoolType: 'FailoverAddrPoolType',
            failoverLbaStrategy: 'FailoverLbaStrategy',
            failoverMinAvailableAddrNum: 'FailoverMinAvailableAddrNum',
            failoverMaxReturnAddrNum: 'FailoverMaxReturnAddrNum',
            failoverLatencyOptimization: 'FailoverLatencyOptimization',
            defaultAddrPool: 'DefaultAddrPool',
            failoverAddrPool: 'FailoverAddrPool',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
            strategyName: 'string',
            lines: 'string',
            defaultAddrPoolType: 'string',
            defaultLbaStrategy: 'string',
            defaultMinAvailableAddrNum: 'number',
            defaultMaxReturnAddrNum: 'number',
            defaultLatencyOptimization: 'string',
            failoverAddrPoolType: 'string',
            failoverLbaStrategy: 'string',
            failoverMinAvailableAddrNum: 'number',
            failoverMaxReturnAddrNum: 'number',
            failoverLatencyOptimization: 'string',
            defaultAddrPool: { 'type': 'array', 'itemType': UpdateDnsGtmAccessStrategyRequestDefaultAddrPool },
            failoverAddrPool: { 'type': 'array', 'itemType': UpdateDnsGtmAccessStrategyRequestFailoverAddrPool },
        };
    }
}
exports.UpdateDnsGtmAccessStrategyRequest = UpdateDnsGtmAccessStrategyRequest;
class UpdateDnsGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            strategyId: 'StrategyId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            strategyId: 'string',
        };
    }
}
exports.UpdateDnsGtmAccessStrategyResponseBody = UpdateDnsGtmAccessStrategyResponseBody;
class UpdateDnsGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDnsGtmAccessStrategyResponseBody,
        };
    }
}
exports.UpdateDnsGtmAccessStrategyResponse = UpdateDnsGtmAccessStrategyResponse;
class UpdateDnsGtmAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
            name: 'Name',
            lbaStrategy: 'LbaStrategy',
            addr: 'Addr',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
            name: 'string',
            lbaStrategy: 'string',
            addr: { 'type': 'array', 'itemType': UpdateDnsGtmAddressPoolRequestAddr },
        };
    }
}
exports.UpdateDnsGtmAddressPoolRequest = UpdateDnsGtmAddressPoolRequest;
class UpdateDnsGtmAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateDnsGtmAddressPoolResponseBody = UpdateDnsGtmAddressPoolResponseBody;
class UpdateDnsGtmAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDnsGtmAddressPoolResponseBody,
        };
    }
}
exports.UpdateDnsGtmAddressPoolResponse = UpdateDnsGtmAddressPoolResponse;
class UpdateDnsGtmInstanceGlobalConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            instanceName: 'InstanceName',
            ttl: 'Ttl',
            publicCnameMode: 'PublicCnameMode',
            publicUserDomainName: 'PublicUserDomainName',
            publicZoneName: 'PublicZoneName',
            alertGroup: 'AlertGroup',
            cnameType: 'CnameType',
            alertConfig: 'AlertConfig',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            instanceName: 'string',
            ttl: 'number',
            publicCnameMode: 'string',
            publicUserDomainName: 'string',
            publicZoneName: 'string',
            alertGroup: 'string',
            cnameType: 'string',
            alertConfig: { 'type': 'array', 'itemType': UpdateDnsGtmInstanceGlobalConfigRequestAlertConfig },
        };
    }
}
exports.UpdateDnsGtmInstanceGlobalConfigRequest = UpdateDnsGtmInstanceGlobalConfigRequest;
class UpdateDnsGtmInstanceGlobalConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateDnsGtmInstanceGlobalConfigResponseBody = UpdateDnsGtmInstanceGlobalConfigResponseBody;
class UpdateDnsGtmInstanceGlobalConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDnsGtmInstanceGlobalConfigResponseBody,
        };
    }
}
exports.UpdateDnsGtmInstanceGlobalConfigResponse = UpdateDnsGtmInstanceGlobalConfigResponse;
class UpdateDnsGtmMonitorRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            monitorConfigId: 'MonitorConfigId',
            protocolType: 'ProtocolType',
            interval: 'Interval',
            evaluationCount: 'EvaluationCount',
            timeout: 'Timeout',
            monitorExtendInfo: 'MonitorExtendInfo',
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            monitorConfigId: 'string',
            protocolType: 'string',
            interval: 'number',
            evaluationCount: 'number',
            timeout: 'number',
            monitorExtendInfo: 'string',
            ispCityNode: { 'type': 'array', 'itemType': UpdateDnsGtmMonitorRequestIspCityNode },
        };
    }
}
exports.UpdateDnsGtmMonitorRequest = UpdateDnsGtmMonitorRequest;
class UpdateDnsGtmMonitorResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateDnsGtmMonitorResponseBody = UpdateDnsGtmMonitorResponseBody;
class UpdateDnsGtmMonitorResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDnsGtmMonitorResponseBody,
        };
    }
}
exports.UpdateDnsGtmMonitorResponse = UpdateDnsGtmMonitorResponse;
class UpdateDNSSLBWeightRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recordId: 'RecordId',
            weight: 'Weight',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recordId: 'string',
            weight: 'number',
        };
    }
}
exports.UpdateDNSSLBWeightRequest = UpdateDNSSLBWeightRequest;
class UpdateDNSSLBWeightResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            recordId: 'RecordId',
            weight: 'Weight',
        };
    }
    static types() {
        return {
            requestId: 'string',
            recordId: 'string',
            weight: 'number',
        };
    }
}
exports.UpdateDNSSLBWeightResponseBody = UpdateDNSSLBWeightResponseBody;
class UpdateDNSSLBWeightResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDNSSLBWeightResponseBody,
        };
    }
}
exports.UpdateDNSSLBWeightResponse = UpdateDNSSLBWeightResponse;
class UpdateDomainGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            groupId: 'GroupId',
            groupName: 'GroupName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            groupId: 'string',
            groupName: 'string',
        };
    }
}
exports.UpdateDomainGroupRequest = UpdateDomainGroupRequest;
class UpdateDomainGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            requestId: 'RequestId',
            groupId: 'GroupId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            requestId: 'string',
            groupId: 'string',
        };
    }
}
exports.UpdateDomainGroupResponseBody = UpdateDomainGroupResponseBody;
class UpdateDomainGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDomainGroupResponseBody,
        };
    }
}
exports.UpdateDomainGroupResponse = UpdateDomainGroupResponse;
class UpdateDomainRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recordId: 'RecordId',
            RR: 'RR',
            type: 'Type',
            value: 'Value',
            TTL: 'TTL',
            priority: 'Priority',
            line: 'Line',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recordId: 'string',
            RR: 'string',
            type: 'string',
            value: 'string',
            TTL: 'number',
            priority: 'number',
            line: 'string',
        };
    }
}
exports.UpdateDomainRecordRequest = UpdateDomainRecordRequest;
class UpdateDomainRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
            recordId: 'RecordId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            recordId: 'string',
        };
    }
}
exports.UpdateDomainRecordResponseBody = UpdateDomainRecordResponseBody;
class UpdateDomainRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDomainRecordResponseBody,
        };
    }
}
exports.UpdateDomainRecordResponse = UpdateDomainRecordResponse;
class UpdateDomainRecordRemarkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recordId: 'RecordId',
            remark: 'Remark',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recordId: 'string',
            remark: 'string',
        };
    }
}
exports.UpdateDomainRecordRemarkRequest = UpdateDomainRecordRemarkRequest;
class UpdateDomainRecordRemarkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateDomainRecordRemarkResponseBody = UpdateDomainRecordRemarkResponseBody;
class UpdateDomainRecordRemarkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDomainRecordRemarkResponseBody,
        };
    }
}
exports.UpdateDomainRecordRemarkResponse = UpdateDomainRecordRemarkResponse;
class UpdateDomainRemarkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            domainName: 'DomainName',
            remark: 'Remark',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            domainName: 'string',
            remark: 'string',
        };
    }
}
exports.UpdateDomainRemarkRequest = UpdateDomainRemarkRequest;
class UpdateDomainRemarkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateDomainRemarkResponseBody = UpdateDomainRemarkResponseBody;
class UpdateDomainRemarkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDomainRemarkResponseBody,
        };
    }
}
exports.UpdateDomainRemarkResponse = UpdateDomainRemarkResponse;
class UpdateGtmAccessStrategyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            strategyId: 'StrategyId',
            strategyName: 'StrategyName',
            defaultAddrPoolId: 'DefaultAddrPoolId',
            failoverAddrPoolId: 'FailoverAddrPoolId',
            accessLines: 'AccessLines',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            strategyId: 'string',
            strategyName: 'string',
            defaultAddrPoolId: 'string',
            failoverAddrPoolId: 'string',
            accessLines: 'string',
        };
    }
}
exports.UpdateGtmAccessStrategyRequest = UpdateGtmAccessStrategyRequest;
class UpdateGtmAccessStrategyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateGtmAccessStrategyResponseBody = UpdateGtmAccessStrategyResponseBody;
class UpdateGtmAccessStrategyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateGtmAccessStrategyResponseBody,
        };
    }
}
exports.UpdateGtmAccessStrategyResponse = UpdateGtmAccessStrategyResponse;
class UpdateGtmAddressPoolRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            addrPoolId: 'AddrPoolId',
            name: 'Name',
            type: 'Type',
            minAvailableAddrNum: 'MinAvailableAddrNum',
            addr: 'Addr',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            addrPoolId: 'string',
            name: 'string',
            type: 'string',
            minAvailableAddrNum: 'number',
            addr: { 'type': 'array', 'itemType': UpdateGtmAddressPoolRequestAddr },
        };
    }
}
exports.UpdateGtmAddressPoolRequest = UpdateGtmAddressPoolRequest;
class UpdateGtmAddressPoolResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateGtmAddressPoolResponseBody = UpdateGtmAddressPoolResponseBody;
class UpdateGtmAddressPoolResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateGtmAddressPoolResponseBody,
        };
    }
}
exports.UpdateGtmAddressPoolResponse = UpdateGtmAddressPoolResponse;
class UpdateGtmInstanceGlobalConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            instanceId: 'InstanceId',
            instanceName: 'InstanceName',
            ttl: 'Ttl',
            userDomainName: 'UserDomainName',
            lbaStrategy: 'LbaStrategy',
            alertGroup: 'AlertGroup',
            cnameMode: 'CnameMode',
            cnameCustomDomainName: 'CnameCustomDomainName',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            instanceId: 'string',
            instanceName: 'string',
            ttl: 'number',
            userDomainName: 'string',
            lbaStrategy: 'string',
            alertGroup: 'string',
            cnameMode: 'string',
            cnameCustomDomainName: 'string',
        };
    }
}
exports.UpdateGtmInstanceGlobalConfigRequest = UpdateGtmInstanceGlobalConfigRequest;
class UpdateGtmInstanceGlobalConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateGtmInstanceGlobalConfigResponseBody = UpdateGtmInstanceGlobalConfigResponseBody;
class UpdateGtmInstanceGlobalConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateGtmInstanceGlobalConfigResponseBody,
        };
    }
}
exports.UpdateGtmInstanceGlobalConfigResponse = UpdateGtmInstanceGlobalConfigResponse;
class UpdateGtmMonitorRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userClientIp: 'UserClientIp',
            lang: 'Lang',
            monitorConfigId: 'MonitorConfigId',
            protocolType: 'ProtocolType',
            interval: 'Interval',
            evaluationCount: 'EvaluationCount',
            timeout: 'Timeout',
            monitorExtendInfo: 'MonitorExtendInfo',
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            userClientIp: 'string',
            lang: 'string',
            monitorConfigId: 'string',
            protocolType: 'string',
            interval: 'number',
            evaluationCount: 'number',
            timeout: 'number',
            monitorExtendInfo: 'string',
            ispCityNode: { 'type': 'array', 'itemType': UpdateGtmMonitorRequestIspCityNode },
        };
    }
}
exports.UpdateGtmMonitorRequest = UpdateGtmMonitorRequest;
class UpdateGtmMonitorResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateGtmMonitorResponseBody = UpdateGtmMonitorResponseBody;
class UpdateGtmMonitorResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateGtmMonitorResponseBody,
        };
    }
}
exports.UpdateGtmMonitorResponse = UpdateGtmMonitorResponse;
class UpdateGtmRecoveryPlanRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            recoveryPlanId: 'RecoveryPlanId',
            name: 'Name',
            remark: 'Remark',
            faultAddrPool: 'FaultAddrPool',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            recoveryPlanId: 'number',
            name: 'string',
            remark: 'string',
            faultAddrPool: 'string',
        };
    }
}
exports.UpdateGtmRecoveryPlanRequest = UpdateGtmRecoveryPlanRequest;
class UpdateGtmRecoveryPlanResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateGtmRecoveryPlanResponseBody = UpdateGtmRecoveryPlanResponseBody;
class UpdateGtmRecoveryPlanResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateGtmRecoveryPlanResponseBody,
        };
    }
}
exports.UpdateGtmRecoveryPlanResponse = UpdateGtmRecoveryPlanResponse;
class ValidateDnsGtmAttributeInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lang: 'Lang',
            userClientIp: 'UserClientIp',
            lineCode: 'LineCode',
        };
    }
    static types() {
        return {
            lang: 'string',
            userClientIp: 'string',
            lineCode: 'string',
        };
    }
}
exports.ValidateDnsGtmAttributeInfoRequest = ValidateDnsGtmAttributeInfoRequest;
class ValidateDnsGtmAttributeInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.ValidateDnsGtmAttributeInfoResponseBody = ValidateDnsGtmAttributeInfoResponseBody;
class ValidateDnsGtmAttributeInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ValidateDnsGtmAttributeInfoResponseBody,
        };
    }
}
exports.ValidateDnsGtmAttributeInfoResponse = ValidateDnsGtmAttributeInfoResponse;
class AddCustomLineRequestIpSegment extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endIp: 'EndIp',
            startIp: 'StartIp',
        };
    }
    static types() {
        return {
            endIp: 'string',
            startIp: 'string',
        };
    }
}
exports.AddCustomLineRequestIpSegment = AddCustomLineRequestIpSegment;
class AddDnsCacheDomainRequestSourceDnsServer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            host: 'Host',
            port: 'Port',
        };
    }
    static types() {
        return {
            host: 'string',
            port: 'string',
        };
    }
}
exports.AddDnsCacheDomainRequestSourceDnsServer = AddDnsCacheDomainRequestSourceDnsServer;
class AddDnsGtmAccessStrategyRequestDefaultAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lbaWeight: 'LbaWeight',
            id: 'Id',
        };
    }
    static types() {
        return {
            lbaWeight: 'number',
            id: 'string',
        };
    }
}
exports.AddDnsGtmAccessStrategyRequestDefaultAddrPool = AddDnsGtmAccessStrategyRequestDefaultAddrPool;
class AddDnsGtmAccessStrategyRequestFailoverAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lbaWeight: 'LbaWeight',
            id: 'Id',
        };
    }
    static types() {
        return {
            lbaWeight: 'number',
            id: 'string',
        };
    }
}
exports.AddDnsGtmAccessStrategyRequestFailoverAddrPool = AddDnsGtmAccessStrategyRequestFailoverAddrPool;
class AddDnsGtmAddressPoolRequestAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attributeInfo: 'AttributeInfo',
            remark: 'Remark',
            lbaWeight: 'LbaWeight',
            addr: 'Addr',
            mode: 'Mode',
        };
    }
    static types() {
        return {
            attributeInfo: 'string',
            remark: 'string',
            lbaWeight: 'number',
            addr: 'string',
            mode: 'string',
        };
    }
}
exports.AddDnsGtmAddressPoolRequestAddr = AddDnsGtmAddressPoolRequestAddr;
class AddDnsGtmAddressPoolRequestIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            ispCode: 'IspCode',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            ispCode: 'string',
        };
    }
}
exports.AddDnsGtmAddressPoolRequestIspCityNode = AddDnsGtmAddressPoolRequestIspCityNode;
class AddDnsGtmMonitorRequestIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            ispCode: 'IspCode',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            ispCode: 'string',
        };
    }
}
exports.AddDnsGtmMonitorRequestIspCityNode = AddDnsGtmMonitorRequestIspCityNode;
class AddDomainResponseBodyDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsServer: 'DnsServer',
        };
    }
    static types() {
        return {
            dnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.AddDomainResponseBodyDnsServers = AddDomainResponseBodyDnsServers;
class AddGtmAddressPoolRequestAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            value: 'Value',
            lbaWeight: 'LbaWeight',
            mode: 'Mode',
        };
    }
    static types() {
        return {
            value: 'string',
            lbaWeight: 'number',
            mode: 'string',
        };
    }
}
exports.AddGtmAddressPoolRequestAddr = AddGtmAddressPoolRequestAddr;
class AddGtmAddressPoolRequestIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            ispCode: 'IspCode',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            ispCode: 'string',
        };
    }
}
exports.AddGtmAddressPoolRequestIspCityNode = AddGtmAddressPoolRequestIspCityNode;
class AddGtmMonitorRequestIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            ispCode: 'IspCode',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            ispCode: 'string',
        };
    }
}
exports.AddGtmMonitorRequestIspCityNode = AddGtmMonitorRequestIspCityNode;
class DescribeBatchResultDetailResponseBodyBatchResultDetailsBatchResultDetail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            type: 'Type',
            domain: 'Domain',
            remark: 'Remark',
            recordId: 'RecordId',
            rr: 'Rr',
            priority: 'Priority',
            rrStatus: 'RrStatus',
            operateDateStr: 'OperateDateStr',
            newValue: 'NewValue',
            value: 'Value',
            ttl: 'Ttl',
            batchType: 'BatchType',
            line: 'Line',
            newRr: 'NewRr',
            reason: 'Reason',
        };
    }
    static types() {
        return {
            status: 'boolean',
            type: 'string',
            domain: 'string',
            remark: 'string',
            recordId: 'string',
            rr: 'string',
            priority: 'string',
            rrStatus: 'string',
            operateDateStr: 'string',
            newValue: 'string',
            value: 'string',
            ttl: 'string',
            batchType: 'string',
            line: 'string',
            newRr: 'string',
            reason: 'string',
        };
    }
}
exports.DescribeBatchResultDetailResponseBodyBatchResultDetailsBatchResultDetail = DescribeBatchResultDetailResponseBodyBatchResultDetailsBatchResultDetail;
class DescribeBatchResultDetailResponseBodyBatchResultDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            batchResultDetail: 'BatchResultDetail',
        };
    }
    static types() {
        return {
            batchResultDetail: { 'type': 'array', 'itemType': DescribeBatchResultDetailResponseBodyBatchResultDetailsBatchResultDetail },
        };
    }
}
exports.DescribeBatchResultDetailResponseBodyBatchResultDetails = DescribeBatchResultDetailResponseBodyBatchResultDetails;
class DescribeCustomLineResponseBodyIpSegmentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endIp: 'EndIp',
            startIp: 'StartIp',
        };
    }
    static types() {
        return {
            endIp: 'string',
            startIp: 'string',
        };
    }
}
exports.DescribeCustomLineResponseBodyIpSegmentList = DescribeCustomLineResponseBodyIpSegmentList;
class DescribeCustomLinesResponseBodyCustomLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            name: 'Name',
            id: 'Id',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            id: 'number',
        };
    }
}
exports.DescribeCustomLinesResponseBodyCustomLines = DescribeCustomLinesResponseBodyCustomLines;
class DescribeDnsCacheDomainsResponseBodyDomainsSourceDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            host: 'Host',
            port: 'Port',
        };
    }
    static types() {
        return {
            host: 'string',
            port: 'string',
        };
    }
}
exports.DescribeDnsCacheDomainsResponseBodyDomainsSourceDnsServers = DescribeDnsCacheDomainsResponseBodyDomainsSourceDnsServers;
class DescribeDnsCacheDomainsResponseBodyDomains extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sourceProtocol: 'SourceProtocol',
            updateTime: 'UpdateTime',
            remark: 'Remark',
            expireTime: 'ExpireTime',
            createTime: 'CreateTime',
            instanceId: 'InstanceId',
            sourceEdns: 'SourceEdns',
            domainName: 'DomainName',
            domainId: 'DomainId',
            updateTimestamp: 'UpdateTimestamp',
            expireTimestamp: 'ExpireTimestamp',
            cacheTtlMax: 'CacheTtlMax',
            cacheTtlMin: 'CacheTtlMin',
            versionCode: 'VersionCode',
            sourceDnsServers: 'SourceDnsServers',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            sourceProtocol: 'string',
            updateTime: 'string',
            remark: 'string',
            expireTime: 'string',
            createTime: 'string',
            instanceId: 'string',
            sourceEdns: 'string',
            domainName: 'string',
            domainId: 'string',
            updateTimestamp: 'number',
            expireTimestamp: 'number',
            cacheTtlMax: 'number',
            cacheTtlMin: 'number',
            versionCode: 'string',
            sourceDnsServers: { 'type': 'array', 'itemType': DescribeDnsCacheDomainsResponseBodyDomainsSourceDnsServers },
            createTimestamp: 'number',
        };
    }
}
exports.DescribeDnsCacheDomainsResponseBodyDomains = DescribeDnsCacheDomainsResponseBodyDomains;
class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPoolsEffectiveAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lbaWeight: 'LbaWeight',
            name: 'Name',
            addrCount: 'AddrCount',
            id: 'Id',
        };
    }
    static types() {
        return {
            lbaWeight: 'number',
            name: 'string',
            addrCount: 'number',
            id: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPoolsEffectiveAddrPool = DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPoolsEffectiveAddrPool;
class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            effectiveAddrPool: 'EffectiveAddrPool',
        };
    }
    static types() {
        return {
            effectiveAddrPool: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPoolsEffectiveAddrPool },
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPools = DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPools;
class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            lineCode: 'LineCode',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            groupName: 'string',
            lineCode: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine = DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine;
class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            line: 'Line',
        };
    }
    static types() {
        return {
            line: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine },
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLines = DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLines;
class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategy extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            effectiveLbaStrategy: 'EffectiveLbaStrategy',
            strategyId: 'StrategyId',
            strategyName: 'StrategyName',
            effectiveAddrPoolGroupType: 'EffectiveAddrPoolGroupType',
            createTime: 'CreateTime',
            effectiveAddrPools: 'EffectiveAddrPools',
            createTimestamp: 'CreateTimestamp',
            effectiveAddrPoolType: 'EffectiveAddrPoolType',
            lines: 'Lines',
        };
    }
    static types() {
        return {
            effectiveLbaStrategy: 'string',
            strategyId: 'string',
            strategyName: 'string',
            effectiveAddrPoolGroupType: 'string',
            createTime: 'string',
            effectiveAddrPools: DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPools,
            createTimestamp: 'number',
            effectiveAddrPoolType: 'string',
            lines: DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLines,
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategy = DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategy;
class DescribeDnsGtmAccessStrategiesResponseBodyStrategies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            strategy: 'Strategy',
        };
    }
    static types() {
        return {
            strategy: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategy },
        };
    }
}
exports.DescribeDnsGtmAccessStrategiesResponseBodyStrategies = DescribeDnsGtmAccessStrategiesResponseBodyStrategies;
class DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPoolsFailoverAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lbaWeight: 'LbaWeight',
            name: 'Name',
            addrCount: 'AddrCount',
            id: 'Id',
        };
    }
    static types() {
        return {
            lbaWeight: 'number',
            name: 'string',
            addrCount: 'number',
            id: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPoolsFailoverAddrPool = DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPoolsFailoverAddrPool;
class DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failoverAddrPool: 'FailoverAddrPool',
        };
    }
    static types() {
        return {
            failoverAddrPool: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPoolsFailoverAddrPool },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPools = DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPools;
class DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPoolsDefaultAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lbaWeight: 'LbaWeight',
            name: 'Name',
            addrCount: 'AddrCount',
            id: 'Id',
        };
    }
    static types() {
        return {
            lbaWeight: 'number',
            name: 'string',
            addrCount: 'number',
            id: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPoolsDefaultAddrPool = DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPoolsDefaultAddrPool;
class DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            defaultAddrPool: 'DefaultAddrPool',
        };
    }
    static types() {
        return {
            defaultAddrPool: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPoolsDefaultAddrPool },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPools = DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPools;
class DescribeDnsGtmAccessStrategyResponseBodyLinesLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            lineCode: 'LineCode',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            groupName: 'string',
            lineCode: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponseBodyLinesLine = DescribeDnsGtmAccessStrategyResponseBodyLinesLine;
class DescribeDnsGtmAccessStrategyResponseBodyLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            line: 'Line',
        };
    }
    static types() {
        return {
            line: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategyResponseBodyLinesLine },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyResponseBodyLines = DescribeDnsGtmAccessStrategyResponseBodyLines;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedDomainLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            selectedDomainLine: 'SelectedDomainLine',
        };
    }
    static types() {
        return {
            selectedDomainLine: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedDomainLines = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedDomainLines;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPoolsDomainAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            addrCount: 'AddrCount',
            id: 'Id',
        };
    }
    static types() {
        return {
            name: 'string',
            addrCount: 'number',
            id: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPoolsDomainAddrPool = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPoolsDomainAddrPool;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainAddrPool: 'DomainAddrPool',
        };
    }
    static types() {
        return {
            domainAddrPool: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPoolsDomainAddrPool },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPools = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPools;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPoolsIpv4AddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            addrCount: 'AddrCount',
            id: 'Id',
        };
    }
    static types() {
        return {
            name: 'string',
            addrCount: 'number',
            id: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPoolsIpv4AddrPool = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPoolsIpv4AddrPool;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ipv4AddrPool: 'Ipv4AddrPool',
        };
    }
    static types() {
        return {
            ipv4AddrPool: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPoolsIpv4AddrPool },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPools = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPools;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv4Lines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            selectedIpv4Line: 'SelectedIpv4Line',
        };
    }
    static types() {
        return {
            selectedIpv4Line: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv4Lines = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv4Lines;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPoolsIpv6AddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
            addrCount: 'AddrCount',
            id: 'Id',
        };
    }
    static types() {
        return {
            name: 'string',
            addrCount: 'number',
            id: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPoolsIpv6AddrPool = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPoolsIpv6AddrPool;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ipv6AddrPool: 'Ipv6AddrPool',
        };
    }
    static types() {
        return {
            ipv6AddrPool: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPoolsIpv6AddrPool },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPools = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPools;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv6Lines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            selectedIpv6Line: 'SelectedIpv6Line',
        };
    }
    static types() {
        return {
            selectedIpv6Line: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv6Lines = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv6Lines;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLinesLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fatherCode: 'FatherCode',
            groupName: 'GroupName',
            lineCode: 'LineCode',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            fatherCode: 'string',
            groupName: 'string',
            lineCode: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLinesLine = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLinesLine;
class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            line: 'Line',
        };
    }
    static types() {
        return {
            line: { 'type': 'array', 'itemType': DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLinesLine },
        };
    }
}
exports.DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLines = DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLines;
class DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddrAttributeInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fatherCode: 'FatherCode',
            groupName: 'GroupName',
            lineCode: 'LineCode',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            fatherCode: 'string',
            groupName: 'string',
            lineCode: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddrAttributeInfo = DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddrAttributeInfo;
class DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attributeInfo: 'AttributeInfo',
            addr: 'Addr',
        };
    }
    static types() {
        return {
            attributeInfo: DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddrAttributeInfo,
            addr: 'string',
        };
    }
}
exports.DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddr = DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddr;
class DescribeDnsGtmAddrAttributeInfoResponseBodyAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addr: 'Addr',
        };
    }
    static types() {
        return {
            addr: { 'type': 'array', 'itemType': DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddr },
        };
    }
}
exports.DescribeDnsGtmAddrAttributeInfoResponseBodyAddr = DescribeDnsGtmAddrAttributeInfoResponseBodyAddr;
class DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfosAttributeInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fatherCode: 'FatherCode',
            groupName: 'GroupName',
            lineCode: 'LineCode',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            fatherCode: 'string',
            groupName: 'string',
            lineCode: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfosAttributeInfo = DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfosAttributeInfo;
class DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attributeInfo: 'AttributeInfo',
        };
    }
    static types() {
        return {
            attributeInfo: { 'type': 'array', 'itemType': DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfosAttributeInfo },
        };
    }
}
exports.DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfos = DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfos;
class DescribeDnsGtmInstanceResponseBodyConfigAlertConfigAlertConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            smsNotice: 'SmsNotice',
            noticeType: 'NoticeType',
            emailNotice: 'EmailNotice',
        };
    }
    static types() {
        return {
            smsNotice: 'boolean',
            noticeType: 'string',
            emailNotice: 'boolean',
        };
    }
}
exports.DescribeDnsGtmInstanceResponseBodyConfigAlertConfigAlertConfig = DescribeDnsGtmInstanceResponseBodyConfigAlertConfigAlertConfig;
class DescribeDnsGtmInstanceResponseBodyConfigAlertConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertConfig: 'AlertConfig',
        };
    }
    static types() {
        return {
            alertConfig: { 'type': 'array', 'itemType': DescribeDnsGtmInstanceResponseBodyConfigAlertConfigAlertConfig },
        };
    }
}
exports.DescribeDnsGtmInstanceResponseBodyConfigAlertConfig = DescribeDnsGtmInstanceResponseBodyConfigAlertConfig;
class DescribeDnsGtmInstanceResponseBodyConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ttl: 'Ttl',
            alertGroup: 'AlertGroup',
            cnameType: 'CnameType',
            strategyMode: 'StrategyMode',
            instanceName: 'InstanceName',
            publicCnameMode: 'PublicCnameMode',
            alertConfig: 'AlertConfig',
            publicUserDomainName: 'PublicUserDomainName',
            pubicZoneName: 'PubicZoneName',
        };
    }
    static types() {
        return {
            ttl: 'number',
            alertGroup: 'string',
            cnameType: 'string',
            strategyMode: 'string',
            instanceName: 'string',
            publicCnameMode: 'string',
            alertConfig: DescribeDnsGtmInstanceResponseBodyConfigAlertConfig,
            publicUserDomainName: 'string',
            pubicZoneName: 'string',
        };
    }
}
exports.DescribeDnsGtmInstanceResponseBodyConfig = DescribeDnsGtmInstanceResponseBodyConfig;
class DescribeDnsGtmInstanceResponseBodyUsedQuota extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            emailUsedCount: 'EmailUsedCount',
            taskUsedCount: 'TaskUsedCount',
            smsUsedCount: 'SmsUsedCount',
        };
    }
    static types() {
        return {
            emailUsedCount: 'number',
            taskUsedCount: 'number',
            smsUsedCount: 'number',
        };
    }
}
exports.DescribeDnsGtmInstanceResponseBodyUsedQuota = DescribeDnsGtmInstanceResponseBodyUsedQuota;
class DescribeDnsGtmInstanceAddressPoolResponseBodyAddrsAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            updateTimestamp: 'UpdateTimestamp',
            attributeInfo: 'AttributeInfo',
            updateTime: 'UpdateTime',
            alertStatus: 'AlertStatus',
            remark: 'Remark',
            lbaWeight: 'LbaWeight',
            addr: 'Addr',
            createTime: 'CreateTime',
            mode: 'Mode',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            updateTimestamp: 'number',
            attributeInfo: 'string',
            updateTime: 'string',
            alertStatus: 'string',
            remark: 'string',
            lbaWeight: 'number',
            addr: 'string',
            createTime: 'string',
            mode: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolResponseBodyAddrsAddr = DescribeDnsGtmInstanceAddressPoolResponseBodyAddrsAddr;
class DescribeDnsGtmInstanceAddressPoolResponseBodyAddrs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addr: 'Addr',
        };
    }
    static types() {
        return {
            addr: { 'type': 'array', 'itemType': DescribeDnsGtmInstanceAddressPoolResponseBodyAddrsAddr },
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolResponseBodyAddrs = DescribeDnsGtmInstanceAddressPoolResponseBodyAddrs;
class DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'Type',
            updateTimestamp: 'UpdateTimestamp',
            monitorStatus: 'MonitorStatus',
            updateTime: 'UpdateTime',
            createTime: 'CreateTime',
            addrPoolId: 'AddrPoolId',
            lbaStrategy: 'LbaStrategy',
            name: 'Name',
            addrCount: 'AddrCount',
            monitorConfigId: 'MonitorConfigId',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            type: 'string',
            updateTimestamp: 'number',
            monitorStatus: 'string',
            updateTime: 'string',
            createTime: 'string',
            addrPoolId: 'string',
            lbaStrategy: 'string',
            name: 'string',
            addrCount: 'number',
            monitorConfigId: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool = DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool;
class DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrPool: 'AddrPool',
        };
    }
    static types() {
        return {
            addrPool: { 'type': 'array', 'itemType': DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool },
        };
    }
}
exports.DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPools = DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPools;
class DescribeDnsGtmInstancesResponseBodyGtmInstancesConfigAlertConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            smsNotice: 'SmsNotice',
            noticeType: 'NoticeType',
            emailNotice: 'EmailNotice',
        };
    }
    static types() {
        return {
            smsNotice: 'string',
            noticeType: 'string',
            emailNotice: 'string',
        };
    }
}
exports.DescribeDnsGtmInstancesResponseBodyGtmInstancesConfigAlertConfig = DescribeDnsGtmInstancesResponseBodyGtmInstancesConfigAlertConfig;
class DescribeDnsGtmInstancesResponseBodyGtmInstancesConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ttl: 'Ttl',
            alertGroup: 'AlertGroup',
            publicZoneName: 'PublicZoneName',
            cnameType: 'CnameType',
            strategyMode: 'StrategyMode',
            instanceName: 'InstanceName',
            publicCnameMode: 'PublicCnameMode',
            alertConfig: 'AlertConfig',
            publicUserDomainName: 'PublicUserDomainName',
        };
    }
    static types() {
        return {
            ttl: 'number',
            alertGroup: 'string',
            publicZoneName: 'string',
            cnameType: 'string',
            strategyMode: 'string',
            instanceName: 'string',
            publicCnameMode: 'string',
            alertConfig: { 'type': 'array', 'itemType': DescribeDnsGtmInstancesResponseBodyGtmInstancesConfigAlertConfig },
            publicUserDomainName: 'string',
        };
    }
}
exports.DescribeDnsGtmInstancesResponseBodyGtmInstancesConfig = DescribeDnsGtmInstancesResponseBodyGtmInstancesConfig;
class DescribeDnsGtmInstancesResponseBodyGtmInstancesUsedQuota extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            emailUsedCount: 'EmailUsedCount',
            taskUsedCount: 'TaskUsedCount',
            smsUsedCount: 'SmsUsedCount',
        };
    }
    static types() {
        return {
            emailUsedCount: 'number',
            taskUsedCount: 'number',
            smsUsedCount: 'number',
        };
    }
}
exports.DescribeDnsGtmInstancesResponseBodyGtmInstancesUsedQuota = DescribeDnsGtmInstancesResponseBodyGtmInstancesUsedQuota;
class DescribeDnsGtmInstancesResponseBodyGtmInstances extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            paymentType: 'PaymentType',
            expireTime: 'ExpireTime',
            createTime: 'CreateTime',
            smsQuota: 'SmsQuota',
            instanceId: 'InstanceId',
            config: 'Config',
            expireTimestamp: 'ExpireTimestamp',
            resourceGroupId: 'ResourceGroupId',
            versionCode: 'VersionCode',
            usedQuota: 'UsedQuota',
            taskQuota: 'TaskQuota',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            paymentType: 'string',
            expireTime: 'string',
            createTime: 'string',
            smsQuota: 'number',
            instanceId: 'string',
            config: DescribeDnsGtmInstancesResponseBodyGtmInstancesConfig,
            expireTimestamp: 'number',
            resourceGroupId: 'string',
            versionCode: 'string',
            usedQuota: DescribeDnsGtmInstancesResponseBodyGtmInstancesUsedQuota,
            taskQuota: 'number',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeDnsGtmInstancesResponseBodyGtmInstances = DescribeDnsGtmInstancesResponseBodyGtmInstances;
class DescribeDnsGtmLogsResponseBodyLogsLog extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operTimestamp: 'OperTimestamp',
            entityId: 'EntityId',
            entityType: 'EntityType',
            operTime: 'OperTime',
            operAction: 'OperAction',
            content: 'Content',
            entityName: 'EntityName',
            id: 'Id',
        };
    }
    static types() {
        return {
            operTimestamp: 'number',
            entityId: 'string',
            entityType: 'string',
            operTime: 'string',
            operAction: 'string',
            content: 'string',
            entityName: 'string',
            id: 'number',
        };
    }
}
exports.DescribeDnsGtmLogsResponseBodyLogsLog = DescribeDnsGtmLogsResponseBodyLogsLog;
class DescribeDnsGtmLogsResponseBodyLogs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            log: 'Log',
        };
    }
    static types() {
        return {
            log: { 'type': 'array', 'itemType': DescribeDnsGtmLogsResponseBodyLogsLog },
        };
    }
}
exports.DescribeDnsGtmLogsResponseBodyLogs = DescribeDnsGtmLogsResponseBodyLogs;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodesIpv4IspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            groupName: 'GroupName',
            ispCode: 'IspCode',
            cityName: 'CityName',
            ispName: 'IspName',
            groupType: 'GroupType',
            defaultSelected: 'DefaultSelected',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            groupName: 'string',
            ispCode: 'string',
            cityName: 'string',
            ispName: 'string',
            groupType: 'string',
            defaultSelected: 'boolean',
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodesIpv4IspCityNode = DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodesIpv4IspCityNode;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ipv4IspCityNode: 'Ipv4IspCityNode',
        };
    }
    static types() {
        return {
            ipv4IspCityNode: { 'type': 'array', 'itemType': DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodesIpv4IspCityNode },
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodes = DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodes;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodesDomainIpv4IspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            groupName: 'GroupName',
            ispCode: 'IspCode',
            cityName: 'CityName',
            ispName: 'IspName',
            groupType: 'GroupType',
            defaultSelected: 'DefaultSelected',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            groupName: 'string',
            ispCode: 'string',
            cityName: 'string',
            ispName: 'string',
            groupType: 'string',
            defaultSelected: 'boolean',
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodesDomainIpv4IspCityNode = DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodesDomainIpv4IspCityNode;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainIpv4IspCityNode: 'DomainIpv4IspCityNode',
        };
    }
    static types() {
        return {
            domainIpv4IspCityNode: { 'type': 'array', 'itemType': DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodesDomainIpv4IspCityNode },
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodes = DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodes;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodesDomainIpv6IspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            groupName: 'GroupName',
            ispCode: 'IspCode',
            cityName: 'CityName',
            ispName: 'IspName',
            groupType: 'GroupType',
            defaultSelected: 'DefaultSelected',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            groupName: 'string',
            ispCode: 'string',
            cityName: 'string',
            ispName: 'string',
            groupType: 'string',
            defaultSelected: 'boolean',
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodesDomainIpv6IspCityNode = DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodesDomainIpv6IspCityNode;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainIpv6IspCityNode: 'DomainIpv6IspCityNode',
        };
    }
    static types() {
        return {
            domainIpv6IspCityNode: { 'type': 'array', 'itemType': DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodesDomainIpv6IspCityNode },
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodes = DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodes;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodesIpv6IspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            groupName: 'GroupName',
            ispCode: 'IspCode',
            cityName: 'CityName',
            ispName: 'IspName',
            groupType: 'GroupType',
            defaultSelected: 'DefaultSelected',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            groupName: 'string',
            ispCode: 'string',
            cityName: 'string',
            ispName: 'string',
            groupType: 'string',
            defaultSelected: 'boolean',
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodesIpv6IspCityNode = DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodesIpv6IspCityNode;
class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ipv6IspCityNode: 'Ipv6IspCityNode',
        };
    }
    static types() {
        return {
            ipv6IspCityNode: { 'type': 'array', 'itemType': DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodesIpv6IspCityNode },
        };
    }
}
exports.DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodes = DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodes;
class DescribeDnsGtmMonitorConfigResponseBodyIspCityNodesIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            countryName: 'CountryName',
            ispCode: 'IspCode',
            cityName: 'CityName',
            countryCode: 'CountryCode',
            ispName: 'IspName',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            countryName: 'string',
            ispCode: 'string',
            cityName: 'string',
            countryCode: 'string',
            ispName: 'string',
        };
    }
}
exports.DescribeDnsGtmMonitorConfigResponseBodyIspCityNodesIspCityNode = DescribeDnsGtmMonitorConfigResponseBodyIspCityNodesIspCityNode;
class DescribeDnsGtmMonitorConfigResponseBodyIspCityNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            ispCityNode: { 'type': 'array', 'itemType': DescribeDnsGtmMonitorConfigResponseBodyIspCityNodesIspCityNode },
        };
    }
}
exports.DescribeDnsGtmMonitorConfigResponseBodyIspCityNodes = DescribeDnsGtmMonitorConfigResponseBodyIspCityNodes;
class DescribeDnsProductInstanceResponseBodyDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsServer: 'DnsServer',
        };
    }
    static types() {
        return {
            dnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDnsProductInstanceResponseBodyDnsServers = DescribeDnsProductInstanceResponseBodyDnsServers;
class DescribeDnsProductInstancesResponseBodyDnsProductsDnsProduct extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            overseaLine: 'OverseaLine',
            paymentType: 'PaymentType',
            monitorNodeCount: 'MonitorNodeCount',
            inBlackHole: 'InBlackHole',
            bindDomainUsedCount: 'BindDomainUsedCount',
            ISPRegionLines: 'ISPRegionLines',
            TTLMinValue: 'TTLMinValue',
            ISPLines: 'ISPLines',
            searchEngineLines: 'SearchEngineLines',
            endTimestamp: 'EndTimestamp',
            versionName: 'VersionName',
            versionCode: 'VersionCode',
            monitorTaskCount: 'MonitorTaskCount',
            bindUsedCount: 'BindUsedCount',
            domain: 'Domain',
            monitorFrequency: 'MonitorFrequency',
            inClean: 'InClean',
            URLForwardCount: 'URLForwardCount',
            startTimestamp: 'StartTimestamp',
            DDosDefendQuery: 'DDosDefendQuery',
            instanceId: 'InstanceId',
            DDosDefendFlow: 'DDosDefendFlow',
            bindCount: 'BindCount',
            subDomainLevel: 'SubDomainLevel',
            bindDomainCount: 'BindDomainCount',
            endTime: 'EndTime',
            startTime: 'StartTime',
            overseaDDosDefendFlow: 'OverseaDDosDefendFlow',
            regionLines: 'RegionLines',
            gslb: 'Gslb',
            dnsSecurity: 'DnsSecurity',
            dnsSLBCount: 'DnsSLBCount',
        };
    }
    static types() {
        return {
            overseaLine: 'string',
            paymentType: 'string',
            monitorNodeCount: 'number',
            inBlackHole: 'boolean',
            bindDomainUsedCount: 'number',
            ISPRegionLines: 'string',
            TTLMinValue: 'number',
            ISPLines: 'string',
            searchEngineLines: 'string',
            endTimestamp: 'number',
            versionName: 'string',
            versionCode: 'string',
            monitorTaskCount: 'number',
            bindUsedCount: 'number',
            domain: 'string',
            monitorFrequency: 'number',
            inClean: 'boolean',
            URLForwardCount: 'number',
            startTimestamp: 'number',
            DDosDefendQuery: 'number',
            instanceId: 'string',
            DDosDefendFlow: 'number',
            bindCount: 'number',
            subDomainLevel: 'number',
            bindDomainCount: 'number',
            endTime: 'string',
            startTime: 'string',
            overseaDDosDefendFlow: 'number',
            regionLines: 'boolean',
            gslb: 'boolean',
            dnsSecurity: 'string',
            dnsSLBCount: 'number',
        };
    }
}
exports.DescribeDnsProductInstancesResponseBodyDnsProductsDnsProduct = DescribeDnsProductInstancesResponseBodyDnsProductsDnsProduct;
class DescribeDnsProductInstancesResponseBodyDnsProducts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsProduct: 'DnsProduct',
        };
    }
    static types() {
        return {
            dnsProduct: { 'type': 'array', 'itemType': DescribeDnsProductInstancesResponseBodyDnsProductsDnsProduct },
        };
    }
}
exports.DescribeDnsProductInstancesResponseBodyDnsProducts = DescribeDnsProductInstancesResponseBodyDnsProducts;
class DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithmsLineAlgorithm extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            line: 'Line',
            open: 'Open',
        };
    }
    static types() {
        return {
            line: 'string',
            open: 'boolean',
        };
    }
}
exports.DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithmsLineAlgorithm = DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithmsLineAlgorithm;
class DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lineAlgorithm: 'LineAlgorithm',
        };
    }
    static types() {
        return {
            lineAlgorithm: { 'type': 'array', 'itemType': DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithmsLineAlgorithm },
        };
    }
}
exports.DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithms = DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithms;
class DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomain extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'Type',
            recordCount: 'RecordCount',
            open: 'Open',
            subDomain: 'SubDomain',
            lineAlgorithms: 'LineAlgorithms',
        };
    }
    static types() {
        return {
            type: 'string',
            recordCount: 'number',
            open: 'boolean',
            subDomain: 'string',
            lineAlgorithms: DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithms,
        };
    }
}
exports.DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomain = DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomain;
class DescribeDNSSLBSubDomainsResponseBodySlbSubDomains extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            slbSubDomain: 'SlbSubDomain',
        };
    }
    static types() {
        return {
            slbSubDomain: { 'type': 'array', 'itemType': DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomain },
        };
    }
}
exports.DescribeDNSSLBSubDomainsResponseBodySlbSubDomains = DescribeDNSSLBSubDomainsResponseBodySlbSubDomains;
class DescribeDohAccountStatisticsResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            v6HttpCount: 'V6HttpCount',
            v4HttpsCount: 'V4HttpsCount',
            timestamp: 'Timestamp',
            totalCount: 'TotalCount',
            v4HttpCount: 'V4HttpCount',
            v6HttpsCount: 'V6HttpsCount',
        };
    }
    static types() {
        return {
            v6HttpCount: 'number',
            v4HttpsCount: 'number',
            timestamp: 'number',
            totalCount: 'number',
            v4HttpCount: 'number',
            v6HttpsCount: 'number',
        };
    }
}
exports.DescribeDohAccountStatisticsResponseBodyStatistics = DescribeDohAccountStatisticsResponseBodyStatistics;
class DescribeDohDomainStatisticsResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            v6HttpCount: 'V6HttpCount',
            v4HttpsCount: 'V4HttpsCount',
            timestamp: 'Timestamp',
            totalCount: 'TotalCount',
            v4HttpCount: 'V4HttpCount',
            v6HttpsCount: 'V6HttpsCount',
        };
    }
    static types() {
        return {
            v6HttpCount: 'number',
            v4HttpsCount: 'number',
            timestamp: 'number',
            totalCount: 'number',
            v4HttpCount: 'number',
            v6HttpsCount: 'number',
        };
    }
}
exports.DescribeDohDomainStatisticsResponseBodyStatistics = DescribeDohDomainStatisticsResponseBodyStatistics;
class DescribeDohDomainStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            v6HttpCount: 'V6HttpCount',
            v4HttpsCount: 'V4HttpsCount',
            ipCount: 'IpCount',
            totalCount: 'TotalCount',
            httpCount: 'HttpCount',
            domainName: 'DomainName',
            httpsCount: 'HttpsCount',
            v4HttpCount: 'V4HttpCount',
            v6HttpsCount: 'V6HttpsCount',
        };
    }
    static types() {
        return {
            v6HttpCount: 'number',
            v4HttpsCount: 'number',
            ipCount: 'number',
            totalCount: 'number',
            httpCount: 'number',
            domainName: 'string',
            httpsCount: 'number',
            v4HttpCount: 'number',
            v6HttpsCount: 'number',
        };
    }
}
exports.DescribeDohDomainStatisticsSummaryResponseBodyStatistics = DescribeDohDomainStatisticsSummaryResponseBodyStatistics;
class DescribeDohSubDomainStatisticsResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            v6HttpCount: 'V6HttpCount',
            v4HttpsCount: 'V4HttpsCount',
            timestamp: 'Timestamp',
            totalCount: 'TotalCount',
            v4HttpCount: 'V4HttpCount',
            v6HttpsCount: 'V6HttpsCount',
        };
    }
    static types() {
        return {
            v6HttpCount: 'number',
            v4HttpsCount: 'number',
            timestamp: 'number',
            totalCount: 'number',
            v4HttpCount: 'number',
            v6HttpsCount: 'number',
        };
    }
}
exports.DescribeDohSubDomainStatisticsResponseBodyStatistics = DescribeDohSubDomainStatisticsResponseBodyStatistics;
class DescribeDohSubDomainStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            v6HttpCount: 'V6HttpCount',
            v4HttpsCount: 'V4HttpsCount',
            ipCount: 'IpCount',
            subDomain: 'SubDomain',
            totalCount: 'TotalCount',
            httpCount: 'HttpCount',
            httpsCount: 'HttpsCount',
            v4HttpCount: 'V4HttpCount',
            v6HttpsCount: 'V6HttpsCount',
        };
    }
    static types() {
        return {
            v6HttpCount: 'number',
            v4HttpsCount: 'number',
            ipCount: 'number',
            subDomain: 'string',
            totalCount: 'number',
            httpCount: 'number',
            httpsCount: 'number',
            v4HttpCount: 'number',
            v6HttpsCount: 'number',
        };
    }
}
exports.DescribeDohSubDomainStatisticsSummaryResponseBodyStatistics = DescribeDohSubDomainStatisticsSummaryResponseBodyStatistics;
class DescribeDomainGroupsResponseBodyDomainGroupsDomainGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            groupName: 'GroupName',
            domainCount: 'DomainCount',
        };
    }
    static types() {
        return {
            groupId: 'string',
            groupName: 'string',
            domainCount: 'number',
        };
    }
}
exports.DescribeDomainGroupsResponseBodyDomainGroupsDomainGroup = DescribeDomainGroupsResponseBodyDomainGroupsDomainGroup;
class DescribeDomainGroupsResponseBodyDomainGroups extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainGroup: 'DomainGroup',
        };
    }
    static types() {
        return {
            domainGroup: { 'type': 'array', 'itemType': DescribeDomainGroupsResponseBodyDomainGroupsDomainGroup },
        };
    }
}
exports.DescribeDomainGroupsResponseBodyDomainGroups = DescribeDomainGroupsResponseBodyDomainGroups;
class DescribeDomainInfoResponseBodyDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsServer: 'DnsServer',
        };
    }
    static types() {
        return {
            dnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDomainInfoResponseBodyDnsServers = DescribeDomainInfoResponseBodyDnsServers;
class DescribeDomainInfoResponseBodyRecordLinesRecordLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fatherCode: 'FatherCode',
            lineDisplayName: 'LineDisplayName',
            lineCode: 'LineCode',
            lineName: 'LineName',
        };
    }
    static types() {
        return {
            fatherCode: 'string',
            lineDisplayName: 'string',
            lineCode: 'string',
            lineName: 'string',
        };
    }
}
exports.DescribeDomainInfoResponseBodyRecordLinesRecordLine = DescribeDomainInfoResponseBodyRecordLinesRecordLine;
class DescribeDomainInfoResponseBodyRecordLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recordLine: 'RecordLine',
        };
    }
    static types() {
        return {
            recordLine: { 'type': 'array', 'itemType': DescribeDomainInfoResponseBodyRecordLinesRecordLine },
        };
    }
}
exports.DescribeDomainInfoResponseBodyRecordLines = DescribeDomainInfoResponseBodyRecordLines;
class DescribeDomainInfoResponseBodyAvailableTtls extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            availableTtl: 'AvailableTtl',
        };
    }
    static types() {
        return {
            availableTtl: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDomainInfoResponseBodyAvailableTtls = DescribeDomainInfoResponseBodyAvailableTtls;
class DescribeDomainLogsResponseBodyDomainLogsDomainLog extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'Action',
            actionTimestamp: 'ActionTimestamp',
            zoneId: 'ZoneId',
            clientIp: 'ClientIp',
            message: 'Message',
            actionTime: 'ActionTime',
            domainName: 'DomainName',
        };
    }
    static types() {
        return {
            action: 'string',
            actionTimestamp: 'number',
            zoneId: 'string',
            clientIp: 'string',
            message: 'string',
            actionTime: 'string',
            domainName: 'string',
        };
    }
}
exports.DescribeDomainLogsResponseBodyDomainLogsDomainLog = DescribeDomainLogsResponseBodyDomainLogsDomainLog;
class DescribeDomainLogsResponseBodyDomainLogs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainLog: 'DomainLog',
        };
    }
    static types() {
        return {
            domainLog: { 'type': 'array', 'itemType': DescribeDomainLogsResponseBodyDomainLogsDomainLog },
        };
    }
}
exports.DescribeDomainLogsResponseBodyDomainLogs = DescribeDomainLogsResponseBodyDomainLogs;
class DescribeDomainNsResponseBodyExpectDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expectDnsServer: 'ExpectDnsServer',
        };
    }
    static types() {
        return {
            expectDnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDomainNsResponseBodyExpectDnsServers = DescribeDomainNsResponseBodyExpectDnsServers;
class DescribeDomainNsResponseBodyDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsServer: 'DnsServer',
        };
    }
    static types() {
        return {
            dnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDomainNsResponseBodyDnsServers = DescribeDomainNsResponseBodyDnsServers;
class DescribeDomainRecordsResponseBodyDomainRecordsRecord extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            type: 'Type',
            remark: 'Remark',
            TTL: 'TTL',
            recordId: 'RecordId',
            priority: 'Priority',
            RR: 'RR',
            domainName: 'DomainName',
            weight: 'Weight',
            value: 'Value',
            line: 'Line',
            locked: 'Locked',
        };
    }
    static types() {
        return {
            status: 'string',
            type: 'string',
            remark: 'string',
            TTL: 'number',
            recordId: 'string',
            priority: 'number',
            RR: 'string',
            domainName: 'string',
            weight: 'number',
            value: 'string',
            line: 'string',
            locked: 'boolean',
        };
    }
}
exports.DescribeDomainRecordsResponseBodyDomainRecordsRecord = DescribeDomainRecordsResponseBodyDomainRecordsRecord;
class DescribeDomainRecordsResponseBodyDomainRecords extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            record: 'Record',
        };
    }
    static types() {
        return {
            record: { 'type': 'array', 'itemType': DescribeDomainRecordsResponseBodyDomainRecordsRecord },
        };
    }
}
exports.DescribeDomainRecordsResponseBodyDomainRecords = DescribeDomainRecordsResponseBodyDomainRecords;
class DescribeDomainsRequestTag extends $tea.Model {
    static names() {
        return {};
    }
    static types() {
        return {};
    }
    constructor(map) {
        super(map);
    }
}
exports.DescribeDomainsRequestTag = DescribeDomainsRequestTag;
class DescribeDomainsResponseBodyDomainsDomainTagsTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.DescribeDomainsResponseBodyDomainsDomainTagsTag = DescribeDomainsResponseBodyDomainsDomainTagsTag;
class DescribeDomainsResponseBodyDomainsDomainTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tag: 'Tag',
        };
    }
    static types() {
        return {
            tag: { 'type': 'array', 'itemType': DescribeDomainsResponseBodyDomainsDomainTagsTag },
        };
    }
}
exports.DescribeDomainsResponseBodyDomainsDomainTags = DescribeDomainsResponseBodyDomainsDomainTags;
class DescribeDomainsResponseBodyDomainsDomainDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsServer: 'DnsServer',
        };
    }
    static types() {
        return {
            dnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeDomainsResponseBodyDomainsDomainDnsServers = DescribeDomainsResponseBodyDomainsDomainDnsServers;
class DescribeDomainsResponseBodyDomainsDomain extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            remark: 'Remark',
            createTime: 'CreateTime',
            recordCount: 'RecordCount',
            tags: 'Tags',
            instanceId: 'InstanceId',
            domainName: 'DomainName',
            domainId: 'DomainId',
            aliDomain: 'AliDomain',
            groupId: 'GroupId',
            groupName: 'GroupName',
            resourceGroupId: 'ResourceGroupId',
            instanceEndTime: 'InstanceEndTime',
            instanceExpired: 'InstanceExpired',
            versionName: 'VersionName',
            dnsServers: 'DnsServers',
            versionCode: 'VersionCode',
            punyCode: 'PunyCode',
            registrantEmail: 'RegistrantEmail',
            createTimestamp: 'CreateTimestamp',
            starmark: 'Starmark',
        };
    }
    static types() {
        return {
            remark: 'string',
            createTime: 'string',
            recordCount: 'number',
            tags: DescribeDomainsResponseBodyDomainsDomainTags,
            instanceId: 'string',
            domainName: 'string',
            domainId: 'string',
            aliDomain: 'boolean',
            groupId: 'string',
            groupName: 'string',
            resourceGroupId: 'string',
            instanceEndTime: 'string',
            instanceExpired: 'boolean',
            versionName: 'string',
            dnsServers: DescribeDomainsResponseBodyDomainsDomainDnsServers,
            versionCode: 'string',
            punyCode: 'string',
            registrantEmail: 'string',
            createTimestamp: 'number',
            starmark: 'boolean',
        };
    }
}
exports.DescribeDomainsResponseBodyDomainsDomain = DescribeDomainsResponseBodyDomainsDomain;
class DescribeDomainsResponseBodyDomains extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domain: 'Domain',
        };
    }
    static types() {
        return {
            domain: { 'type': 'array', 'itemType': DescribeDomainsResponseBodyDomainsDomain },
        };
    }
}
exports.DescribeDomainsResponseBodyDomains = DescribeDomainsResponseBodyDomains;
class DescribeDomainStatisticsResponseBodyStatisticsStatistic extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            timestamp: 'Timestamp',
            count: 'Count',
        };
    }
    static types() {
        return {
            timestamp: 'number',
            count: 'number',
        };
    }
}
exports.DescribeDomainStatisticsResponseBodyStatisticsStatistic = DescribeDomainStatisticsResponseBodyStatisticsStatistic;
class DescribeDomainStatisticsResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statistic: 'Statistic',
        };
    }
    static types() {
        return {
            statistic: { 'type': 'array', 'itemType': DescribeDomainStatisticsResponseBodyStatisticsStatistic },
        };
    }
}
exports.DescribeDomainStatisticsResponseBodyStatistics = DescribeDomainStatisticsResponseBodyStatistics;
class DescribeDomainStatisticsSummaryResponseBodyStatisticsStatistic extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainName: 'DomainName',
            count: 'Count',
            domainType: 'DomainType',
        };
    }
    static types() {
        return {
            domainName: 'string',
            count: 'number',
            domainType: 'string',
        };
    }
}
exports.DescribeDomainStatisticsSummaryResponseBodyStatisticsStatistic = DescribeDomainStatisticsSummaryResponseBodyStatisticsStatistic;
class DescribeDomainStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statistic: 'Statistic',
        };
    }
    static types() {
        return {
            statistic: { 'type': 'array', 'itemType': DescribeDomainStatisticsSummaryResponseBodyStatisticsStatistic },
        };
    }
}
exports.DescribeDomainStatisticsSummaryResponseBodyStatistics = DescribeDomainStatisticsSummaryResponseBodyStatistics;
class DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            lineCode: 'LineCode',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            groupName: 'string',
            lineCode: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine = DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine;
class DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            line: 'Line',
        };
    }
    static types() {
        return {
            line: { 'type': 'array', 'itemType': DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine },
        };
    }
}
exports.DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLines = DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLines;
class DescribeGtmAccessStrategiesResponseBodyStrategiesStrategy extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessMode: 'AccessMode',
            strategyName: 'StrategyName',
            defaultAddrPoolMonitorStatus: 'DefaultAddrPoolMonitorStatus',
            strategyMode: 'StrategyMode',
            createTime: 'CreateTime',
            defaultAddrPoolStatus: 'DefaultAddrPoolStatus',
            instanceId: 'InstanceId',
            lines: 'Lines',
            failoverAddrPoolId: 'FailoverAddrPoolId',
            defaultAddrPoolId: 'DefaultAddrPoolId',
            strategyId: 'StrategyId',
            failoverAddrPoolStatus: 'FailoverAddrPoolStatus',
            accessStatus: 'AccessStatus',
            failoverAddrPoolMonitorStatus: 'FailoverAddrPoolMonitorStatus',
            defaultAddrPoolName: 'DefaultAddrPoolName',
            failoverAddrPoolName: 'FailoverAddrPoolName',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            accessMode: 'string',
            strategyName: 'string',
            defaultAddrPoolMonitorStatus: 'string',
            strategyMode: 'string',
            createTime: 'string',
            defaultAddrPoolStatus: 'string',
            instanceId: 'string',
            lines: DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLines,
            failoverAddrPoolId: 'string',
            defaultAddrPoolId: 'string',
            strategyId: 'string',
            failoverAddrPoolStatus: 'string',
            accessStatus: 'string',
            failoverAddrPoolMonitorStatus: 'string',
            defaultAddrPoolName: 'string',
            failoverAddrPoolName: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmAccessStrategiesResponseBodyStrategiesStrategy = DescribeGtmAccessStrategiesResponseBodyStrategiesStrategy;
class DescribeGtmAccessStrategiesResponseBodyStrategies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            strategy: 'Strategy',
        };
    }
    static types() {
        return {
            strategy: { 'type': 'array', 'itemType': DescribeGtmAccessStrategiesResponseBodyStrategiesStrategy },
        };
    }
}
exports.DescribeGtmAccessStrategiesResponseBodyStrategies = DescribeGtmAccessStrategiesResponseBodyStrategies;
class DescribeGtmAccessStrategyResponseBodyLinesLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            lineCode: 'LineCode',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            groupName: 'string',
            lineCode: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeGtmAccessStrategyResponseBodyLinesLine = DescribeGtmAccessStrategyResponseBodyLinesLine;
class DescribeGtmAccessStrategyResponseBodyLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            line: 'Line',
        };
    }
    static types() {
        return {
            line: { 'type': 'array', 'itemType': DescribeGtmAccessStrategyResponseBodyLinesLine },
        };
    }
}
exports.DescribeGtmAccessStrategyResponseBodyLines = DescribeGtmAccessStrategyResponseBodyLines;
class DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPoolsAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrPoolId: 'AddrPoolId',
            addrPoolName: 'AddrPoolName',
        };
    }
    static types() {
        return {
            addrPoolId: 'string',
            addrPoolName: 'string',
        };
    }
}
exports.DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPoolsAddrPool = DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPoolsAddrPool;
class DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrPool: 'AddrPool',
        };
    }
    static types() {
        return {
            addrPool: { 'type': 'array', 'itemType': DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPoolsAddrPool },
        };
    }
}
exports.DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPools = DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPools;
class DescribeGtmAccessStrategyAvailableConfigResponseBodyLinesLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            fatherCode: 'FatherCode',
            lineCode: 'LineCode',
            groupName: 'GroupName',
            lineName: 'LineName',
            groupCode: 'GroupCode',
        };
    }
    static types() {
        return {
            status: 'string',
            fatherCode: 'string',
            lineCode: 'string',
            groupName: 'string',
            lineName: 'string',
            groupCode: 'string',
        };
    }
}
exports.DescribeGtmAccessStrategyAvailableConfigResponseBodyLinesLine = DescribeGtmAccessStrategyAvailableConfigResponseBodyLinesLine;
class DescribeGtmAccessStrategyAvailableConfigResponseBodyLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            line: 'Line',
        };
    }
    static types() {
        return {
            line: { 'type': 'array', 'itemType': DescribeGtmAccessStrategyAvailableConfigResponseBodyLinesLine },
        };
    }
}
exports.DescribeGtmAccessStrategyAvailableConfigResponseBodyLines = DescribeGtmAccessStrategyAvailableConfigResponseBodyLines;
class DescribeGtmInstanceAddressPoolResponseBodyAddrsAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            value: 'Value',
            updateTimestamp: 'UpdateTimestamp',
            updateTime: 'UpdateTime',
            alertStatus: 'AlertStatus',
            lbaWeight: 'LbaWeight',
            createTime: 'CreateTime',
            addrId: 'AddrId',
            mode: 'Mode',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            value: 'string',
            updateTimestamp: 'number',
            updateTime: 'string',
            alertStatus: 'string',
            lbaWeight: 'number',
            createTime: 'string',
            addrId: 'number',
            mode: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmInstanceAddressPoolResponseBodyAddrsAddr = DescribeGtmInstanceAddressPoolResponseBodyAddrsAddr;
class DescribeGtmInstanceAddressPoolResponseBodyAddrs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addr: 'Addr',
        };
    }
    static types() {
        return {
            addr: { 'type': 'array', 'itemType': DescribeGtmInstanceAddressPoolResponseBodyAddrsAddr },
        };
    }
}
exports.DescribeGtmInstanceAddressPoolResponseBodyAddrs = DescribeGtmInstanceAddressPoolResponseBodyAddrs;
class DescribeGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'Type',
            status: 'Status',
            updateTime: 'UpdateTime',
            createTime: 'CreateTime',
            monitorConfigId: 'MonitorConfigId',
            minAvailableAddrNum: 'MinAvailableAddrNum',
            updateTimestamp: 'UpdateTimestamp',
            monitorStatus: 'MonitorStatus',
            addrPoolId: 'AddrPoolId',
            name: 'Name',
            addrCount: 'AddrCount',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            type: 'string',
            status: 'string',
            updateTime: 'string',
            createTime: 'string',
            monitorConfigId: 'string',
            minAvailableAddrNum: 'number',
            updateTimestamp: 'number',
            monitorStatus: 'string',
            addrPoolId: 'string',
            name: 'string',
            addrCount: 'number',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool = DescribeGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool;
class DescribeGtmInstanceAddressPoolsResponseBodyAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrPool: 'AddrPool',
        };
    }
    static types() {
        return {
            addrPool: { 'type': 'array', 'itemType': DescribeGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool },
        };
    }
}
exports.DescribeGtmInstanceAddressPoolsResponseBodyAddrPools = DescribeGtmInstanceAddressPoolsResponseBodyAddrPools;
class DescribeGtmInstancesResponseBodyGtmInstancesGtmInstance extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expireTime: 'ExpireTime',
            accessStrategyNum: 'AccessStrategyNum',
            createTime: 'CreateTime',
            cnameMode: 'CnameMode',
            instanceId: 'InstanceId',
            expireTimestamp: 'ExpireTimestamp',
            ttl: 'Ttl',
            alertGroup: 'AlertGroup',
            addressPoolNum: 'AddressPoolNum',
            instanceName: 'InstanceName',
            lbaStrategy: 'LbaStrategy',
            cname: 'Cname',
            versionCode: 'VersionCode',
            userDomainName: 'UserDomainName',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            expireTime: 'string',
            accessStrategyNum: 'number',
            createTime: 'string',
            cnameMode: 'string',
            instanceId: 'string',
            expireTimestamp: 'number',
            ttl: 'number',
            alertGroup: 'string',
            addressPoolNum: 'number',
            instanceName: 'string',
            lbaStrategy: 'string',
            cname: 'string',
            versionCode: 'string',
            userDomainName: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmInstancesResponseBodyGtmInstancesGtmInstance = DescribeGtmInstancesResponseBodyGtmInstancesGtmInstance;
class DescribeGtmInstancesResponseBodyGtmInstances extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gtmInstance: 'GtmInstance',
        };
    }
    static types() {
        return {
            gtmInstance: { 'type': 'array', 'itemType': DescribeGtmInstancesResponseBodyGtmInstancesGtmInstance },
        };
    }
}
exports.DescribeGtmInstancesResponseBodyGtmInstances = DescribeGtmInstancesResponseBodyGtmInstances;
class DescribeGtmLogsResponseBodyLogsLog extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operTimestamp: 'OperTimestamp',
            entityId: 'EntityId',
            entityType: 'EntityType',
            operTime: 'OperTime',
            operIp: 'OperIp',
            operAction: 'OperAction',
            content: 'Content',
            entityName: 'EntityName',
            id: 'Id',
        };
    }
    static types() {
        return {
            operTimestamp: 'number',
            entityId: 'string',
            entityType: 'string',
            operTime: 'string',
            operIp: 'string',
            operAction: 'string',
            content: 'string',
            entityName: 'string',
            id: 'number',
        };
    }
}
exports.DescribeGtmLogsResponseBodyLogsLog = DescribeGtmLogsResponseBodyLogsLog;
class DescribeGtmLogsResponseBodyLogs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            log: 'Log',
        };
    }
    static types() {
        return {
            log: { 'type': 'array', 'itemType': DescribeGtmLogsResponseBodyLogsLog },
        };
    }
}
exports.DescribeGtmLogsResponseBodyLogs = DescribeGtmLogsResponseBodyLogs;
class DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodesIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            mainland: 'Mainland',
            groupName: 'GroupName',
            ispCode: 'IspCode',
            cityName: 'CityName',
            ispName: 'IspName',
            groupType: 'GroupType',
            defaultSelected: 'DefaultSelected',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            mainland: 'boolean',
            groupName: 'string',
            ispCode: 'string',
            cityName: 'string',
            ispName: 'string',
            groupType: 'string',
            defaultSelected: 'boolean',
        };
    }
}
exports.DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodesIspCityNode = DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodesIspCityNode;
class DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            ispCityNode: { 'type': 'array', 'itemType': DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodesIspCityNode },
        };
    }
}
exports.DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodes = DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodes;
class DescribeGtmMonitorConfigResponseBodyIspCityNodesIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            countryName: 'CountryName',
            ispCode: 'IspCode',
            cityName: 'CityName',
            countryCode: 'CountryCode',
            ispName: 'IspName',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            countryName: 'string',
            ispCode: 'string',
            cityName: 'string',
            countryCode: 'string',
            ispName: 'string',
        };
    }
}
exports.DescribeGtmMonitorConfigResponseBodyIspCityNodesIspCityNode = DescribeGtmMonitorConfigResponseBodyIspCityNodesIspCityNode;
class DescribeGtmMonitorConfigResponseBodyIspCityNodes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ispCityNode: 'IspCityNode',
        };
    }
    static types() {
        return {
            ispCityNode: { 'type': 'array', 'itemType': DescribeGtmMonitorConfigResponseBodyIspCityNodesIspCityNode },
        };
    }
}
exports.DescribeGtmMonitorConfigResponseBodyIspCityNodes = DescribeGtmMonitorConfigResponseBodyIspCityNodes;
class DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrsAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            value: 'Value',
            mode: 'Mode',
            id: 'Id',
        };
    }
    static types() {
        return {
            value: 'string',
            mode: 'string',
            id: 'number',
        };
    }
}
exports.DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrsAddr = DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrsAddr;
class DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addr: 'Addr',
        };
    }
    static types() {
        return {
            addr: { 'type': 'array', 'itemType': DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrsAddr },
        };
    }
}
exports.DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrs = DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrs;
class DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrs: 'Addrs',
            addrPoolId: 'AddrPoolId',
            instanceId: 'InstanceId',
            addrPoolName: 'AddrPoolName',
        };
    }
    static types() {
        return {
            addrs: DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrs,
            addrPoolId: 'string',
            instanceId: 'string',
            addrPoolName: 'string',
        };
    }
}
exports.DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPool = DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPool;
class DescribeGtmRecoveryPlanResponseBodyFaultAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            faultAddrPool: 'FaultAddrPool',
        };
    }
    static types() {
        return {
            faultAddrPool: { 'type': 'array', 'itemType': DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPool },
        };
    }
}
exports.DescribeGtmRecoveryPlanResponseBodyFaultAddrPools = DescribeGtmRecoveryPlanResponseBodyFaultAddrPools;
class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPoolsAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrPoolId: 'AddrPoolId',
            name: 'Name',
        };
    }
    static types() {
        return {
            addrPoolId: 'string',
            name: 'string',
        };
    }
}
exports.DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPoolsAddrPool = DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPoolsAddrPool;
class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPools extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrPool: 'AddrPool',
        };
    }
    static types() {
        return {
            addrPool: { 'type': 'array', 'itemType': DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPoolsAddrPool },
        };
    }
}
exports.DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPools = DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPools;
class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstance extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addrPools: 'AddrPools',
            instanceName: 'InstanceName',
            instanceId: 'InstanceId',
        };
    }
    static types() {
        return {
            addrPools: DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPools,
            instanceName: 'string',
            instanceId: 'string',
        };
    }
}
exports.DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstance = DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstance;
class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstances extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instance: 'Instance',
        };
    }
    static types() {
        return {
            instance: { 'type': 'array', 'itemType': DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstance },
        };
    }
}
exports.DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstances = DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstances;
class DescribeGtmRecoveryPlansResponseBodyRecoveryPlansRecoveryPlan extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            lastRollbackTimestamp: 'LastRollbackTimestamp',
            updateTime: 'UpdateTime',
            remark: 'Remark',
            createTime: 'CreateTime',
            recoveryPlanId: 'RecoveryPlanId',
            updateTimestamp: 'UpdateTimestamp',
            lastExecuteTimestamp: 'LastExecuteTimestamp',
            lastExecuteTime: 'LastExecuteTime',
            lastRollbackTime: 'LastRollbackTime',
            name: 'Name',
            faultAddrPoolNum: 'FaultAddrPoolNum',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            status: 'string',
            lastRollbackTimestamp: 'number',
            updateTime: 'string',
            remark: 'string',
            createTime: 'string',
            recoveryPlanId: 'number',
            updateTimestamp: 'number',
            lastExecuteTimestamp: 'number',
            lastExecuteTime: 'string',
            lastRollbackTime: 'string',
            name: 'string',
            faultAddrPoolNum: 'number',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeGtmRecoveryPlansResponseBodyRecoveryPlansRecoveryPlan = DescribeGtmRecoveryPlansResponseBodyRecoveryPlansRecoveryPlan;
class DescribeGtmRecoveryPlansResponseBodyRecoveryPlans extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recoveryPlan: 'RecoveryPlan',
        };
    }
    static types() {
        return {
            recoveryPlan: { 'type': 'array', 'itemType': DescribeGtmRecoveryPlansResponseBodyRecoveryPlansRecoveryPlan },
        };
    }
}
exports.DescribeGtmRecoveryPlansResponseBodyRecoveryPlans = DescribeGtmRecoveryPlansResponseBodyRecoveryPlans;
class DescribeInstanceDomainsResponseBodyInstanceDomains extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'CreateTime',
            domainName: 'DomainName',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            createTime: 'string',
            domainName: 'string',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeInstanceDomainsResponseBodyInstanceDomains = DescribeInstanceDomainsResponseBodyInstanceDomains;
class DescribeRecordLogsResponseBodyRecordLogsRecordLog extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'Action',
            actionTimestamp: 'ActionTimestamp',
            clientIp: 'ClientIp',
            message: 'Message',
            actionTime: 'ActionTime',
        };
    }
    static types() {
        return {
            action: 'string',
            actionTimestamp: 'number',
            clientIp: 'string',
            message: 'string',
            actionTime: 'string',
        };
    }
}
exports.DescribeRecordLogsResponseBodyRecordLogsRecordLog = DescribeRecordLogsResponseBodyRecordLogsRecordLog;
class DescribeRecordLogsResponseBodyRecordLogs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recordLog: 'RecordLog',
        };
    }
    static types() {
        return {
            recordLog: { 'type': 'array', 'itemType': DescribeRecordLogsResponseBodyRecordLogsRecordLog },
        };
    }
}
exports.DescribeRecordLogsResponseBodyRecordLogs = DescribeRecordLogsResponseBodyRecordLogs;
class DescribeRecordStatisticsResponseBodyStatisticsStatistic extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            timestamp: 'Timestamp',
            count: 'Count',
        };
    }
    static types() {
        return {
            timestamp: 'number',
            count: 'number',
        };
    }
}
exports.DescribeRecordStatisticsResponseBodyStatisticsStatistic = DescribeRecordStatisticsResponseBodyStatisticsStatistic;
class DescribeRecordStatisticsResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statistic: 'Statistic',
        };
    }
    static types() {
        return {
            statistic: { 'type': 'array', 'itemType': DescribeRecordStatisticsResponseBodyStatisticsStatistic },
        };
    }
}
exports.DescribeRecordStatisticsResponseBodyStatistics = DescribeRecordStatisticsResponseBodyStatistics;
class DescribeRecordStatisticsSummaryResponseBodyStatisticsStatistic extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            subDomain: 'SubDomain',
            count: 'Count',
        };
    }
    static types() {
        return {
            subDomain: 'string',
            count: 'number',
        };
    }
}
exports.DescribeRecordStatisticsSummaryResponseBodyStatisticsStatistic = DescribeRecordStatisticsSummaryResponseBodyStatisticsStatistic;
class DescribeRecordStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statistic: 'Statistic',
        };
    }
    static types() {
        return {
            statistic: { 'type': 'array', 'itemType': DescribeRecordStatisticsSummaryResponseBodyStatisticsStatistic },
        };
    }
}
exports.DescribeRecordStatisticsSummaryResponseBodyStatistics = DescribeRecordStatisticsSummaryResponseBodyStatistics;
class DescribeSubDomainRecordsResponseBodyDomainRecordsRecord extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            type: 'Type',
            weight: 'Weight',
            value: 'Value',
            TTL: 'TTL',
            line: 'Line',
            recordId: 'RecordId',
            priority: 'Priority',
            RR: 'RR',
            domainName: 'DomainName',
            locked: 'Locked',
        };
    }
    static types() {
        return {
            status: 'string',
            type: 'string',
            weight: 'number',
            value: 'string',
            TTL: 'number',
            line: 'string',
            recordId: 'string',
            priority: 'number',
            RR: 'string',
            domainName: 'string',
            locked: 'boolean',
        };
    }
}
exports.DescribeSubDomainRecordsResponseBodyDomainRecordsRecord = DescribeSubDomainRecordsResponseBodyDomainRecordsRecord;
class DescribeSubDomainRecordsResponseBodyDomainRecords extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            record: 'Record',
        };
    }
    static types() {
        return {
            record: { 'type': 'array', 'itemType': DescribeSubDomainRecordsResponseBodyDomainRecordsRecord },
        };
    }
}
exports.DescribeSubDomainRecordsResponseBodyDomainRecords = DescribeSubDomainRecordsResponseBodyDomainRecords;
class DescribeSupportLinesResponseBodyRecordLinesRecordLine extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fatherCode: 'FatherCode',
            lineDisplayName: 'LineDisplayName',
            lineCode: 'LineCode',
            lineName: 'LineName',
        };
    }
    static types() {
        return {
            fatherCode: 'string',
            lineDisplayName: 'string',
            lineCode: 'string',
            lineName: 'string',
        };
    }
}
exports.DescribeSupportLinesResponseBodyRecordLinesRecordLine = DescribeSupportLinesResponseBodyRecordLinesRecordLine;
class DescribeSupportLinesResponseBodyRecordLines extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recordLine: 'RecordLine',
        };
    }
    static types() {
        return {
            recordLine: { 'type': 'array', 'itemType': DescribeSupportLinesResponseBodyRecordLinesRecordLine },
        };
    }
}
exports.DescribeSupportLinesResponseBodyRecordLines = DescribeSupportLinesResponseBodyRecordLines;
class DescribeTagsResponseBodyTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            values: 'Values',
        };
    }
    static types() {
        return {
            key: 'string',
            values: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribeTagsResponseBodyTags = DescribeTagsResponseBodyTags;
class DescribeTransferDomainsResponseBodyDomainTransfersDomainTransfer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fromUserId: 'FromUserId',
            createTime: 'CreateTime',
            targetUserId: 'TargetUserId',
            domainName: 'DomainName',
            id: 'Id',
            createTimestamp: 'CreateTimestamp',
        };
    }
    static types() {
        return {
            fromUserId: 'number',
            createTime: 'string',
            targetUserId: 'number',
            domainName: 'string',
            id: 'number',
            createTimestamp: 'number',
        };
    }
}
exports.DescribeTransferDomainsResponseBodyDomainTransfersDomainTransfer = DescribeTransferDomainsResponseBodyDomainTransfersDomainTransfer;
class DescribeTransferDomainsResponseBodyDomainTransfers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainTransfer: 'DomainTransfer',
        };
    }
    static types() {
        return {
            domainTransfer: { 'type': 'array', 'itemType': DescribeTransferDomainsResponseBodyDomainTransfersDomainTransfer },
        };
    }
}
exports.DescribeTransferDomainsResponseBodyDomainTransfers = DescribeTransferDomainsResponseBodyDomainTransfers;
class ListTagResourcesRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.ListTagResourcesRequestTag = ListTagResourcesRequestTag;
class ListTagResourcesResponseBodyTagResources extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resourceType: 'ResourceType',
            tagValue: 'TagValue',
            resourceId: 'ResourceId',
            tagKey: 'TagKey',
        };
    }
    static types() {
        return {
            resourceType: 'string',
            tagValue: 'string',
            resourceId: 'string',
            tagKey: 'string',
        };
    }
}
exports.ListTagResourcesResponseBodyTagResources = ListTagResourcesResponseBodyTagResources;
class ModifyHichinaDomainDNSResponseBodyNewDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsServer: 'DnsServer',
        };
    }
    static types() {
        return {
            dnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ModifyHichinaDomainDNSResponseBodyNewDnsServers = ModifyHichinaDomainDNSResponseBodyNewDnsServers;
class ModifyHichinaDomainDNSResponseBodyOriginalDnsServers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnsServer: 'DnsServer',
        };
    }
    static types() {
        return {
            dnsServer: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ModifyHichinaDomainDNSResponseBodyOriginalDnsServers = ModifyHichinaDomainDNSResponseBodyOriginalDnsServers;
class OperateBatchDomainRequestDomainRecordInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'Type',
            value: 'Value',
            ttl: 'Ttl',
            domain: 'Domain',
            line: 'Line',
            newRr: 'NewRr',
            rr: 'Rr',
            priority: 'Priority',
            newType: 'NewType',
            newValue: 'NewValue',
        };
    }
    static types() {
        return {
            type: 'string',
            value: 'string',
            ttl: 'number',
            domain: 'string',
            line: 'string',
            newRr: 'string',
            rr: 'string',
            priority: 'number',
            newType: 'string',
            newValue: 'string',
        };
    }
}
exports.OperateBatchDomainRequestDomainRecordInfo = OperateBatchDomainRequestDomainRecordInfo;
class PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfosSwitchInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            strategyName: 'StrategyName',
            content: 'Content',
        };
    }
    static types() {
        return {
            strategyName: 'string',
            content: 'string',
        };
    }
}
exports.PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfosSwitchInfo = PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfosSwitchInfo;
class PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            switchInfo: 'SwitchInfo',
        };
    }
    static types() {
        return {
            switchInfo: { 'type': 'array', 'itemType': PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfosSwitchInfo },
        };
    }
}
exports.PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfos = PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfos;
class PreviewGtmRecoveryPlanResponseBodyPreviewsPreview extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            switchInfos: 'SwitchInfos',
            name: 'Name',
            userDomainName: 'UserDomainName',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            switchInfos: PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfos,
            name: 'string',
            userDomainName: 'string',
        };
    }
}
exports.PreviewGtmRecoveryPlanResponseBodyPreviewsPreview = PreviewGtmRecoveryPlanResponseBodyPreviewsPreview;
class PreviewGtmRecoveryPlanResponseBodyPreviews extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            preview: 'Preview',
        };
    }
    static types() {
        return {
            preview: { 'type': 'array', 'itemType': PreviewGtmRecoveryPlanResponseBodyPreviewsPreview },
        };
    }
}
exports.PreviewGtmRecoveryPlanResponseBodyPreviews = PreviewGtmRecoveryPlanResponseBodyPreviews;
class TagResourcesRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.TagResourcesRequestTag = TagResourcesRequestTag;
class UpdateCustomLineRequestIpSegment extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endIp: 'EndIp',
            startIp: 'StartIp',
        };
    }
    static types() {
        return {
            endIp: 'string',
            startIp: 'string',
        };
    }
}
exports.UpdateCustomLineRequestIpSegment = UpdateCustomLineRequestIpSegment;
class UpdateDnsCacheDomainRequestSourceDnsServer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            host: 'Host',
            port: 'Port',
        };
    }
    static types() {
        return {
            host: 'string',
            port: 'string',
        };
    }
}
exports.UpdateDnsCacheDomainRequestSourceDnsServer = UpdateDnsCacheDomainRequestSourceDnsServer;
class UpdateDnsGtmAccessStrategyRequestDefaultAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lbaWeight: 'LbaWeight',
            id: 'Id',
        };
    }
    static types() {
        return {
            lbaWeight: 'number',
            id: 'string',
        };
    }
}
exports.UpdateDnsGtmAccessStrategyRequestDefaultAddrPool = UpdateDnsGtmAccessStrategyRequestDefaultAddrPool;
class UpdateDnsGtmAccessStrategyRequestFailoverAddrPool extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lbaWeight: 'LbaWeight',
            id: 'Id',
        };
    }
    static types() {
        return {
            lbaWeight: 'number',
            id: 'string',
        };
    }
}
exports.UpdateDnsGtmAccessStrategyRequestFailoverAddrPool = UpdateDnsGtmAccessStrategyRequestFailoverAddrPool;
class UpdateDnsGtmAddressPoolRequestAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attributeInfo: 'AttributeInfo',
            remark: 'Remark',
            lbaWeight: 'LbaWeight',
            addr: 'Addr',
            mode: 'Mode',
        };
    }
    static types() {
        return {
            attributeInfo: 'string',
            remark: 'string',
            lbaWeight: 'number',
            addr: 'string',
            mode: 'string',
        };
    }
}
exports.UpdateDnsGtmAddressPoolRequestAddr = UpdateDnsGtmAddressPoolRequestAddr;
class UpdateDnsGtmInstanceGlobalConfigRequestAlertConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            smsNotice: 'SmsNotice',
            noticeType: 'NoticeType',
            emailNotice: 'EmailNotice',
        };
    }
    static types() {
        return {
            smsNotice: 'boolean',
            noticeType: 'string',
            emailNotice: 'boolean',
        };
    }
}
exports.UpdateDnsGtmInstanceGlobalConfigRequestAlertConfig = UpdateDnsGtmInstanceGlobalConfigRequestAlertConfig;
class UpdateDnsGtmMonitorRequestIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            ispCode: 'IspCode',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            ispCode: 'string',
        };
    }
}
exports.UpdateDnsGtmMonitorRequestIspCityNode = UpdateDnsGtmMonitorRequestIspCityNode;
class UpdateGtmAddressPoolRequestAddr extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            value: 'Value',
            lbaWeight: 'LbaWeight',
            mode: 'Mode',
        };
    }
    static types() {
        return {
            value: 'string',
            lbaWeight: 'number',
            mode: 'string',
        };
    }
}
exports.UpdateGtmAddressPoolRequestAddr = UpdateGtmAddressPoolRequestAddr;
class UpdateGtmMonitorRequestIspCityNode extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cityCode: 'CityCode',
            ispCode: 'IspCode',
        };
    }
    static types() {
        return {
            cityCode: 'string',
            ispCode: 'string',
        };
    }
}
exports.UpdateGtmMonitorRequestIspCityNode = UpdateGtmMonitorRequestIspCityNode;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "central";
        this._endpointMap = {
            'ap-northeast-1': "alidns.ap-northeast-1.aliyuncs.com",
            'ap-northeast-2-pop': "dns.aliyuncs.com",
            'ap-south-1': "alidns.ap-south-1.aliyuncs.com",
            'ap-southeast-1': "alidns.ap-southeast-1.aliyuncs.com",
            'ap-southeast-2': "alidns.ap-southeast-2.aliyuncs.com",
            'ap-southeast-3': "alidns.ap-southeast-3.aliyuncs.com",
            'ap-southeast-5': "alidns.ap-southeast-5.aliyuncs.com",
            'cn-beijing': "alidns.cn-beijing.aliyuncs.com",
            'cn-beijing-finance-1': "dns.aliyuncs.com",
            'cn-beijing-finance-pop': "dns.aliyuncs.com",
            'cn-beijing-gov-1': "dns.aliyuncs.com",
            'cn-beijing-nu16-b01': "dns.aliyuncs.com",
            'cn-chengdu': "alidns.cn-chengdu.aliyuncs.com",
            'cn-edge-1': "dns.aliyuncs.com",
            'cn-fujian': "dns.aliyuncs.com",
            'cn-haidian-cm12-c01': "dns.aliyuncs.com",
            'cn-hangzhou': "alidns.cn-hangzhou.aliyuncs.com",
            'cn-hangzhou-bj-b01': "dns.aliyuncs.com",
            'cn-hangzhou-finance': "alidns.cn-hangzhou-finance.aliyuncs.com",
            'cn-hangzhou-internal-prod-1': "dns.aliyuncs.com",
            'cn-hangzhou-internal-test-1': "dns.aliyuncs.com",
            'cn-hangzhou-internal-test-2': "dns.aliyuncs.com",
            'cn-hangzhou-internal-test-3': "dns.aliyuncs.com",
            'cn-hangzhou-test-306': "dns.aliyuncs.com",
            'cn-hongkong': "alidns.cn-hongkong.aliyuncs.com",
            'cn-hongkong-finance-pop': "dns.aliyuncs.com",
            'cn-huhehaote': "alidns.cn-huhehaote.aliyuncs.com",
            'cn-huhehaote-nebula-1': "dns.aliyuncs.com",
            'cn-north-2-gov-1': "alidns.cn-north-2-gov-1.aliyuncs.com",
            'cn-qingdao': "dns.aliyuncs.com",
            'cn-qingdao-nebula': "dns.aliyuncs.com",
            'cn-shanghai': "alidns.cn-shanghai.aliyuncs.com",
            'cn-shanghai-et15-b01': "dns.aliyuncs.com",
            'cn-shanghai-et2-b01': "dns.aliyuncs.com",
            'cn-shanghai-finance-1': "alidns.cn-shanghai-finance-1.aliyuncs.com",
            'cn-shanghai-inner': "dns.aliyuncs.com",
            'cn-shanghai-internal-test-1': "dns.aliyuncs.com",
            'cn-shenzhen': "alidns.cn-shenzhen.aliyuncs.com",
            'cn-shenzhen-finance-1': "alidns.cn-shenzhen-finance-1.aliyuncs.com",
            'cn-shenzhen-inner': "dns.aliyuncs.com",
            'cn-shenzhen-st4-d01': "dns.aliyuncs.com",
            'cn-shenzhen-su18-b01': "dns.aliyuncs.com",
            'cn-wuhan': "dns.aliyuncs.com",
            'cn-wulanchabu': "dns.aliyuncs.com",
            'cn-yushanfang': "dns.aliyuncs.com",
            'cn-zhangbei': "dns.aliyuncs.com",
            'cn-zhangbei-na61-b01': "dns.aliyuncs.com",
            'cn-zhangjiakou': "alidns.cn-zhangjiakou.aliyuncs.com",
            'cn-zhangjiakou-na62-a01': "dns.aliyuncs.com",
            'cn-zhengzhou-nebula-1': "dns.aliyuncs.com",
            'eu-central-1': "alidns.eu-central-1.aliyuncs.com",
            'eu-west-1': "alidns.eu-west-1.aliyuncs.com",
            'eu-west-1-oxs': "dns.aliyuncs.com",
            'me-east-1': "alidns.me-east-1.aliyuncs.com",
            'rus-west-1-pop': "dns.aliyuncs.com",
            'us-east-1': "alidns.us-east-1.aliyuncs.com",
            'us-west-1': "alidns.us-west-1.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("alidns", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async addCustomLineWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddCustomLine", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddCustomLineResponse({}));
    }
    async addCustomLine(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addCustomLineWithOptions(request, runtime);
    }
    async addDnsCacheDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDnsCacheDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDnsCacheDomainResponse({}));
    }
    async addDnsCacheDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDnsCacheDomainWithOptions(request, runtime);
    }
    async addDnsGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDnsGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDnsGtmAccessStrategyResponse({}));
    }
    async addDnsGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDnsGtmAccessStrategyWithOptions(request, runtime);
    }
    async addDnsGtmAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDnsGtmAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDnsGtmAddressPoolResponse({}));
    }
    async addDnsGtmAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDnsGtmAddressPoolWithOptions(request, runtime);
    }
    async addDnsGtmMonitorWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDnsGtmMonitor", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDnsGtmMonitorResponse({}));
    }
    async addDnsGtmMonitor(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDnsGtmMonitorWithOptions(request, runtime);
    }
    async addDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDomainResponse({}));
    }
    async addDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDomainWithOptions(request, runtime);
    }
    async addDomainBackupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDomainBackup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDomainBackupResponse({}));
    }
    async addDomainBackup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDomainBackupWithOptions(request, runtime);
    }
    async addDomainGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDomainGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDomainGroupResponse({}));
    }
    async addDomainGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDomainGroupWithOptions(request, runtime);
    }
    async addDomainRecordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddDomainRecord", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddDomainRecordResponse({}));
    }
    async addDomainRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDomainRecordWithOptions(request, runtime);
    }
    async addGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddGtmAccessStrategyResponse({}));
    }
    async addGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addGtmAccessStrategyWithOptions(request, runtime);
    }
    async addGtmAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddGtmAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddGtmAddressPoolResponse({}));
    }
    async addGtmAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addGtmAddressPoolWithOptions(request, runtime);
    }
    async addGtmMonitorWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddGtmMonitor", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddGtmMonitorResponse({}));
    }
    async addGtmMonitor(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addGtmMonitorWithOptions(request, runtime);
    }
    async addGtmRecoveryPlanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("AddGtmRecoveryPlan", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new AddGtmRecoveryPlanResponse({}));
    }
    async addGtmRecoveryPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addGtmRecoveryPlanWithOptions(request, runtime);
    }
    async bindInstanceDomainsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("BindInstanceDomains", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new BindInstanceDomainsResponse({}));
    }
    async bindInstanceDomains(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.bindInstanceDomainsWithOptions(request, runtime);
    }
    async changeDomainGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("ChangeDomainGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new ChangeDomainGroupResponse({}));
    }
    async changeDomainGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.changeDomainGroupWithOptions(request, runtime);
    }
    async changeDomainOfDnsProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("ChangeDomainOfDnsProduct", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new ChangeDomainOfDnsProductResponse({}));
    }
    async changeDomainOfDnsProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.changeDomainOfDnsProductWithOptions(request, runtime);
    }
    async copyGtmConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("CopyGtmConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new CopyGtmConfigResponse({}));
    }
    async copyGtmConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.copyGtmConfigWithOptions(request, runtime);
    }
    async deleteCustomLinesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteCustomLines", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteCustomLinesResponse({}));
    }
    async deleteCustomLines(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteCustomLinesWithOptions(request, runtime);
    }
    async deleteDnsCacheDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteDnsCacheDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteDnsCacheDomainResponse({}));
    }
    async deleteDnsCacheDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDnsCacheDomainWithOptions(request, runtime);
    }
    async deleteDnsGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteDnsGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteDnsGtmAccessStrategyResponse({}));
    }
    async deleteDnsGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDnsGtmAccessStrategyWithOptions(request, runtime);
    }
    async deleteDnsGtmAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteDnsGtmAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteDnsGtmAddressPoolResponse({}));
    }
    async deleteDnsGtmAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDnsGtmAddressPoolWithOptions(request, runtime);
    }
    async deleteDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteDomainResponse({}));
    }
    async deleteDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDomainWithOptions(request, runtime);
    }
    async deleteDomainGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteDomainGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteDomainGroupResponse({}));
    }
    async deleteDomainGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDomainGroupWithOptions(request, runtime);
    }
    async deleteDomainRecordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteDomainRecord", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteDomainRecordResponse({}));
    }
    async deleteDomainRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDomainRecordWithOptions(request, runtime);
    }
    async deleteGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteGtmAccessStrategyResponse({}));
    }
    async deleteGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteGtmAccessStrategyWithOptions(request, runtime);
    }
    async deleteGtmAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteGtmAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteGtmAddressPoolResponse({}));
    }
    async deleteGtmAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteGtmAddressPoolWithOptions(request, runtime);
    }
    async deleteGtmRecoveryPlanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteGtmRecoveryPlan", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteGtmRecoveryPlanResponse({}));
    }
    async deleteGtmRecoveryPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteGtmRecoveryPlanWithOptions(request, runtime);
    }
    async deleteSubDomainRecordsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DeleteSubDomainRecords", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DeleteSubDomainRecordsResponse({}));
    }
    async deleteSubDomainRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSubDomainRecordsWithOptions(request, runtime);
    }
    async describeBatchResultCountWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeBatchResultCount", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeBatchResultCountResponse({}));
    }
    async describeBatchResultCount(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeBatchResultCountWithOptions(request, runtime);
    }
    async describeBatchResultDetailWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeBatchResultDetail", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeBatchResultDetailResponse({}));
    }
    async describeBatchResultDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeBatchResultDetailWithOptions(request, runtime);
    }
    async describeCustomLineWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeCustomLine", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeCustomLineResponse({}));
    }
    async describeCustomLine(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeCustomLineWithOptions(request, runtime);
    }
    async describeCustomLinesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeCustomLines", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeCustomLinesResponse({}));
    }
    async describeCustomLines(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeCustomLinesWithOptions(request, runtime);
    }
    async describeDnsCacheDomainsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsCacheDomains", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsCacheDomainsResponse({}));
    }
    async describeDnsCacheDomains(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsCacheDomainsWithOptions(request, runtime);
    }
    async describeDnsGtmAccessStrategiesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmAccessStrategies", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmAccessStrategiesResponse({}));
    }
    async describeDnsGtmAccessStrategies(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmAccessStrategiesWithOptions(request, runtime);
    }
    async describeDnsGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmAccessStrategyResponse({}));
    }
    async describeDnsGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmAccessStrategyWithOptions(request, runtime);
    }
    async describeDnsGtmAccessStrategyAvailableConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmAccessStrategyAvailableConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmAccessStrategyAvailableConfigResponse({}));
    }
    async describeDnsGtmAccessStrategyAvailableConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmAccessStrategyAvailableConfigWithOptions(request, runtime);
    }
    async describeDnsGtmAddrAttributeInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmAddrAttributeInfo", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmAddrAttributeInfoResponse({}));
    }
    async describeDnsGtmAddrAttributeInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmAddrAttributeInfoWithOptions(request, runtime);
    }
    async describeDnsGtmAddressPoolAvailableConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmAddressPoolAvailableConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmAddressPoolAvailableConfigResponse({}));
    }
    async describeDnsGtmAddressPoolAvailableConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmAddressPoolAvailableConfigWithOptions(request, runtime);
    }
    async describeDnsGtmAvailableAlertGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmAvailableAlertGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmAvailableAlertGroupResponse({}));
    }
    async describeDnsGtmAvailableAlertGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmAvailableAlertGroupWithOptions(request, runtime);
    }
    async describeDnsGtmInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmInstance", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmInstanceResponse({}));
    }
    async describeDnsGtmInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmInstanceWithOptions(request, runtime);
    }
    async describeDnsGtmInstanceAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmInstanceAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmInstanceAddressPoolResponse({}));
    }
    async describeDnsGtmInstanceAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmInstanceAddressPoolWithOptions(request, runtime);
    }
    async describeDnsGtmInstanceAddressPoolsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmInstanceAddressPools", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmInstanceAddressPoolsResponse({}));
    }
    async describeDnsGtmInstanceAddressPools(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmInstanceAddressPoolsWithOptions(request, runtime);
    }
    async describeDnsGtmInstancesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmInstances", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmInstancesResponse({}));
    }
    async describeDnsGtmInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmInstancesWithOptions(request, runtime);
    }
    async describeDnsGtmInstanceStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmInstanceStatus", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmInstanceStatusResponse({}));
    }
    async describeDnsGtmInstanceStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmInstanceStatusWithOptions(request, runtime);
    }
    async describeDnsGtmInstanceSystemCnameWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmInstanceSystemCname", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmInstanceSystemCnameResponse({}));
    }
    async describeDnsGtmInstanceSystemCname(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmInstanceSystemCnameWithOptions(request, runtime);
    }
    async describeDnsGtmLogsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmLogs", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmLogsResponse({}));
    }
    async describeDnsGtmLogs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmLogsWithOptions(request, runtime);
    }
    async describeDnsGtmMonitorAvailableConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmMonitorAvailableConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmMonitorAvailableConfigResponse({}));
    }
    async describeDnsGtmMonitorAvailableConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmMonitorAvailableConfigWithOptions(request, runtime);
    }
    async describeDnsGtmMonitorConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsGtmMonitorConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsGtmMonitorConfigResponse({}));
    }
    async describeDnsGtmMonitorConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsGtmMonitorConfigWithOptions(request, runtime);
    }
    async describeDnsProductInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsProductInstance", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsProductInstanceResponse({}));
    }
    async describeDnsProductInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsProductInstanceWithOptions(request, runtime);
    }
    async describeDnsProductInstancesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDnsProductInstances", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDnsProductInstancesResponse({}));
    }
    async describeDnsProductInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDnsProductInstancesWithOptions(request, runtime);
    }
    async describeDNSSLBSubDomainsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDNSSLBSubDomains", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDNSSLBSubDomainsResponse({}));
    }
    async describeDNSSLBSubDomains(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDNSSLBSubDomainsWithOptions(request, runtime);
    }
    async describeDohAccountStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDohAccountStatistics", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDohAccountStatisticsResponse({}));
    }
    async describeDohAccountStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDohAccountStatisticsWithOptions(request, runtime);
    }
    async describeDohDomainStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDohDomainStatistics", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDohDomainStatisticsResponse({}));
    }
    async describeDohDomainStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDohDomainStatisticsWithOptions(request, runtime);
    }
    async describeDohDomainStatisticsSummaryWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDohDomainStatisticsSummary", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDohDomainStatisticsSummaryResponse({}));
    }
    async describeDohDomainStatisticsSummary(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDohDomainStatisticsSummaryWithOptions(request, runtime);
    }
    async describeDohSubDomainStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDohSubDomainStatistics", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDohSubDomainStatisticsResponse({}));
    }
    async describeDohSubDomainStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDohSubDomainStatisticsWithOptions(request, runtime);
    }
    async describeDohSubDomainStatisticsSummaryWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDohSubDomainStatisticsSummary", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDohSubDomainStatisticsSummaryResponse({}));
    }
    async describeDohSubDomainStatisticsSummary(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDohSubDomainStatisticsSummaryWithOptions(request, runtime);
    }
    async describeDohUserInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDohUserInfo", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDohUserInfoResponse({}));
    }
    async describeDohUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDohUserInfoWithOptions(request, runtime);
    }
    async describeDomainDnssecInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainDnssecInfo", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainDnssecInfoResponse({}));
    }
    async describeDomainDnssecInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainDnssecInfoWithOptions(request, runtime);
    }
    async describeDomainGroupsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainGroups", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainGroupsResponse({}));
    }
    async describeDomainGroups(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainGroupsWithOptions(request, runtime);
    }
    async describeDomainInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainInfo", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainInfoResponse({}));
    }
    async describeDomainInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainInfoWithOptions(request, runtime);
    }
    async describeDomainLogsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainLogs", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainLogsResponse({}));
    }
    async describeDomainLogs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainLogsWithOptions(request, runtime);
    }
    async describeDomainNsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainNs", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainNsResponse({}));
    }
    async describeDomainNs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainNsWithOptions(request, runtime);
    }
    async describeDomainRecordInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainRecordInfo", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainRecordInfoResponse({}));
    }
    async describeDomainRecordInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainRecordInfoWithOptions(request, runtime);
    }
    async describeDomainRecordsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainRecords", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainRecordsResponse({}));
    }
    async describeDomainRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainRecordsWithOptions(request, runtime);
    }
    async describeDomainsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomains", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainsResponse({}));
    }
    async describeDomains(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainsWithOptions(request, runtime);
    }
    async describeDomainStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainStatistics", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainStatisticsResponse({}));
    }
    async describeDomainStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainStatisticsWithOptions(request, runtime);
    }
    async describeDomainStatisticsSummaryWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeDomainStatisticsSummary", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeDomainStatisticsSummaryResponse({}));
    }
    async describeDomainStatisticsSummary(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeDomainStatisticsSummaryWithOptions(request, runtime);
    }
    async describeGtmAccessStrategiesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmAccessStrategies", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmAccessStrategiesResponse({}));
    }
    async describeGtmAccessStrategies(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmAccessStrategiesWithOptions(request, runtime);
    }
    async describeGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmAccessStrategyResponse({}));
    }
    async describeGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmAccessStrategyWithOptions(request, runtime);
    }
    async describeGtmAccessStrategyAvailableConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmAccessStrategyAvailableConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmAccessStrategyAvailableConfigResponse({}));
    }
    async describeGtmAccessStrategyAvailableConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmAccessStrategyAvailableConfigWithOptions(request, runtime);
    }
    async describeGtmAvailableAlertGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmAvailableAlertGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmAvailableAlertGroupResponse({}));
    }
    async describeGtmAvailableAlertGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmAvailableAlertGroupWithOptions(request, runtime);
    }
    async describeGtmInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmInstance", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmInstanceResponse({}));
    }
    async describeGtmInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmInstanceWithOptions(request, runtime);
    }
    async describeGtmInstanceAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmInstanceAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmInstanceAddressPoolResponse({}));
    }
    async describeGtmInstanceAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmInstanceAddressPoolWithOptions(request, runtime);
    }
    async describeGtmInstanceAddressPoolsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmInstanceAddressPools", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmInstanceAddressPoolsResponse({}));
    }
    async describeGtmInstanceAddressPools(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmInstanceAddressPoolsWithOptions(request, runtime);
    }
    async describeGtmInstancesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmInstances", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmInstancesResponse({}));
    }
    async describeGtmInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmInstancesWithOptions(request, runtime);
    }
    async describeGtmInstanceStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmInstanceStatus", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmInstanceStatusResponse({}));
    }
    async describeGtmInstanceStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmInstanceStatusWithOptions(request, runtime);
    }
    async describeGtmInstanceSystemCnameWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmInstanceSystemCname", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmInstanceSystemCnameResponse({}));
    }
    async describeGtmInstanceSystemCname(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmInstanceSystemCnameWithOptions(request, runtime);
    }
    async describeGtmLogsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmLogs", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmLogsResponse({}));
    }
    async describeGtmLogs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmLogsWithOptions(request, runtime);
    }
    async describeGtmMonitorAvailableConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmMonitorAvailableConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmMonitorAvailableConfigResponse({}));
    }
    async describeGtmMonitorAvailableConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmMonitorAvailableConfigWithOptions(request, runtime);
    }
    async describeGtmMonitorConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmMonitorConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmMonitorConfigResponse({}));
    }
    async describeGtmMonitorConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmMonitorConfigWithOptions(request, runtime);
    }
    async describeGtmRecoveryPlanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmRecoveryPlan", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmRecoveryPlanResponse({}));
    }
    async describeGtmRecoveryPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmRecoveryPlanWithOptions(request, runtime);
    }
    async describeGtmRecoveryPlanAvailableConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmRecoveryPlanAvailableConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmRecoveryPlanAvailableConfigResponse({}));
    }
    async describeGtmRecoveryPlanAvailableConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmRecoveryPlanAvailableConfigWithOptions(request, runtime);
    }
    async describeGtmRecoveryPlansWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeGtmRecoveryPlans", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeGtmRecoveryPlansResponse({}));
    }
    async describeGtmRecoveryPlans(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeGtmRecoveryPlansWithOptions(request, runtime);
    }
    async describeInstanceDomainsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeInstanceDomains", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeInstanceDomainsResponse({}));
    }
    async describeInstanceDomains(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeInstanceDomainsWithOptions(request, runtime);
    }
    async describeRecordLogsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeRecordLogs", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeRecordLogsResponse({}));
    }
    async describeRecordLogs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeRecordLogsWithOptions(request, runtime);
    }
    async describeRecordStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeRecordStatistics", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeRecordStatisticsResponse({}));
    }
    async describeRecordStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeRecordStatisticsWithOptions(request, runtime);
    }
    async describeRecordStatisticsSummaryWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeRecordStatisticsSummary", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeRecordStatisticsSummaryResponse({}));
    }
    async describeRecordStatisticsSummary(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeRecordStatisticsSummaryWithOptions(request, runtime);
    }
    async describeSubDomainRecordsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeSubDomainRecords", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeSubDomainRecordsResponse({}));
    }
    async describeSubDomainRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeSubDomainRecordsWithOptions(request, runtime);
    }
    async describeSupportLinesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeSupportLines", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeSupportLinesResponse({}));
    }
    async describeSupportLines(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeSupportLinesWithOptions(request, runtime);
    }
    async describeTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeTags", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeTagsResponse({}));
    }
    async describeTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeTagsWithOptions(request, runtime);
    }
    async describeTransferDomainsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("DescribeTransferDomains", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new DescribeTransferDomainsResponse({}));
    }
    async describeTransferDomains(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeTransferDomainsWithOptions(request, runtime);
    }
    async executeGtmRecoveryPlanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("ExecuteGtmRecoveryPlan", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new ExecuteGtmRecoveryPlanResponse({}));
    }
    async executeGtmRecoveryPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.executeGtmRecoveryPlanWithOptions(request, runtime);
    }
    async getMainDomainNameWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("GetMainDomainName", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new GetMainDomainNameResponse({}));
    }
    async getMainDomainName(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getMainDomainNameWithOptions(request, runtime);
    }
    async getTxtRecordForVerifyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("GetTxtRecordForVerify", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new GetTxtRecordForVerifyResponse({}));
    }
    async getTxtRecordForVerify(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTxtRecordForVerifyWithOptions(request, runtime);
    }
    async listTagResourcesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("ListTagResources", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new ListTagResourcesResponse({}));
    }
    async listTagResources(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listTagResourcesWithOptions(request, runtime);
    }
    async modifyHichinaDomainDNSWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("ModifyHichinaDomainDNS", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new ModifyHichinaDomainDNSResponse({}));
    }
    async modifyHichinaDomainDNS(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.modifyHichinaDomainDNSWithOptions(request, runtime);
    }
    async moveDomainResourceGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("MoveDomainResourceGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new MoveDomainResourceGroupResponse({}));
    }
    async moveDomainResourceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.moveDomainResourceGroupWithOptions(request, runtime);
    }
    async moveGtmResourceGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("MoveGtmResourceGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new MoveGtmResourceGroupResponse({}));
    }
    async moveGtmResourceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.moveGtmResourceGroupWithOptions(request, runtime);
    }
    async operateBatchDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("OperateBatchDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new OperateBatchDomainResponse({}));
    }
    async operateBatchDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.operateBatchDomainWithOptions(request, runtime);
    }
    async previewGtmRecoveryPlanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("PreviewGtmRecoveryPlan", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new PreviewGtmRecoveryPlanResponse({}));
    }
    async previewGtmRecoveryPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.previewGtmRecoveryPlanWithOptions(request, runtime);
    }
    async retrieveDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("RetrieveDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new RetrieveDomainResponse({}));
    }
    async retrieveDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.retrieveDomainWithOptions(request, runtime);
    }
    async rollbackGtmRecoveryPlanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("RollbackGtmRecoveryPlan", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new RollbackGtmRecoveryPlanResponse({}));
    }
    async rollbackGtmRecoveryPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.rollbackGtmRecoveryPlanWithOptions(request, runtime);
    }
    async setDnsGtmAccessModeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SetDnsGtmAccessMode", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SetDnsGtmAccessModeResponse({}));
    }
    async setDnsGtmAccessMode(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDnsGtmAccessModeWithOptions(request, runtime);
    }
    async setDnsGtmMonitorStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SetDnsGtmMonitorStatus", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SetDnsGtmMonitorStatusResponse({}));
    }
    async setDnsGtmMonitorStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDnsGtmMonitorStatusWithOptions(request, runtime);
    }
    async setDNSSLBStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SetDNSSLBStatus", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SetDNSSLBStatusResponse({}));
    }
    async setDNSSLBStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDNSSLBStatusWithOptions(request, runtime);
    }
    async setDomainDnssecStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SetDomainDnssecStatus", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SetDomainDnssecStatusResponse({}));
    }
    async setDomainDnssecStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDomainDnssecStatusWithOptions(request, runtime);
    }
    async setDomainRecordStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SetDomainRecordStatus", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SetDomainRecordStatusResponse({}));
    }
    async setDomainRecordStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDomainRecordStatusWithOptions(request, runtime);
    }
    async setGtmAccessModeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SetGtmAccessMode", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SetGtmAccessModeResponse({}));
    }
    async setGtmAccessMode(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setGtmAccessModeWithOptions(request, runtime);
    }
    async setGtmMonitorStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SetGtmMonitorStatus", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SetGtmMonitorStatusResponse({}));
    }
    async setGtmMonitorStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setGtmMonitorStatusWithOptions(request, runtime);
    }
    async switchDnsGtmInstanceStrategyModeWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("SwitchDnsGtmInstanceStrategyMode", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new SwitchDnsGtmInstanceStrategyModeResponse({}));
    }
    async switchDnsGtmInstanceStrategyMode(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.switchDnsGtmInstanceStrategyModeWithOptions(request, runtime);
    }
    async tagResourcesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("TagResources", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new TagResourcesResponse({}));
    }
    async tagResources(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.tagResourcesWithOptions(request, runtime);
    }
    async transferDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("TransferDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new TransferDomainResponse({}));
    }
    async transferDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.transferDomainWithOptions(request, runtime);
    }
    async unbindInstanceDomainsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UnbindInstanceDomains", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UnbindInstanceDomainsResponse({}));
    }
    async unbindInstanceDomains(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.unbindInstanceDomainsWithOptions(request, runtime);
    }
    async untagResourcesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UntagResources", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UntagResourcesResponse({}));
    }
    async untagResources(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.untagResourcesWithOptions(request, runtime);
    }
    async updateCustomLineWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateCustomLine", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateCustomLineResponse({}));
    }
    async updateCustomLine(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateCustomLineWithOptions(request, runtime);
    }
    async updateDnsCacheDomainWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDnsCacheDomain", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDnsCacheDomainResponse({}));
    }
    async updateDnsCacheDomain(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDnsCacheDomainWithOptions(request, runtime);
    }
    async updateDnsCacheDomainRemarkWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDnsCacheDomainRemark", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDnsCacheDomainRemarkResponse({}));
    }
    async updateDnsCacheDomainRemark(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDnsCacheDomainRemarkWithOptions(request, runtime);
    }
    async updateDnsGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDnsGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDnsGtmAccessStrategyResponse({}));
    }
    async updateDnsGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDnsGtmAccessStrategyWithOptions(request, runtime);
    }
    async updateDnsGtmAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDnsGtmAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDnsGtmAddressPoolResponse({}));
    }
    async updateDnsGtmAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDnsGtmAddressPoolWithOptions(request, runtime);
    }
    async updateDnsGtmInstanceGlobalConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDnsGtmInstanceGlobalConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDnsGtmInstanceGlobalConfigResponse({}));
    }
    async updateDnsGtmInstanceGlobalConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDnsGtmInstanceGlobalConfigWithOptions(request, runtime);
    }
    async updateDnsGtmMonitorWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDnsGtmMonitor", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDnsGtmMonitorResponse({}));
    }
    async updateDnsGtmMonitor(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDnsGtmMonitorWithOptions(request, runtime);
    }
    async updateDNSSLBWeightWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDNSSLBWeight", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDNSSLBWeightResponse({}));
    }
    async updateDNSSLBWeight(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDNSSLBWeightWithOptions(request, runtime);
    }
    async updateDomainGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDomainGroup", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDomainGroupResponse({}));
    }
    async updateDomainGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDomainGroupWithOptions(request, runtime);
    }
    async updateDomainRecordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDomainRecord", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDomainRecordResponse({}));
    }
    async updateDomainRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDomainRecordWithOptions(request, runtime);
    }
    async updateDomainRecordRemarkWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDomainRecordRemark", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDomainRecordRemarkResponse({}));
    }
    async updateDomainRecordRemark(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDomainRecordRemarkWithOptions(request, runtime);
    }
    async updateDomainRemarkWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateDomainRemark", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateDomainRemarkResponse({}));
    }
    async updateDomainRemark(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDomainRemarkWithOptions(request, runtime);
    }
    async updateGtmAccessStrategyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateGtmAccessStrategy", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateGtmAccessStrategyResponse({}));
    }
    async updateGtmAccessStrategy(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateGtmAccessStrategyWithOptions(request, runtime);
    }
    async updateGtmAddressPoolWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateGtmAddressPool", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateGtmAddressPoolResponse({}));
    }
    async updateGtmAddressPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateGtmAddressPoolWithOptions(request, runtime);
    }
    async updateGtmInstanceGlobalConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateGtmInstanceGlobalConfig", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateGtmInstanceGlobalConfigResponse({}));
    }
    async updateGtmInstanceGlobalConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateGtmInstanceGlobalConfigWithOptions(request, runtime);
    }
    async updateGtmMonitorWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateGtmMonitor", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateGtmMonitorResponse({}));
    }
    async updateGtmMonitor(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateGtmMonitorWithOptions(request, runtime);
    }
    async updateGtmRecoveryPlanWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("UpdateGtmRecoveryPlan", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new UpdateGtmRecoveryPlanResponse({}));
    }
    async updateGtmRecoveryPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateGtmRecoveryPlanWithOptions(request, runtime);
    }
    async validateDnsGtmAttributeInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toMap(request),
        });
        return $tea.cast(await this.doRPCRequest("ValidateDnsGtmAttributeInfo", "2015-01-09", "HTTPS", "POST", "AK", "json", req, runtime), new ValidateDnsGtmAttributeInfoResponse({}));
    }
    async validateDnsGtmAttributeInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.validateDnsGtmAttributeInfoWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map