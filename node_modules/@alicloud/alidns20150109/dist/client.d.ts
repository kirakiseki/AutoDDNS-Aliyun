/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddCustomLineRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    lineName?: string;
    ipSegment?: AddCustomLineRequestIpSegment[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomLineResponseBody extends $tea.Model {
    lineId?: number;
    requestId?: string;
    lineCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomLineResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddCustomLineResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsCacheDomainRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    instanceId?: string;
    cacheTtlMin?: number;
    cacheTtlMax?: number;
    sourceProtocol?: string;
    sourceEdns?: string;
    remark?: string;
    sourceDnsServer?: AddDnsCacheDomainRequestSourceDnsServer[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsCacheDomainResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsCacheDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDnsCacheDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    strategyName?: string;
    lines?: string;
    defaultAddrPoolType?: string;
    defaultLbaStrategy?: string;
    defaultMinAvailableAddrNum?: number;
    defaultMaxReturnAddrNum?: number;
    defaultLatencyOptimization?: string;
    failoverAddrPoolType?: string;
    failoverLbaStrategy?: string;
    failoverMinAvailableAddrNum?: number;
    failoverMaxReturnAddrNum?: number;
    failoverLatencyOptimization?: string;
    strategyMode?: string;
    defaultAddrPool?: AddDnsGtmAccessStrategyRequestDefaultAddrPool[];
    failoverAddrPool?: AddDnsGtmAccessStrategyRequestFailoverAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAccessStrategyResponseBody extends $tea.Model {
    requestId?: string;
    strategyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDnsGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    name?: string;
    type?: string;
    lbaStrategy?: string;
    monitorStatus?: string;
    protocolType?: string;
    interval?: number;
    evaluationCount?: number;
    timeout?: number;
    monitorExtendInfo?: string;
    addr?: AddDnsGtmAddressPoolRequestAddr[];
    ispCityNode?: AddDnsGtmAddressPoolRequestIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAddressPoolResponseBody extends $tea.Model {
    requestId?: string;
    addrPoolId?: string;
    monitorConfigId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDnsGtmAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmMonitorRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    protocolType?: string;
    interval?: number;
    evaluationCount?: number;
    timeout?: number;
    monitorExtendInfo?: string;
    ispCityNode?: AddDnsGtmMonitorRequestIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmMonitorResponseBody extends $tea.Model {
    requestId?: string;
    monitorConfigId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmMonitorResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDnsGtmMonitorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainRequest extends $tea.Model {
    lang?: string;
    domainName?: string;
    groupId?: string;
    resourceGroupId?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainResponseBody extends $tea.Model {
    groupName?: string;
    domainId?: string;
    requestId?: string;
    domainName?: string;
    punyCode?: string;
    dnsServers?: AddDomainResponseBodyDnsServers;
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainBackupRequest extends $tea.Model {
    lang?: string;
    domainName?: string;
    periodType?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainBackupResponseBody extends $tea.Model {
    periodType?: string;
    requestId?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainBackupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDomainBackupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainGroupRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainGroupResponseBody extends $tea.Model {
    groupName?: string;
    requestId?: string;
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDomainGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainRecordRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    RR?: string;
    type?: string;
    value?: string;
    TTL?: number;
    priority?: number;
    line?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainRecordResponseBody extends $tea.Model {
    requestId?: string;
    recordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDomainRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    strategyName?: string;
    defaultAddrPoolId?: string;
    failoverAddrPoolId?: string;
    accessLines?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAccessStrategyResponseBody extends $tea.Model {
    requestId?: string;
    strategyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    name?: string;
    type?: string;
    minAvailableAddrNum?: number;
    monitorStatus?: string;
    protocolType?: string;
    interval?: number;
    evaluationCount?: number;
    timeout?: number;
    monitorExtendInfo?: string;
    addr?: AddGtmAddressPoolRequestAddr[];
    ispCityNode?: AddGtmAddressPoolRequestIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAddressPoolResponseBody extends $tea.Model {
    requestId?: string;
    addrPoolId?: string;
    monitorConfigId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddGtmAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmMonitorRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    protocolType?: string;
    interval?: number;
    evaluationCount?: number;
    timeout?: number;
    monitorExtendInfo?: string;
    ispCityNode?: AddGtmMonitorRequestIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmMonitorResponseBody extends $tea.Model {
    requestId?: string;
    monitorConfigId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmMonitorResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddGtmMonitorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmRecoveryPlanRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    name?: string;
    remark?: string;
    faultAddrPool?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmRecoveryPlanResponseBody extends $tea.Model {
    recoveryPlanId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmRecoveryPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddGtmRecoveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindInstanceDomainsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    domainNames?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindInstanceDomainsResponseBody extends $tea.Model {
    requestId?: string;
    failedCount?: number;
    successCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindInstanceDomainsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BindInstanceDomainsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeDomainGroupRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeDomainGroupResponseBody extends $tea.Model {
    groupName?: string;
    requestId?: string;
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeDomainGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ChangeDomainGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeDomainOfDnsProductRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    newDomain?: string;
    force?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeDomainOfDnsProductResponseBody extends $tea.Model {
    requestId?: string;
    originalDomain?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeDomainOfDnsProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ChangeDomainOfDnsProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyGtmConfigRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    sourceId?: string;
    targetId?: string;
    copyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyGtmConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyGtmConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CopyGtmConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCustomLinesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    lineIds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCustomLinesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCustomLinesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteCustomLinesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsCacheDomainRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsCacheDomainResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsCacheDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDnsCacheDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsGtmAccessStrategyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDnsGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsGtmAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsGtmAddressPoolResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDnsGtmAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDnsGtmAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainResponseBody extends $tea.Model {
    requestId?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainGroupRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainGroupResponseBody extends $tea.Model {
    groupName?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDomainGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainRecordRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainRecordResponseBody extends $tea.Model {
    requestId?: string;
    recordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDomainRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmAccessStrategyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmAddressPoolResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteGtmAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmRecoveryPlanRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recoveryPlanId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmRecoveryPlanResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGtmRecoveryPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteGtmRecoveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubDomainRecordsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    RR?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubDomainRecordsResponseBody extends $tea.Model {
    RR?: string;
    totalCount?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubDomainRecordsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteSubDomainRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultCountRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    taskId?: number;
    batchType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultCountResponseBody extends $tea.Model {
    status?: number;
    totalCount?: number;
    taskId?: number;
    requestId?: string;
    failedCount?: number;
    successCount?: number;
    batchType?: string;
    reason?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultCountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeBatchResultCountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultDetailRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    taskId?: number;
    batchType?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultDetailResponseBody extends $tea.Model {
    totalCount?: number;
    batchResultDetails?: DescribeBatchResultDetailResponseBodyBatchResultDetails;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeBatchResultDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLineRequest extends $tea.Model {
    lineId?: number;
    lang?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLineResponseBody extends $tea.Model {
    requestId?: string;
    ipSegmentList?: DescribeCustomLineResponseBodyIpSegmentList[];
    domainName?: string;
    id?: number;
    code?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLineResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeCustomLineResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLinesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLinesResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    customLines?: DescribeCustomLinesResponseBodyCustomLines[];
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLinesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeCustomLinesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsCacheDomainsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    keyword?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsCacheDomainsResponseBody extends $tea.Model {
    domains?: DescribeDnsCacheDomainsResponseBodyDomains[];
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsCacheDomainsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsCacheDomainsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    pageNumber?: number;
    pageSize?: number;
    strategyMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    strategies?: DescribeDnsGtmAccessStrategiesResponseBodyStrategies;
    totalPages?: number;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmAccessStrategiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponseBody extends $tea.Model {
    failoverMinAvailableAddrNum?: number;
    defaultAddrPoolType?: string;
    defaultAvailableAddrNum?: number;
    strategyId?: string;
    failoverAddrPoolGroupStatus?: string;
    failoverAvailableAddrNum?: number;
    failoverLbaStrategy?: string;
    defaultMaxReturnAddrNum?: number;
    strategyMode?: string;
    createTimestamp?: number;
    defaultLbaStrategy?: string;
    defaultAddrPoolGroupStatus?: string;
    failoverAddrPoolType?: string;
    requestId?: string;
    instanceId?: string;
    failoverAddrPools?: DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPools;
    defaultLatencyOptimization?: string;
    effectiveAddrPoolGroupType?: string;
    createTime?: string;
    defaultAddrPools?: DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPools;
    defaultMinAvailableAddrNum?: number;
    failoverLatencyOptimization?: string;
    strategyName?: string;
    failoverMaxReturnAddrNum?: number;
    accessMode?: string;
    lines?: DescribeDnsGtmAccessStrategyResponseBodyLines;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    strategyMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBody extends $tea.Model {
    selectedDomainLines?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedDomainLines;
    domainAddrPools?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPools;
    ipv4AddrPools?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPools;
    requestId?: string;
    selectedIpv4Lines?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv4Lines;
    ipv6AddrPools?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPools;
    suggestSetDefaultLine?: boolean;
    selectedIpv6Lines?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv6Lines;
    lines?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLines;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmAccessStrategyAvailableConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddrAttributeInfoRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    type?: string;
    addrs?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddrAttributeInfoResponseBody extends $tea.Model {
    requestId?: string;
    addr?: DescribeDnsGtmAddrAttributeInfoResponseBodyAddr;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddrAttributeInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmAddrAttributeInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddressPoolAvailableConfigRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddressPoolAvailableConfigResponseBody extends $tea.Model {
    requestId?: string;
    attributeInfos?: DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfos;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddressPoolAvailableConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmAddressPoolAvailableConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAvailableAlertGroupRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAvailableAlertGroupResponseBody extends $tea.Model {
    requestId?: string;
    availableAlertGroup?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAvailableAlertGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmAvailableAlertGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceResponseBody extends $tea.Model {
    expireTimestamp?: number;
    requestId?: string;
    resourceGroupId?: string;
    instanceId?: string;
    taskQuota?: number;
    config?: DescribeDnsGtmInstanceResponseBodyConfig;
    createTime?: string;
    smsQuota?: number;
    versionCode?: string;
    paymentType?: string;
    expireTime?: string;
    createTimestamp?: number;
    usedQuota?: DescribeDnsGtmInstanceResponseBodyUsedQuota;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolResponseBody extends $tea.Model {
    addrs?: DescribeDnsGtmInstanceAddressPoolResponseBodyAddrs;
    requestId?: string;
    lbaStrategy?: string;
    createTime?: string;
    addrCount?: number;
    name?: string;
    type?: string;
    updateTime?: string;
    addrPoolId?: string;
    updateTimestamp?: number;
    monitorConfigId?: string;
    monitorStatus?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmInstanceAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolsRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolsResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    totalItems?: number;
    addrPools?: DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPools;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmInstanceAddressPoolsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstancesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    keyword?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstancesResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    gtmInstances?: DescribeDnsGtmInstancesResponseBodyGtmInstances[];
    totalPages?: number;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceStatusRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceStatusResponseBody extends $tea.Model {
    strategyNotAvailableNum?: number;
    addrAvailableNum?: number;
    requestId?: string;
    switchToFailoverStrategyNum?: number;
    addrNotAvailableNum?: number;
    addrPoolGroupNotAvailableNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmInstanceStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceSystemCnameRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceSystemCnameResponseBody extends $tea.Model {
    systemCname?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceSystemCnameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmInstanceSystemCnameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmLogsRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    keyword?: string;
    pageNumber?: number;
    pageSize?: number;
    startTimestamp?: number;
    endTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmLogsResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    logs?: DescribeDnsGtmLogsResponseBodyLogs;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBody extends $tea.Model {
    ipv4IspCityNodes?: DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodes;
    domainIpv4IspCityNodes?: DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodes;
    requestId?: string;
    domainIpv6IspCityNodes?: DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodes;
    ipv6IspCityNodes?: DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodes;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmMonitorAvailableConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorConfigRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    monitorConfigId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorConfigResponseBody extends $tea.Model {
    requestId?: string;
    timeout?: number;
    protocolType?: string;
    ispCityNodes?: DescribeDnsGtmMonitorConfigResponseBodyIspCityNodes;
    createTime?: string;
    updateTime?: string;
    evaluationCount?: number;
    updateTimestamp?: number;
    monitorExtendInfo?: string;
    monitorConfigId?: string;
    createTimestamp?: number;
    interval?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsGtmMonitorConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstanceRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstanceResponseBody extends $tea.Model {
    monitorNodeCount?: number;
    inBlackHole?: boolean;
    bindDomainCount?: number;
    regionLines?: boolean;
    bindCount?: number;
    endTime?: string;
    startTimestamp?: number;
    ISPLines?: string;
    endTimestamp?: number;
    dnsServers?: DescribeDnsProductInstanceResponseBodyDnsServers;
    DDosDefendQuery?: number;
    dnsSecurity?: string;
    domainType?: string;
    URLForwardCount?: number;
    TTLMinValue?: number;
    paymentType?: string;
    versionName?: string;
    overseaLine?: string;
    ISPRegionLines?: string;
    gslb?: boolean;
    bindUsedCount?: number;
    requestId?: string;
    dnsSLBCount?: number;
    instanceId?: string;
    monitorTaskCount?: number;
    startTime?: string;
    DDosDefendFlow?: number;
    monitorFrequency?: number;
    searchEngineLines?: string;
    bindDomainUsedCount?: number;
    versionCode?: string;
    overseaDDosDefendFlow?: number;
    inClean?: boolean;
    subDomainLevel?: number;
    domain?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsProductInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstancesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    versionCode?: string;
    domainType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstancesResponseBody extends $tea.Model {
    totalCount?: number;
    domainType?: string;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    dnsProducts?: DescribeDnsProductInstancesResponseBodyDnsProducts;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDnsProductInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDNSSLBSubDomainsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    pageNumber?: number;
    pageSize?: number;
    rr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDNSSLBSubDomainsResponseBody extends $tea.Model {
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    slbSubDomains?: DescribeDNSSLBSubDomainsResponseBodySlbSubDomains;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDNSSLBSubDomainsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDNSSLBSubDomainsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohAccountStatisticsRequest extends $tea.Model {
    lang?: string;
    startDate?: string;
    endDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohAccountStatisticsResponseBody extends $tea.Model {
    requestId?: string;
    statistics?: DescribeDohAccountStatisticsResponseBodyStatistics[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohAccountStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDohAccountStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsRequest extends $tea.Model {
    lang?: string;
    domainName?: string;
    startDate?: string;
    endDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsResponseBody extends $tea.Model {
    requestId?: string;
    statistics?: DescribeDohDomainStatisticsResponseBodyStatistics[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDohDomainStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsSummaryRequest extends $tea.Model {
    lang?: string;
    pageNumber?: number;
    pageSize?: number;
    startDate?: string;
    endDate?: string;
    orderBy?: string;
    direction?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsSummaryResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    totalItems?: number;
    statistics?: DescribeDohDomainStatisticsSummaryResponseBodyStatistics[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsSummaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDohDomainStatisticsSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsRequest extends $tea.Model {
    lang?: string;
    subDomain?: string;
    startDate?: string;
    endDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsResponseBody extends $tea.Model {
    requestId?: string;
    statistics?: DescribeDohSubDomainStatisticsResponseBodyStatistics[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDohSubDomainStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsSummaryRequest extends $tea.Model {
    lang?: string;
    pageNumber?: number;
    pageSize?: number;
    startDate?: string;
    endDate?: string;
    orderBy?: string;
    direction?: string;
    subDomain?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsSummaryResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    totalItems?: number;
    statistics?: DescribeDohSubDomainStatisticsSummaryResponseBodyStatistics[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsSummaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDohSubDomainStatisticsSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohUserInfoRequest extends $tea.Model {
    lang?: string;
    startDate?: string;
    endDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohUserInfoResponseBody extends $tea.Model {
    requestId?: string;
    subDomainCount?: number;
    pdnsId?: number;
    domainCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohUserInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDohUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainDnssecInfoRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainDnssecInfoResponseBody extends $tea.Model {
    status?: string;
    requestId?: string;
    digest?: string;
    domainName?: string;
    publicKey?: string;
    digestType?: string;
    dsRecord?: string;
    keyTag?: string;
    flags?: string;
    algorithm?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainDnssecInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainDnssecInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainGroupsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    keyWord?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainGroupsResponseBody extends $tea.Model {
    domainGroups?: DescribeDomainGroupsResponseBodyDomainGroups;
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainGroupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainInfoRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    needDetailAttributes?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainInfoResponseBody extends $tea.Model {
    recordLineTreeJson?: string;
    groupName?: string;
    inBlackHole?: boolean;
    regionLines?: boolean;
    slaveDns?: boolean;
    aliDomain?: boolean;
    requestId?: string;
    resourceGroupId?: string;
    instanceId?: string;
    domainName?: string;
    createTime?: string;
    punyCode?: string;
    dnsServers?: DescribeDomainInfoResponseBodyDnsServers;
    remark?: string;
    groupId?: string;
    versionCode?: string;
    recordLines?: DescribeDomainInfoResponseBodyRecordLines;
    domainId?: string;
    availableTtls?: DescribeDomainInfoResponseBodyAvailableTtls;
    minTtl?: number;
    inClean?: boolean;
    versionName?: string;
    lineType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainLogsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    keyWord?: string;
    groupId?: string;
    pageNumber?: number;
    pageSize?: number;
    startDate?: string;
    endDate?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainLogsResponseBody extends $tea.Model {
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    domainLogs?: DescribeDomainLogsResponseBodyDomainLogs;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainNsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    domainType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainNsResponseBody extends $tea.Model {
    allAliDns?: boolean;
    requestId?: string;
    expectDnsServers?: DescribeDomainNsResponseBodyExpectDnsServers;
    dnsServers?: DescribeDomainNsResponseBodyDnsServers;
    includeAliDns?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainNsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainNsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordInfoRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordInfoResponseBody extends $tea.Model {
    status?: string;
    RR?: string;
    groupName?: string;
    requestId?: string;
    domainName?: string;
    priority?: number;
    punyCode?: string;
    TTL?: number;
    groupId?: string;
    line?: string;
    locked?: boolean;
    type?: string;
    domainId?: string;
    value?: string;
    recordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainRecordInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    pageNumber?: number;
    pageSize?: number;
    keyWord?: string;
    RRKeyWord?: string;
    typeKeyWord?: string;
    valueKeyWord?: string;
    orderBy?: string;
    direction?: string;
    searchMode?: string;
    groupId?: number;
    type?: string;
    line?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordsResponseBody extends $tea.Model {
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    domainRecords?: DescribeDomainRecordsResponseBodyDomainRecords;
    pageNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    keyWord?: string;
    groupId?: string;
    pageNumber?: number;
    pageSize?: number;
    searchMode?: string;
    resourceGroupId?: string;
    orderBy?: string;
    direction?: string;
    starmark?: boolean;
    startDate?: string;
    endDate?: string;
    tag?: DescribeDomainsRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsResponseBody extends $tea.Model {
    domains?: DescribeDomainsResponseBodyDomains;
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    startDate?: string;
    endDate?: string;
    domainType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsResponseBody extends $tea.Model {
    requestId?: string;
    statistics?: DescribeDomainStatisticsResponseBodyStatistics;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsSummaryRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    startDate?: string;
    endDate?: string;
    orderBy?: string;
    direction?: string;
    searchMode?: string;
    keyword?: string;
    threshold?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsSummaryResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    totalItems?: number;
    statistics?: DescribeDomainStatisticsSummaryResponseBodyStatistics;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsSummaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeDomainStatisticsSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategiesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategiesResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    strategies?: DescribeGtmAccessStrategiesResponseBodyStrategies;
    totalPages?: number;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategiesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmAccessStrategiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyResponseBody extends $tea.Model {
    requestId?: string;
    instanceId?: string;
    strategyId?: string;
    defaultAddrPoolStatus?: string;
    failoverAddrPoolId?: string;
    accessStatus?: string;
    defaultAddrPoolMonitorStatus?: string;
    defaultAddrPoolName?: string;
    defultAddrPoolId?: string;
    strategyName?: string;
    failoverAddrPoolStatus?: string;
    accessMode?: string;
    strategyMode?: string;
    failoverAddrPoolMonitorStatus?: string;
    failoverAddrPoolName?: string;
    lines?: DescribeGtmAccessStrategyResponseBodyLines;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyAvailableConfigRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyAvailableConfigResponseBody extends $tea.Model {
    requestId?: string;
    addrPools?: DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPools;
    lines?: DescribeGtmAccessStrategyAvailableConfigResponseBodyLines;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyAvailableConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmAccessStrategyAvailableConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAvailableAlertGroupRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAvailableAlertGroupResponseBody extends $tea.Model {
    requestId?: string;
    availableAlertGroup?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAvailableAlertGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmAvailableAlertGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    needDetailAttributes?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceResponseBody extends $tea.Model {
    expireTimestamp?: number;
    userDomainName?: string;
    requestId?: string;
    lbaStrategy?: string;
    instanceId?: string;
    createTime?: string;
    cnameMode?: string;
    ttl?: number;
    cname?: string;
    instanceName?: string;
    versionCode?: string;
    alertGroup?: string;
    addressPoolNum?: number;
    accessStrategyNum?: number;
    expireTime?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolResponseBody extends $tea.Model {
    status?: string;
    addrs?: DescribeGtmInstanceAddressPoolResponseBodyAddrs;
    requestId?: string;
    createTime?: string;
    addrCount?: number;
    name?: string;
    type?: string;
    updateTime?: string;
    addrPoolId?: string;
    updateTimestamp?: number;
    monitorConfigId?: string;
    minAvailableAddrNum?: number;
    monitorStatus?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmInstanceAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolsRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolsResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    totalItems?: number;
    addrPools?: DescribeGtmInstanceAddressPoolsResponseBodyAddrPools;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmInstanceAddressPoolsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstancesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    keyword?: string;
    resourceGroupId?: string;
    needDetailAttributes?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstancesResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    gtmInstances?: DescribeGtmInstancesResponseBodyGtmInstances;
    totalPages?: number;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceStatusRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceStatusResponseBody extends $tea.Model {
    status?: string;
    strategyNotAvailableNum?: number;
    requestId?: string;
    switchToFailoverStrategyNum?: number;
    statusReason?: string;
    addrNotAvailableNum?: number;
    addrPoolNotAvailableNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmInstanceStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceSystemCnameRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceSystemCnameResponseBody extends $tea.Model {
    systemCname?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceSystemCnameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmInstanceSystemCnameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmLogsRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    instanceId?: string;
    keyword?: string;
    pageNumber?: number;
    pageSize?: number;
    startTimestamp?: number;
    endTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmLogsResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    logs?: DescribeGtmLogsResponseBodyLogs;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorAvailableConfigRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorAvailableConfigResponseBody extends $tea.Model {
    requestId?: string;
    ispCityNodes?: DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodes;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorAvailableConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmMonitorAvailableConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorConfigRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    monitorConfigId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorConfigResponseBody extends $tea.Model {
    requestId?: string;
    timeout?: number;
    protocolType?: string;
    ispCityNodes?: DescribeGtmMonitorConfigResponseBodyIspCityNodes;
    createTime?: string;
    updateTime?: string;
    evaluationCount?: number;
    updateTimestamp?: number;
    monitorExtendInfo?: string;
    monitorConfigId?: string;
    createTimestamp?: number;
    interval?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmMonitorConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    recoveryPlanId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanResponseBody extends $tea.Model {
    status?: string;
    lastRollbackTime?: string;
    faultAddrPoolNum?: number;
    faultAddrPools?: DescribeGtmRecoveryPlanResponseBodyFaultAddrPools;
    lastExecuteTime?: string;
    requestId?: string;
    createTime?: string;
    lastExecuteTimestamp?: number;
    remark?: string;
    name?: string;
    recoveryPlanId?: number;
    updateTime?: string;
    updateTimestamp?: number;
    lastRollbackTimestamp?: number;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmRecoveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanAvailableConfigRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanAvailableConfigResponseBody extends $tea.Model {
    instances?: DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstances;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanAvailableConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmRecoveryPlanAvailableConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlansRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    keyword?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlansResponseBody extends $tea.Model {
    recoveryPlans?: DescribeGtmRecoveryPlansResponseBodyRecoveryPlans;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlansResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeGtmRecoveryPlansResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceDomainsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceDomainsResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    instanceDomains?: DescribeInstanceDomainsResponseBodyInstanceDomains[];
    totalPages?: number;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceDomainsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeInstanceDomainsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordLogsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    pageNumber?: number;
    pageSize?: number;
    keyWord?: string;
    startDate?: string;
    endDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordLogsResponseBody extends $tea.Model {
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    recordLogs?: DescribeRecordLogsResponseBodyRecordLogs;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeRecordLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    startDate?: string;
    endDate?: string;
    domainName?: string;
    rr?: string;
    domainType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsResponseBody extends $tea.Model {
    requestId?: string;
    statistics?: DescribeRecordStatisticsResponseBodyStatistics;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeRecordStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsSummaryRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    startDate?: string;
    endDate?: string;
    orderBy?: string;
    direction?: string;
    domainName?: string;
    searchMode?: string;
    keyword?: string;
    threshold?: number;
    domainType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsSummaryResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    totalPages?: number;
    totalItems?: number;
    statistics?: DescribeRecordStatisticsSummaryResponseBodyStatistics;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsSummaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeRecordStatisticsSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSubDomainRecordsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    subDomain?: string;
    pageNumber?: number;
    pageSize?: number;
    type?: string;
    line?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSubDomainRecordsResponseBody extends $tea.Model {
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    domainRecords?: DescribeSubDomainRecordsResponseBodyDomainRecords;
    pageNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSubDomainRecordsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeSubDomainRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportLinesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportLinesResponseBody extends $tea.Model {
    recordLines?: DescribeSupportLinesResponseBodyRecordLines;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportLinesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeSupportLinesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    resourceType?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponseBody extends $tea.Model {
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    tags?: DescribeTagsResponseBodyTags[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTransferDomainsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    pageNumber?: number;
    pageSize?: number;
    transferType?: string;
    domainName?: string;
    fromUserId?: number;
    targetUserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTransferDomainsResponseBody extends $tea.Model {
    totalCount?: number;
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    domainTransfers?: DescribeTransferDomainsResponseBodyDomainTransfers;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTransferDomainsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DescribeTransferDomainsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteGtmRecoveryPlanRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recoveryPlanId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteGtmRecoveryPlanResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteGtmRecoveryPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ExecuteGtmRecoveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMainDomainNameRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    inputString?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMainDomainNameResponseBody extends $tea.Model {
    RR?: string;
    requestId?: string;
    domainName?: string;
    domainLevel?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMainDomainNameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetMainDomainNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTxtRecordForVerifyRequest extends $tea.Model {
    lang?: string;
    domainName?: string;
    type?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTxtRecordForVerifyResponseBody extends $tea.Model {
    RR?: string;
    requestId?: string;
    domainName?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTxtRecordForVerifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetTxtRecordForVerifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    resourceType?: string;
    nextToken?: string;
    size?: number;
    tag?: ListTagResourcesRequestTag[];
    resourceId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBody extends $tea.Model {
    nextToken?: string;
    requestId?: string;
    tagResources?: ListTagResourcesResponseBodyTagResources[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListTagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHichinaDomainDNSRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHichinaDomainDNSResponseBody extends $tea.Model {
    requestId?: string;
    newDnsServers?: ModifyHichinaDomainDNSResponseBodyNewDnsServers;
    originalDnsServers?: ModifyHichinaDomainDNSResponseBodyOriginalDnsServers;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHichinaDomainDNSResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ModifyHichinaDomainDNSResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDomainResourceGroupRequest extends $tea.Model {
    lang?: string;
    resourceId?: string;
    newResourceGroupId?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDomainResourceGroupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDomainResourceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: MoveDomainResourceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveGtmResourceGroupRequest extends $tea.Model {
    lang?: string;
    resourceId?: string;
    newResourceGroupId?: string;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveGtmResourceGroupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveGtmResourceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: MoveGtmResourceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OperateBatchDomainRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    type?: string;
    domainRecordInfo?: OperateBatchDomainRequestDomainRecordInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OperateBatchDomainResponseBody extends $tea.Model {
    taskId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OperateBatchDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: OperateBatchDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreviewGtmRecoveryPlanRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recoveryPlanId?: number;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreviewGtmRecoveryPlanResponseBody extends $tea.Model {
    pageSize?: number;
    requestId?: string;
    pageNumber?: number;
    previews?: PreviewGtmRecoveryPlanResponseBodyPreviews;
    totalPages?: number;
    totalItems?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreviewGtmRecoveryPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PreviewGtmRecoveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveDomainRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveDomainResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RetrieveDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackGtmRecoveryPlanRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recoveryPlanId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackGtmRecoveryPlanResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackGtmRecoveryPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RollbackGtmRecoveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDnsGtmAccessModeRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    accessMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDnsGtmAccessModeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDnsGtmAccessModeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDnsGtmAccessModeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDnsGtmMonitorStatusRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    monitorConfigId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDnsGtmMonitorStatusResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDnsGtmMonitorStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDnsGtmMonitorStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDNSSLBStatusRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    subDomain?: string;
    open?: boolean;
    domainName?: string;
    type?: string;
    line?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDNSSLBStatusResponseBody extends $tea.Model {
    requestId?: string;
    recordCount?: number;
    open?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDNSSLBStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDNSSLBStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDomainDnssecStatusRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    domainName?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDomainDnssecStatusResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDomainDnssecStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDomainDnssecStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDomainRecordStatusRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recordId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDomainRecordStatusResponseBody extends $tea.Model {
    status?: string;
    requestId?: string;
    recordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDomainRecordStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDomainRecordStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetGtmAccessModeRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    accessMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetGtmAccessModeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetGtmAccessModeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetGtmAccessModeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetGtmMonitorStatusRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    monitorConfigId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetGtmMonitorStatusResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetGtmMonitorStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetGtmMonitorStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDnsGtmInstanceStrategyModeRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    strategyMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDnsGtmInstanceStrategyModeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDnsGtmInstanceStrategyModeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SwitchDnsGtmInstanceStrategyModeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    resourceType?: string;
    overWrite?: boolean;
    tag?: TagResourcesRequestTag[];
    resourceId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: TagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferDomainRequest extends $tea.Model {
    lang?: string;
    domainNames?: string;
    remark?: string;
    targetUserId?: number;
    userClientIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferDomainResponseBody extends $tea.Model {
    taskId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: TransferDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindInstanceDomainsRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainNames?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindInstanceDomainsResponseBody extends $tea.Model {
    requestId?: string;
    failedCount?: number;
    successCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindInstanceDomainsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UnbindInstanceDomainsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    resourceType?: string;
    all?: boolean;
    resourceId?: string[];
    tagKey?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UntagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCustomLineRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    lineName?: string;
    lineId?: number;
    ipSegment?: UpdateCustomLineRequestIpSegment[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCustomLineResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCustomLineResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateCustomLineResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsCacheDomainRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    instanceId?: string;
    cacheTtlMin?: number;
    cacheTtlMax?: number;
    sourceProtocol?: string;
    sourceEdns?: string;
    sourceDnsServer?: UpdateDnsCacheDomainRequestSourceDnsServer[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsCacheDomainResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsCacheDomainResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDnsCacheDomainResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsCacheDomainRemarkRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsCacheDomainRemarkResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsCacheDomainRemarkResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDnsCacheDomainRemarkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    strategyName?: string;
    lines?: string;
    defaultAddrPoolType?: string;
    defaultLbaStrategy?: string;
    defaultMinAvailableAddrNum?: number;
    defaultMaxReturnAddrNum?: number;
    defaultLatencyOptimization?: string;
    failoverAddrPoolType?: string;
    failoverLbaStrategy?: string;
    failoverMinAvailableAddrNum?: number;
    failoverMaxReturnAddrNum?: number;
    failoverLatencyOptimization?: string;
    defaultAddrPool?: UpdateDnsGtmAccessStrategyRequestDefaultAddrPool[];
    failoverAddrPool?: UpdateDnsGtmAccessStrategyRequestFailoverAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAccessStrategyResponseBody extends $tea.Model {
    requestId?: string;
    strategyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDnsGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    name?: string;
    lbaStrategy?: string;
    addr?: UpdateDnsGtmAddressPoolRequestAddr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAddressPoolResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDnsGtmAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmInstanceGlobalConfigRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    instanceName?: string;
    ttl?: number;
    publicCnameMode?: string;
    publicUserDomainName?: string;
    publicZoneName?: string;
    alertGroup?: string;
    cnameType?: string;
    alertConfig?: UpdateDnsGtmInstanceGlobalConfigRequestAlertConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmInstanceGlobalConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmInstanceGlobalConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDnsGtmInstanceGlobalConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmMonitorRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    monitorConfigId?: string;
    protocolType?: string;
    interval?: number;
    evaluationCount?: number;
    timeout?: number;
    monitorExtendInfo?: string;
    ispCityNode?: UpdateDnsGtmMonitorRequestIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmMonitorResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmMonitorResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDnsGtmMonitorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDNSSLBWeightRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recordId?: string;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDNSSLBWeightResponseBody extends $tea.Model {
    requestId?: string;
    recordId?: string;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDNSSLBWeightResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDNSSLBWeightResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainGroupRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainGroupResponseBody extends $tea.Model {
    groupName?: string;
    requestId?: string;
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDomainGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRecordRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recordId?: string;
    RR?: string;
    type?: string;
    value?: string;
    TTL?: number;
    priority?: number;
    line?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRecordResponseBody extends $tea.Model {
    requestId?: string;
    recordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDomainRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRecordRemarkRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recordId?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRecordRemarkResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRecordRemarkResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDomainRecordRemarkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRemarkRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    domainName?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRemarkResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDomainRemarkResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDomainRemarkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmAccessStrategyRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    strategyId?: string;
    strategyName?: string;
    defaultAddrPoolId?: string;
    failoverAddrPoolId?: string;
    accessLines?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmAccessStrategyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmAccessStrategyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateGtmAccessStrategyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmAddressPoolRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    addrPoolId?: string;
    name?: string;
    type?: string;
    minAvailableAddrNum?: number;
    addr?: UpdateGtmAddressPoolRequestAddr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmAddressPoolResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmAddressPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateGtmAddressPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmInstanceGlobalConfigRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    instanceId?: string;
    instanceName?: string;
    ttl?: number;
    userDomainName?: string;
    lbaStrategy?: string;
    alertGroup?: string;
    cnameMode?: string;
    cnameCustomDomainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmInstanceGlobalConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmInstanceGlobalConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateGtmInstanceGlobalConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmMonitorRequest extends $tea.Model {
    userClientIp?: string;
    lang?: string;
    monitorConfigId?: string;
    protocolType?: string;
    interval?: number;
    evaluationCount?: number;
    timeout?: number;
    monitorExtendInfo?: string;
    ispCityNode?: UpdateGtmMonitorRequestIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmMonitorResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmMonitorResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateGtmMonitorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmRecoveryPlanRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    recoveryPlanId?: number;
    name?: string;
    remark?: string;
    faultAddrPool?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmRecoveryPlanResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmRecoveryPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateGtmRecoveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateDnsGtmAttributeInfoRequest extends $tea.Model {
    lang?: string;
    userClientIp?: string;
    lineCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateDnsGtmAttributeInfoResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateDnsGtmAttributeInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ValidateDnsGtmAttributeInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomLineRequestIpSegment extends $tea.Model {
    endIp?: string;
    startIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsCacheDomainRequestSourceDnsServer extends $tea.Model {
    host?: string;
    port?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAccessStrategyRequestDefaultAddrPool extends $tea.Model {
    lbaWeight?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAccessStrategyRequestFailoverAddrPool extends $tea.Model {
    lbaWeight?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAddressPoolRequestAddr extends $tea.Model {
    attributeInfo?: string;
    remark?: string;
    lbaWeight?: number;
    addr?: string;
    mode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmAddressPoolRequestIspCityNode extends $tea.Model {
    cityCode?: string;
    ispCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDnsGtmMonitorRequestIspCityNode extends $tea.Model {
    cityCode?: string;
    ispCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainResponseBodyDnsServers extends $tea.Model {
    dnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAddressPoolRequestAddr extends $tea.Model {
    value?: string;
    lbaWeight?: number;
    mode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmAddressPoolRequestIspCityNode extends $tea.Model {
    cityCode?: string;
    ispCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGtmMonitorRequestIspCityNode extends $tea.Model {
    cityCode?: string;
    ispCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultDetailResponseBodyBatchResultDetailsBatchResultDetail extends $tea.Model {
    status?: boolean;
    type?: string;
    domain?: string;
    remark?: string;
    recordId?: string;
    rr?: string;
    priority?: string;
    rrStatus?: string;
    operateDateStr?: string;
    newValue?: string;
    value?: string;
    ttl?: string;
    batchType?: string;
    line?: string;
    newRr?: string;
    reason?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBatchResultDetailResponseBodyBatchResultDetails extends $tea.Model {
    batchResultDetail?: DescribeBatchResultDetailResponseBodyBatchResultDetailsBatchResultDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLineResponseBodyIpSegmentList extends $tea.Model {
    endIp?: string;
    startIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustomLinesResponseBodyCustomLines extends $tea.Model {
    code?: string;
    name?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsCacheDomainsResponseBodyDomainsSourceDnsServers extends $tea.Model {
    host?: string;
    port?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsCacheDomainsResponseBodyDomains extends $tea.Model {
    sourceProtocol?: string;
    updateTime?: string;
    remark?: string;
    expireTime?: string;
    createTime?: string;
    instanceId?: string;
    sourceEdns?: string;
    domainName?: string;
    domainId?: string;
    updateTimestamp?: number;
    expireTimestamp?: number;
    cacheTtlMax?: number;
    cacheTtlMin?: number;
    versionCode?: string;
    sourceDnsServers?: DescribeDnsCacheDomainsResponseBodyDomainsSourceDnsServers[];
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPoolsEffectiveAddrPool extends $tea.Model {
    lbaWeight?: number;
    name?: string;
    addrCount?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPools extends $tea.Model {
    effectiveAddrPool?: DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPoolsEffectiveAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine extends $tea.Model {
    groupName?: string;
    lineCode?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLines extends $tea.Model {
    line?: DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategy extends $tea.Model {
    effectiveLbaStrategy?: string;
    strategyId?: string;
    strategyName?: string;
    effectiveAddrPoolGroupType?: string;
    createTime?: string;
    effectiveAddrPools?: DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyEffectiveAddrPools;
    createTimestamp?: number;
    effectiveAddrPoolType?: string;
    lines?: DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategyLines;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategiesResponseBodyStrategies extends $tea.Model {
    strategy?: DescribeDnsGtmAccessStrategiesResponseBodyStrategiesStrategy[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPoolsFailoverAddrPool extends $tea.Model {
    lbaWeight?: number;
    name?: string;
    addrCount?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPools extends $tea.Model {
    failoverAddrPool?: DescribeDnsGtmAccessStrategyResponseBodyFailoverAddrPoolsFailoverAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPoolsDefaultAddrPool extends $tea.Model {
    lbaWeight?: number;
    name?: string;
    addrCount?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPools extends $tea.Model {
    defaultAddrPool?: DescribeDnsGtmAccessStrategyResponseBodyDefaultAddrPoolsDefaultAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponseBodyLinesLine extends $tea.Model {
    groupName?: string;
    lineCode?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyResponseBodyLines extends $tea.Model {
    line?: DescribeDnsGtmAccessStrategyResponseBodyLinesLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedDomainLines extends $tea.Model {
    selectedDomainLine?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPoolsDomainAddrPool extends $tea.Model {
    name?: string;
    addrCount?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPools extends $tea.Model {
    domainAddrPool?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyDomainAddrPoolsDomainAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPoolsIpv4AddrPool extends $tea.Model {
    name?: string;
    addrCount?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPools extends $tea.Model {
    ipv4AddrPool?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv4AddrPoolsIpv4AddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv4Lines extends $tea.Model {
    selectedIpv4Line?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPoolsIpv6AddrPool extends $tea.Model {
    name?: string;
    addrCount?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPools extends $tea.Model {
    ipv6AddrPool?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyIpv6AddrPoolsIpv6AddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodySelectedIpv6Lines extends $tea.Model {
    selectedIpv6Line?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLinesLine extends $tea.Model {
    fatherCode?: string;
    groupName?: string;
    lineCode?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLines extends $tea.Model {
    line?: DescribeDnsGtmAccessStrategyAvailableConfigResponseBodyLinesLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddrAttributeInfo extends $tea.Model {
    fatherCode?: string;
    groupName?: string;
    lineCode?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddr extends $tea.Model {
    attributeInfo?: DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddrAttributeInfo;
    addr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddrAttributeInfoResponseBodyAddr extends $tea.Model {
    addr?: DescribeDnsGtmAddrAttributeInfoResponseBodyAddrAddr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfosAttributeInfo extends $tea.Model {
    fatherCode?: string;
    groupName?: string;
    lineCode?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfos extends $tea.Model {
    attributeInfo?: DescribeDnsGtmAddressPoolAvailableConfigResponseBodyAttributeInfosAttributeInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceResponseBodyConfigAlertConfigAlertConfig extends $tea.Model {
    smsNotice?: boolean;
    noticeType?: string;
    emailNotice?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceResponseBodyConfigAlertConfig extends $tea.Model {
    alertConfig?: DescribeDnsGtmInstanceResponseBodyConfigAlertConfigAlertConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceResponseBodyConfig extends $tea.Model {
    ttl?: number;
    alertGroup?: string;
    cnameType?: string;
    strategyMode?: string;
    instanceName?: string;
    publicCnameMode?: string;
    alertConfig?: DescribeDnsGtmInstanceResponseBodyConfigAlertConfig;
    publicUserDomainName?: string;
    pubicZoneName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceResponseBodyUsedQuota extends $tea.Model {
    emailUsedCount?: number;
    taskUsedCount?: number;
    smsUsedCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolResponseBodyAddrsAddr extends $tea.Model {
    updateTimestamp?: number;
    attributeInfo?: string;
    updateTime?: string;
    alertStatus?: string;
    remark?: string;
    lbaWeight?: number;
    addr?: string;
    createTime?: string;
    mode?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolResponseBodyAddrs extends $tea.Model {
    addr?: DescribeDnsGtmInstanceAddressPoolResponseBodyAddrsAddr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool extends $tea.Model {
    type?: string;
    updateTimestamp?: number;
    monitorStatus?: string;
    updateTime?: string;
    createTime?: string;
    addrPoolId?: string;
    lbaStrategy?: string;
    name?: string;
    addrCount?: number;
    monitorConfigId?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPools extends $tea.Model {
    addrPool?: DescribeDnsGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstancesResponseBodyGtmInstancesConfigAlertConfig extends $tea.Model {
    smsNotice?: string;
    noticeType?: string;
    emailNotice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstancesResponseBodyGtmInstancesConfig extends $tea.Model {
    ttl?: number;
    alertGroup?: string;
    publicZoneName?: string;
    cnameType?: string;
    strategyMode?: string;
    instanceName?: string;
    publicCnameMode?: string;
    alertConfig?: DescribeDnsGtmInstancesResponseBodyGtmInstancesConfigAlertConfig[];
    publicUserDomainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstancesResponseBodyGtmInstancesUsedQuota extends $tea.Model {
    emailUsedCount?: number;
    taskUsedCount?: number;
    smsUsedCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmInstancesResponseBodyGtmInstances extends $tea.Model {
    paymentType?: string;
    expireTime?: string;
    createTime?: string;
    smsQuota?: number;
    instanceId?: string;
    config?: DescribeDnsGtmInstancesResponseBodyGtmInstancesConfig;
    expireTimestamp?: number;
    resourceGroupId?: string;
    versionCode?: string;
    usedQuota?: DescribeDnsGtmInstancesResponseBodyGtmInstancesUsedQuota;
    taskQuota?: number;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmLogsResponseBodyLogsLog extends $tea.Model {
    operTimestamp?: number;
    entityId?: string;
    entityType?: string;
    operTime?: string;
    operAction?: string;
    content?: string;
    entityName?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmLogsResponseBodyLogs extends $tea.Model {
    log?: DescribeDnsGtmLogsResponseBodyLogsLog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodesIpv4IspCityNode extends $tea.Model {
    cityCode?: string;
    groupName?: string;
    ispCode?: string;
    cityName?: string;
    ispName?: string;
    groupType?: string;
    defaultSelected?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodes extends $tea.Model {
    ipv4IspCityNode?: DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv4IspCityNodesIpv4IspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodesDomainIpv4IspCityNode extends $tea.Model {
    cityCode?: string;
    groupName?: string;
    ispCode?: string;
    cityName?: string;
    ispName?: string;
    groupType?: string;
    defaultSelected?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodes extends $tea.Model {
    domainIpv4IspCityNode?: DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv4IspCityNodesDomainIpv4IspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodesDomainIpv6IspCityNode extends $tea.Model {
    cityCode?: string;
    groupName?: string;
    ispCode?: string;
    cityName?: string;
    ispName?: string;
    groupType?: string;
    defaultSelected?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodes extends $tea.Model {
    domainIpv6IspCityNode?: DescribeDnsGtmMonitorAvailableConfigResponseBodyDomainIpv6IspCityNodesDomainIpv6IspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodesIpv6IspCityNode extends $tea.Model {
    cityCode?: string;
    groupName?: string;
    ispCode?: string;
    cityName?: string;
    ispName?: string;
    groupType?: string;
    defaultSelected?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodes extends $tea.Model {
    ipv6IspCityNode?: DescribeDnsGtmMonitorAvailableConfigResponseBodyIpv6IspCityNodesIpv6IspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorConfigResponseBodyIspCityNodesIspCityNode extends $tea.Model {
    cityCode?: string;
    countryName?: string;
    ispCode?: string;
    cityName?: string;
    countryCode?: string;
    ispName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsGtmMonitorConfigResponseBodyIspCityNodes extends $tea.Model {
    ispCityNode?: DescribeDnsGtmMonitorConfigResponseBodyIspCityNodesIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstanceResponseBodyDnsServers extends $tea.Model {
    dnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstancesResponseBodyDnsProductsDnsProduct extends $tea.Model {
    overseaLine?: string;
    paymentType?: string;
    monitorNodeCount?: number;
    inBlackHole?: boolean;
    bindDomainUsedCount?: number;
    ISPRegionLines?: string;
    TTLMinValue?: number;
    ISPLines?: string;
    searchEngineLines?: string;
    endTimestamp?: number;
    versionName?: string;
    versionCode?: string;
    monitorTaskCount?: number;
    bindUsedCount?: number;
    domain?: string;
    monitorFrequency?: number;
    inClean?: boolean;
    URLForwardCount?: number;
    startTimestamp?: number;
    DDosDefendQuery?: number;
    instanceId?: string;
    DDosDefendFlow?: number;
    bindCount?: number;
    subDomainLevel?: number;
    bindDomainCount?: number;
    endTime?: string;
    startTime?: string;
    overseaDDosDefendFlow?: number;
    regionLines?: boolean;
    gslb?: boolean;
    dnsSecurity?: string;
    dnsSLBCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDnsProductInstancesResponseBodyDnsProducts extends $tea.Model {
    dnsProduct?: DescribeDnsProductInstancesResponseBodyDnsProductsDnsProduct[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithmsLineAlgorithm extends $tea.Model {
    line?: string;
    open?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithms extends $tea.Model {
    lineAlgorithm?: DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithmsLineAlgorithm[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomain extends $tea.Model {
    type?: string;
    recordCount?: number;
    open?: boolean;
    subDomain?: string;
    lineAlgorithms?: DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomainLineAlgorithms;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDNSSLBSubDomainsResponseBodySlbSubDomains extends $tea.Model {
    slbSubDomain?: DescribeDNSSLBSubDomainsResponseBodySlbSubDomainsSlbSubDomain[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohAccountStatisticsResponseBodyStatistics extends $tea.Model {
    v6HttpCount?: number;
    v4HttpsCount?: number;
    timestamp?: number;
    totalCount?: number;
    v4HttpCount?: number;
    v6HttpsCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsResponseBodyStatistics extends $tea.Model {
    v6HttpCount?: number;
    v4HttpsCount?: number;
    timestamp?: number;
    totalCount?: number;
    v4HttpCount?: number;
    v6HttpsCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohDomainStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    v6HttpCount?: number;
    v4HttpsCount?: number;
    ipCount?: number;
    totalCount?: number;
    httpCount?: number;
    domainName?: string;
    httpsCount?: number;
    v4HttpCount?: number;
    v6HttpsCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsResponseBodyStatistics extends $tea.Model {
    v6HttpCount?: number;
    v4HttpsCount?: number;
    timestamp?: number;
    totalCount?: number;
    v4HttpCount?: number;
    v6HttpsCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDohSubDomainStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    v6HttpCount?: number;
    v4HttpsCount?: number;
    ipCount?: number;
    subDomain?: string;
    totalCount?: number;
    httpCount?: number;
    httpsCount?: number;
    v4HttpCount?: number;
    v6HttpsCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainGroupsResponseBodyDomainGroupsDomainGroup extends $tea.Model {
    groupId?: string;
    groupName?: string;
    domainCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainGroupsResponseBodyDomainGroups extends $tea.Model {
    domainGroup?: DescribeDomainGroupsResponseBodyDomainGroupsDomainGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainInfoResponseBodyDnsServers extends $tea.Model {
    dnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainInfoResponseBodyRecordLinesRecordLine extends $tea.Model {
    fatherCode?: string;
    lineDisplayName?: string;
    lineCode?: string;
    lineName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainInfoResponseBodyRecordLines extends $tea.Model {
    recordLine?: DescribeDomainInfoResponseBodyRecordLinesRecordLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainInfoResponseBodyAvailableTtls extends $tea.Model {
    availableTtl?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainLogsResponseBodyDomainLogsDomainLog extends $tea.Model {
    action?: string;
    actionTimestamp?: number;
    zoneId?: string;
    clientIp?: string;
    message?: string;
    actionTime?: string;
    domainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainLogsResponseBodyDomainLogs extends $tea.Model {
    domainLog?: DescribeDomainLogsResponseBodyDomainLogsDomainLog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainNsResponseBodyExpectDnsServers extends $tea.Model {
    expectDnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainNsResponseBodyDnsServers extends $tea.Model {
    dnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordsResponseBodyDomainRecordsRecord extends $tea.Model {
    status?: string;
    type?: string;
    remark?: string;
    TTL?: number;
    recordId?: string;
    priority?: number;
    RR?: string;
    domainName?: string;
    weight?: number;
    value?: string;
    line?: string;
    locked?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainRecordsResponseBodyDomainRecords extends $tea.Model {
    record?: DescribeDomainRecordsResponseBodyDomainRecordsRecord[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsRequestTag extends $tea.Model {
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsResponseBodyDomainsDomainTagsTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsResponseBodyDomainsDomainTags extends $tea.Model {
    tag?: DescribeDomainsResponseBodyDomainsDomainTagsTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsResponseBodyDomainsDomainDnsServers extends $tea.Model {
    dnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsResponseBodyDomainsDomain extends $tea.Model {
    remark?: string;
    createTime?: string;
    recordCount?: number;
    tags?: DescribeDomainsResponseBodyDomainsDomainTags;
    instanceId?: string;
    domainName?: string;
    domainId?: string;
    aliDomain?: boolean;
    groupId?: string;
    groupName?: string;
    resourceGroupId?: string;
    instanceEndTime?: string;
    instanceExpired?: boolean;
    versionName?: string;
    dnsServers?: DescribeDomainsResponseBodyDomainsDomainDnsServers;
    versionCode?: string;
    punyCode?: string;
    registrantEmail?: string;
    createTimestamp?: number;
    starmark?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainsResponseBodyDomains extends $tea.Model {
    domain?: DescribeDomainsResponseBodyDomainsDomain[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsResponseBodyStatisticsStatistic extends $tea.Model {
    timestamp?: number;
    count?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsResponseBodyStatistics extends $tea.Model {
    statistic?: DescribeDomainStatisticsResponseBodyStatisticsStatistic[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsSummaryResponseBodyStatisticsStatistic extends $tea.Model {
    domainName?: string;
    count?: number;
    domainType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDomainStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    statistic?: DescribeDomainStatisticsSummaryResponseBodyStatisticsStatistic[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine extends $tea.Model {
    groupName?: string;
    lineCode?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLines extends $tea.Model {
    line?: DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLinesLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategiesResponseBodyStrategiesStrategy extends $tea.Model {
    accessMode?: string;
    strategyName?: string;
    defaultAddrPoolMonitorStatus?: string;
    strategyMode?: string;
    createTime?: string;
    defaultAddrPoolStatus?: string;
    instanceId?: string;
    lines?: DescribeGtmAccessStrategiesResponseBodyStrategiesStrategyLines;
    failoverAddrPoolId?: string;
    defaultAddrPoolId?: string;
    strategyId?: string;
    failoverAddrPoolStatus?: string;
    accessStatus?: string;
    failoverAddrPoolMonitorStatus?: string;
    defaultAddrPoolName?: string;
    failoverAddrPoolName?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategiesResponseBodyStrategies extends $tea.Model {
    strategy?: DescribeGtmAccessStrategiesResponseBodyStrategiesStrategy[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyResponseBodyLinesLine extends $tea.Model {
    groupName?: string;
    lineCode?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyResponseBodyLines extends $tea.Model {
    line?: DescribeGtmAccessStrategyResponseBodyLinesLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPoolsAddrPool extends $tea.Model {
    addrPoolId?: string;
    addrPoolName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPools extends $tea.Model {
    addrPool?: DescribeGtmAccessStrategyAvailableConfigResponseBodyAddrPoolsAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyAvailableConfigResponseBodyLinesLine extends $tea.Model {
    status?: string;
    fatherCode?: string;
    lineCode?: string;
    groupName?: string;
    lineName?: string;
    groupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmAccessStrategyAvailableConfigResponseBodyLines extends $tea.Model {
    line?: DescribeGtmAccessStrategyAvailableConfigResponseBodyLinesLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolResponseBodyAddrsAddr extends $tea.Model {
    value?: string;
    updateTimestamp?: number;
    updateTime?: string;
    alertStatus?: string;
    lbaWeight?: number;
    createTime?: string;
    addrId?: number;
    mode?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolResponseBodyAddrs extends $tea.Model {
    addr?: DescribeGtmInstanceAddressPoolResponseBodyAddrsAddr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool extends $tea.Model {
    type?: string;
    status?: string;
    updateTime?: string;
    createTime?: string;
    monitorConfigId?: string;
    minAvailableAddrNum?: number;
    updateTimestamp?: number;
    monitorStatus?: string;
    addrPoolId?: string;
    name?: string;
    addrCount?: number;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstanceAddressPoolsResponseBodyAddrPools extends $tea.Model {
    addrPool?: DescribeGtmInstanceAddressPoolsResponseBodyAddrPoolsAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstancesResponseBodyGtmInstancesGtmInstance extends $tea.Model {
    expireTime?: string;
    accessStrategyNum?: number;
    createTime?: string;
    cnameMode?: string;
    instanceId?: string;
    expireTimestamp?: number;
    ttl?: number;
    alertGroup?: string;
    addressPoolNum?: number;
    instanceName?: string;
    lbaStrategy?: string;
    cname?: string;
    versionCode?: string;
    userDomainName?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmInstancesResponseBodyGtmInstances extends $tea.Model {
    gtmInstance?: DescribeGtmInstancesResponseBodyGtmInstancesGtmInstance[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmLogsResponseBodyLogsLog extends $tea.Model {
    operTimestamp?: number;
    entityId?: string;
    entityType?: string;
    operTime?: string;
    operIp?: string;
    operAction?: string;
    content?: string;
    entityName?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmLogsResponseBodyLogs extends $tea.Model {
    log?: DescribeGtmLogsResponseBodyLogsLog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodesIspCityNode extends $tea.Model {
    cityCode?: string;
    mainland?: boolean;
    groupName?: string;
    ispCode?: string;
    cityName?: string;
    ispName?: string;
    groupType?: string;
    defaultSelected?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodes extends $tea.Model {
    ispCityNode?: DescribeGtmMonitorAvailableConfigResponseBodyIspCityNodesIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorConfigResponseBodyIspCityNodesIspCityNode extends $tea.Model {
    cityCode?: string;
    countryName?: string;
    ispCode?: string;
    cityName?: string;
    countryCode?: string;
    ispName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmMonitorConfigResponseBodyIspCityNodes extends $tea.Model {
    ispCityNode?: DescribeGtmMonitorConfigResponseBodyIspCityNodesIspCityNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrsAddr extends $tea.Model {
    value?: string;
    mode?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrs extends $tea.Model {
    addr?: DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrsAddr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPool extends $tea.Model {
    addrs?: DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPoolAddrs;
    addrPoolId?: string;
    instanceId?: string;
    addrPoolName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanResponseBodyFaultAddrPools extends $tea.Model {
    faultAddrPool?: DescribeGtmRecoveryPlanResponseBodyFaultAddrPoolsFaultAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPoolsAddrPool extends $tea.Model {
    addrPoolId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPools extends $tea.Model {
    addrPool?: DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPoolsAddrPool[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstance extends $tea.Model {
    addrPools?: DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstanceAddrPools;
    instanceName?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstances extends $tea.Model {
    instance?: DescribeGtmRecoveryPlanAvailableConfigResponseBodyInstancesInstance[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlansResponseBodyRecoveryPlansRecoveryPlan extends $tea.Model {
    status?: string;
    lastRollbackTimestamp?: number;
    updateTime?: string;
    remark?: string;
    createTime?: string;
    recoveryPlanId?: number;
    updateTimestamp?: number;
    lastExecuteTimestamp?: number;
    lastExecuteTime?: string;
    lastRollbackTime?: string;
    name?: string;
    faultAddrPoolNum?: number;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGtmRecoveryPlansResponseBodyRecoveryPlans extends $tea.Model {
    recoveryPlan?: DescribeGtmRecoveryPlansResponseBodyRecoveryPlansRecoveryPlan[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceDomainsResponseBodyInstanceDomains extends $tea.Model {
    createTime?: string;
    domainName?: string;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordLogsResponseBodyRecordLogsRecordLog extends $tea.Model {
    action?: string;
    actionTimestamp?: number;
    clientIp?: string;
    message?: string;
    actionTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordLogsResponseBodyRecordLogs extends $tea.Model {
    recordLog?: DescribeRecordLogsResponseBodyRecordLogsRecordLog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsResponseBodyStatisticsStatistic extends $tea.Model {
    timestamp?: number;
    count?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsResponseBodyStatistics extends $tea.Model {
    statistic?: DescribeRecordStatisticsResponseBodyStatisticsStatistic[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsSummaryResponseBodyStatisticsStatistic extends $tea.Model {
    subDomain?: string;
    count?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRecordStatisticsSummaryResponseBodyStatistics extends $tea.Model {
    statistic?: DescribeRecordStatisticsSummaryResponseBodyStatisticsStatistic[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSubDomainRecordsResponseBodyDomainRecordsRecord extends $tea.Model {
    status?: string;
    type?: string;
    weight?: number;
    value?: string;
    TTL?: number;
    line?: string;
    recordId?: string;
    priority?: number;
    RR?: string;
    domainName?: string;
    locked?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSubDomainRecordsResponseBodyDomainRecords extends $tea.Model {
    record?: DescribeSubDomainRecordsResponseBodyDomainRecordsRecord[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportLinesResponseBodyRecordLinesRecordLine extends $tea.Model {
    fatherCode?: string;
    lineDisplayName?: string;
    lineCode?: string;
    lineName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportLinesResponseBodyRecordLines extends $tea.Model {
    recordLine?: DescribeSupportLinesResponseBodyRecordLinesRecordLine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponseBodyTags extends $tea.Model {
    key?: string;
    values?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTransferDomainsResponseBodyDomainTransfersDomainTransfer extends $tea.Model {
    fromUserId?: number;
    createTime?: string;
    targetUserId?: number;
    domainName?: string;
    id?: number;
    createTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTransferDomainsResponseBodyDomainTransfers extends $tea.Model {
    domainTransfer?: DescribeTransferDomainsResponseBodyDomainTransfersDomainTransfer[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResources extends $tea.Model {
    resourceType?: string;
    tagValue?: string;
    resourceId?: string;
    tagKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHichinaDomainDNSResponseBodyNewDnsServers extends $tea.Model {
    dnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHichinaDomainDNSResponseBodyOriginalDnsServers extends $tea.Model {
    dnsServer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OperateBatchDomainRequestDomainRecordInfo extends $tea.Model {
    type?: string;
    value?: string;
    ttl?: number;
    domain?: string;
    line?: string;
    newRr?: string;
    rr?: string;
    priority?: number;
    newType?: string;
    newValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfosSwitchInfo extends $tea.Model {
    strategyName?: string;
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfos extends $tea.Model {
    switchInfo?: PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfosSwitchInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreviewGtmRecoveryPlanResponseBodyPreviewsPreview extends $tea.Model {
    instanceId?: string;
    switchInfos?: PreviewGtmRecoveryPlanResponseBodyPreviewsPreviewSwitchInfos;
    name?: string;
    userDomainName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreviewGtmRecoveryPlanResponseBodyPreviews extends $tea.Model {
    preview?: PreviewGtmRecoveryPlanResponseBodyPreviewsPreview[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCustomLineRequestIpSegment extends $tea.Model {
    endIp?: string;
    startIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsCacheDomainRequestSourceDnsServer extends $tea.Model {
    host?: string;
    port?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAccessStrategyRequestDefaultAddrPool extends $tea.Model {
    lbaWeight?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAccessStrategyRequestFailoverAddrPool extends $tea.Model {
    lbaWeight?: number;
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmAddressPoolRequestAddr extends $tea.Model {
    attributeInfo?: string;
    remark?: string;
    lbaWeight?: number;
    addr?: string;
    mode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmInstanceGlobalConfigRequestAlertConfig extends $tea.Model {
    smsNotice?: boolean;
    noticeType?: string;
    emailNotice?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDnsGtmMonitorRequestIspCityNode extends $tea.Model {
    cityCode?: string;
    ispCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmAddressPoolRequestAddr extends $tea.Model {
    value?: string;
    lbaWeight?: number;
    mode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGtmMonitorRequestIspCityNode extends $tea.Model {
    cityCode?: string;
    ispCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    addCustomLineWithOptions(request: AddCustomLineRequest, runtime: $Util.RuntimeOptions): Promise<AddCustomLineResponse>;
    addCustomLine(request: AddCustomLineRequest): Promise<AddCustomLineResponse>;
    addDnsCacheDomainWithOptions(request: AddDnsCacheDomainRequest, runtime: $Util.RuntimeOptions): Promise<AddDnsCacheDomainResponse>;
    addDnsCacheDomain(request: AddDnsCacheDomainRequest): Promise<AddDnsCacheDomainResponse>;
    addDnsGtmAccessStrategyWithOptions(request: AddDnsGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<AddDnsGtmAccessStrategyResponse>;
    addDnsGtmAccessStrategy(request: AddDnsGtmAccessStrategyRequest): Promise<AddDnsGtmAccessStrategyResponse>;
    addDnsGtmAddressPoolWithOptions(request: AddDnsGtmAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<AddDnsGtmAddressPoolResponse>;
    addDnsGtmAddressPool(request: AddDnsGtmAddressPoolRequest): Promise<AddDnsGtmAddressPoolResponse>;
    addDnsGtmMonitorWithOptions(request: AddDnsGtmMonitorRequest, runtime: $Util.RuntimeOptions): Promise<AddDnsGtmMonitorResponse>;
    addDnsGtmMonitor(request: AddDnsGtmMonitorRequest): Promise<AddDnsGtmMonitorResponse>;
    addDomainWithOptions(request: AddDomainRequest, runtime: $Util.RuntimeOptions): Promise<AddDomainResponse>;
    addDomain(request: AddDomainRequest): Promise<AddDomainResponse>;
    addDomainBackupWithOptions(request: AddDomainBackupRequest, runtime: $Util.RuntimeOptions): Promise<AddDomainBackupResponse>;
    addDomainBackup(request: AddDomainBackupRequest): Promise<AddDomainBackupResponse>;
    addDomainGroupWithOptions(request: AddDomainGroupRequest, runtime: $Util.RuntimeOptions): Promise<AddDomainGroupResponse>;
    addDomainGroup(request: AddDomainGroupRequest): Promise<AddDomainGroupResponse>;
    addDomainRecordWithOptions(request: AddDomainRecordRequest, runtime: $Util.RuntimeOptions): Promise<AddDomainRecordResponse>;
    addDomainRecord(request: AddDomainRecordRequest): Promise<AddDomainRecordResponse>;
    addGtmAccessStrategyWithOptions(request: AddGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<AddGtmAccessStrategyResponse>;
    addGtmAccessStrategy(request: AddGtmAccessStrategyRequest): Promise<AddGtmAccessStrategyResponse>;
    addGtmAddressPoolWithOptions(request: AddGtmAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<AddGtmAddressPoolResponse>;
    addGtmAddressPool(request: AddGtmAddressPoolRequest): Promise<AddGtmAddressPoolResponse>;
    addGtmMonitorWithOptions(request: AddGtmMonitorRequest, runtime: $Util.RuntimeOptions): Promise<AddGtmMonitorResponse>;
    addGtmMonitor(request: AddGtmMonitorRequest): Promise<AddGtmMonitorResponse>;
    addGtmRecoveryPlanWithOptions(request: AddGtmRecoveryPlanRequest, runtime: $Util.RuntimeOptions): Promise<AddGtmRecoveryPlanResponse>;
    addGtmRecoveryPlan(request: AddGtmRecoveryPlanRequest): Promise<AddGtmRecoveryPlanResponse>;
    bindInstanceDomainsWithOptions(request: BindInstanceDomainsRequest, runtime: $Util.RuntimeOptions): Promise<BindInstanceDomainsResponse>;
    bindInstanceDomains(request: BindInstanceDomainsRequest): Promise<BindInstanceDomainsResponse>;
    changeDomainGroupWithOptions(request: ChangeDomainGroupRequest, runtime: $Util.RuntimeOptions): Promise<ChangeDomainGroupResponse>;
    changeDomainGroup(request: ChangeDomainGroupRequest): Promise<ChangeDomainGroupResponse>;
    changeDomainOfDnsProductWithOptions(request: ChangeDomainOfDnsProductRequest, runtime: $Util.RuntimeOptions): Promise<ChangeDomainOfDnsProductResponse>;
    changeDomainOfDnsProduct(request: ChangeDomainOfDnsProductRequest): Promise<ChangeDomainOfDnsProductResponse>;
    copyGtmConfigWithOptions(request: CopyGtmConfigRequest, runtime: $Util.RuntimeOptions): Promise<CopyGtmConfigResponse>;
    copyGtmConfig(request: CopyGtmConfigRequest): Promise<CopyGtmConfigResponse>;
    deleteCustomLinesWithOptions(request: DeleteCustomLinesRequest, runtime: $Util.RuntimeOptions): Promise<DeleteCustomLinesResponse>;
    deleteCustomLines(request: DeleteCustomLinesRequest): Promise<DeleteCustomLinesResponse>;
    deleteDnsCacheDomainWithOptions(request: DeleteDnsCacheDomainRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDnsCacheDomainResponse>;
    deleteDnsCacheDomain(request: DeleteDnsCacheDomainRequest): Promise<DeleteDnsCacheDomainResponse>;
    deleteDnsGtmAccessStrategyWithOptions(request: DeleteDnsGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDnsGtmAccessStrategyResponse>;
    deleteDnsGtmAccessStrategy(request: DeleteDnsGtmAccessStrategyRequest): Promise<DeleteDnsGtmAccessStrategyResponse>;
    deleteDnsGtmAddressPoolWithOptions(request: DeleteDnsGtmAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDnsGtmAddressPoolResponse>;
    deleteDnsGtmAddressPool(request: DeleteDnsGtmAddressPoolRequest): Promise<DeleteDnsGtmAddressPoolResponse>;
    deleteDomainWithOptions(request: DeleteDomainRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDomainResponse>;
    deleteDomain(request: DeleteDomainRequest): Promise<DeleteDomainResponse>;
    deleteDomainGroupWithOptions(request: DeleteDomainGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDomainGroupResponse>;
    deleteDomainGroup(request: DeleteDomainGroupRequest): Promise<DeleteDomainGroupResponse>;
    deleteDomainRecordWithOptions(request: DeleteDomainRecordRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDomainRecordResponse>;
    deleteDomainRecord(request: DeleteDomainRecordRequest): Promise<DeleteDomainRecordResponse>;
    deleteGtmAccessStrategyWithOptions(request: DeleteGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<DeleteGtmAccessStrategyResponse>;
    deleteGtmAccessStrategy(request: DeleteGtmAccessStrategyRequest): Promise<DeleteGtmAccessStrategyResponse>;
    deleteGtmAddressPoolWithOptions(request: DeleteGtmAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<DeleteGtmAddressPoolResponse>;
    deleteGtmAddressPool(request: DeleteGtmAddressPoolRequest): Promise<DeleteGtmAddressPoolResponse>;
    deleteGtmRecoveryPlanWithOptions(request: DeleteGtmRecoveryPlanRequest, runtime: $Util.RuntimeOptions): Promise<DeleteGtmRecoveryPlanResponse>;
    deleteGtmRecoveryPlan(request: DeleteGtmRecoveryPlanRequest): Promise<DeleteGtmRecoveryPlanResponse>;
    deleteSubDomainRecordsWithOptions(request: DeleteSubDomainRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSubDomainRecordsResponse>;
    deleteSubDomainRecords(request: DeleteSubDomainRecordsRequest): Promise<DeleteSubDomainRecordsResponse>;
    describeBatchResultCountWithOptions(request: DescribeBatchResultCountRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBatchResultCountResponse>;
    describeBatchResultCount(request: DescribeBatchResultCountRequest): Promise<DescribeBatchResultCountResponse>;
    describeBatchResultDetailWithOptions(request: DescribeBatchResultDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBatchResultDetailResponse>;
    describeBatchResultDetail(request: DescribeBatchResultDetailRequest): Promise<DescribeBatchResultDetailResponse>;
    describeCustomLineWithOptions(request: DescribeCustomLineRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCustomLineResponse>;
    describeCustomLine(request: DescribeCustomLineRequest): Promise<DescribeCustomLineResponse>;
    describeCustomLinesWithOptions(request: DescribeCustomLinesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCustomLinesResponse>;
    describeCustomLines(request: DescribeCustomLinesRequest): Promise<DescribeCustomLinesResponse>;
    describeDnsCacheDomainsWithOptions(request: DescribeDnsCacheDomainsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsCacheDomainsResponse>;
    describeDnsCacheDomains(request: DescribeDnsCacheDomainsRequest): Promise<DescribeDnsCacheDomainsResponse>;
    describeDnsGtmAccessStrategiesWithOptions(request: DescribeDnsGtmAccessStrategiesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmAccessStrategiesResponse>;
    describeDnsGtmAccessStrategies(request: DescribeDnsGtmAccessStrategiesRequest): Promise<DescribeDnsGtmAccessStrategiesResponse>;
    describeDnsGtmAccessStrategyWithOptions(request: DescribeDnsGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmAccessStrategyResponse>;
    describeDnsGtmAccessStrategy(request: DescribeDnsGtmAccessStrategyRequest): Promise<DescribeDnsGtmAccessStrategyResponse>;
    describeDnsGtmAccessStrategyAvailableConfigWithOptions(request: DescribeDnsGtmAccessStrategyAvailableConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmAccessStrategyAvailableConfigResponse>;
    describeDnsGtmAccessStrategyAvailableConfig(request: DescribeDnsGtmAccessStrategyAvailableConfigRequest): Promise<DescribeDnsGtmAccessStrategyAvailableConfigResponse>;
    describeDnsGtmAddrAttributeInfoWithOptions(request: DescribeDnsGtmAddrAttributeInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmAddrAttributeInfoResponse>;
    describeDnsGtmAddrAttributeInfo(request: DescribeDnsGtmAddrAttributeInfoRequest): Promise<DescribeDnsGtmAddrAttributeInfoResponse>;
    describeDnsGtmAddressPoolAvailableConfigWithOptions(request: DescribeDnsGtmAddressPoolAvailableConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmAddressPoolAvailableConfigResponse>;
    describeDnsGtmAddressPoolAvailableConfig(request: DescribeDnsGtmAddressPoolAvailableConfigRequest): Promise<DescribeDnsGtmAddressPoolAvailableConfigResponse>;
    describeDnsGtmAvailableAlertGroupWithOptions(request: DescribeDnsGtmAvailableAlertGroupRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmAvailableAlertGroupResponse>;
    describeDnsGtmAvailableAlertGroup(request: DescribeDnsGtmAvailableAlertGroupRequest): Promise<DescribeDnsGtmAvailableAlertGroupResponse>;
    describeDnsGtmInstanceWithOptions(request: DescribeDnsGtmInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmInstanceResponse>;
    describeDnsGtmInstance(request: DescribeDnsGtmInstanceRequest): Promise<DescribeDnsGtmInstanceResponse>;
    describeDnsGtmInstanceAddressPoolWithOptions(request: DescribeDnsGtmInstanceAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmInstanceAddressPoolResponse>;
    describeDnsGtmInstanceAddressPool(request: DescribeDnsGtmInstanceAddressPoolRequest): Promise<DescribeDnsGtmInstanceAddressPoolResponse>;
    describeDnsGtmInstanceAddressPoolsWithOptions(request: DescribeDnsGtmInstanceAddressPoolsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmInstanceAddressPoolsResponse>;
    describeDnsGtmInstanceAddressPools(request: DescribeDnsGtmInstanceAddressPoolsRequest): Promise<DescribeDnsGtmInstanceAddressPoolsResponse>;
    describeDnsGtmInstancesWithOptions(request: DescribeDnsGtmInstancesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmInstancesResponse>;
    describeDnsGtmInstances(request: DescribeDnsGtmInstancesRequest): Promise<DescribeDnsGtmInstancesResponse>;
    describeDnsGtmInstanceStatusWithOptions(request: DescribeDnsGtmInstanceStatusRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmInstanceStatusResponse>;
    describeDnsGtmInstanceStatus(request: DescribeDnsGtmInstanceStatusRequest): Promise<DescribeDnsGtmInstanceStatusResponse>;
    describeDnsGtmInstanceSystemCnameWithOptions(request: DescribeDnsGtmInstanceSystemCnameRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmInstanceSystemCnameResponse>;
    describeDnsGtmInstanceSystemCname(request: DescribeDnsGtmInstanceSystemCnameRequest): Promise<DescribeDnsGtmInstanceSystemCnameResponse>;
    describeDnsGtmLogsWithOptions(request: DescribeDnsGtmLogsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmLogsResponse>;
    describeDnsGtmLogs(request: DescribeDnsGtmLogsRequest): Promise<DescribeDnsGtmLogsResponse>;
    describeDnsGtmMonitorAvailableConfigWithOptions(request: DescribeDnsGtmMonitorAvailableConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmMonitorAvailableConfigResponse>;
    describeDnsGtmMonitorAvailableConfig(request: DescribeDnsGtmMonitorAvailableConfigRequest): Promise<DescribeDnsGtmMonitorAvailableConfigResponse>;
    describeDnsGtmMonitorConfigWithOptions(request: DescribeDnsGtmMonitorConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsGtmMonitorConfigResponse>;
    describeDnsGtmMonitorConfig(request: DescribeDnsGtmMonitorConfigRequest): Promise<DescribeDnsGtmMonitorConfigResponse>;
    describeDnsProductInstanceWithOptions(request: DescribeDnsProductInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsProductInstanceResponse>;
    describeDnsProductInstance(request: DescribeDnsProductInstanceRequest): Promise<DescribeDnsProductInstanceResponse>;
    describeDnsProductInstancesWithOptions(request: DescribeDnsProductInstancesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDnsProductInstancesResponse>;
    describeDnsProductInstances(request: DescribeDnsProductInstancesRequest): Promise<DescribeDnsProductInstancesResponse>;
    describeDNSSLBSubDomainsWithOptions(request: DescribeDNSSLBSubDomainsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDNSSLBSubDomainsResponse>;
    describeDNSSLBSubDomains(request: DescribeDNSSLBSubDomainsRequest): Promise<DescribeDNSSLBSubDomainsResponse>;
    describeDohAccountStatisticsWithOptions(request: DescribeDohAccountStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDohAccountStatisticsResponse>;
    describeDohAccountStatistics(request: DescribeDohAccountStatisticsRequest): Promise<DescribeDohAccountStatisticsResponse>;
    describeDohDomainStatisticsWithOptions(request: DescribeDohDomainStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDohDomainStatisticsResponse>;
    describeDohDomainStatistics(request: DescribeDohDomainStatisticsRequest): Promise<DescribeDohDomainStatisticsResponse>;
    describeDohDomainStatisticsSummaryWithOptions(request: DescribeDohDomainStatisticsSummaryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDohDomainStatisticsSummaryResponse>;
    describeDohDomainStatisticsSummary(request: DescribeDohDomainStatisticsSummaryRequest): Promise<DescribeDohDomainStatisticsSummaryResponse>;
    describeDohSubDomainStatisticsWithOptions(request: DescribeDohSubDomainStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDohSubDomainStatisticsResponse>;
    describeDohSubDomainStatistics(request: DescribeDohSubDomainStatisticsRequest): Promise<DescribeDohSubDomainStatisticsResponse>;
    describeDohSubDomainStatisticsSummaryWithOptions(request: DescribeDohSubDomainStatisticsSummaryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDohSubDomainStatisticsSummaryResponse>;
    describeDohSubDomainStatisticsSummary(request: DescribeDohSubDomainStatisticsSummaryRequest): Promise<DescribeDohSubDomainStatisticsSummaryResponse>;
    describeDohUserInfoWithOptions(request: DescribeDohUserInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDohUserInfoResponse>;
    describeDohUserInfo(request: DescribeDohUserInfoRequest): Promise<DescribeDohUserInfoResponse>;
    describeDomainDnssecInfoWithOptions(request: DescribeDomainDnssecInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainDnssecInfoResponse>;
    describeDomainDnssecInfo(request: DescribeDomainDnssecInfoRequest): Promise<DescribeDomainDnssecInfoResponse>;
    describeDomainGroupsWithOptions(request: DescribeDomainGroupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainGroupsResponse>;
    describeDomainGroups(request: DescribeDomainGroupsRequest): Promise<DescribeDomainGroupsResponse>;
    describeDomainInfoWithOptions(request: DescribeDomainInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainInfoResponse>;
    describeDomainInfo(request: DescribeDomainInfoRequest): Promise<DescribeDomainInfoResponse>;
    describeDomainLogsWithOptions(request: DescribeDomainLogsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainLogsResponse>;
    describeDomainLogs(request: DescribeDomainLogsRequest): Promise<DescribeDomainLogsResponse>;
    describeDomainNsWithOptions(request: DescribeDomainNsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainNsResponse>;
    describeDomainNs(request: DescribeDomainNsRequest): Promise<DescribeDomainNsResponse>;
    describeDomainRecordInfoWithOptions(request: DescribeDomainRecordInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainRecordInfoResponse>;
    describeDomainRecordInfo(request: DescribeDomainRecordInfoRequest): Promise<DescribeDomainRecordInfoResponse>;
    describeDomainRecordsWithOptions(request: DescribeDomainRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainRecordsResponse>;
    describeDomainRecords(request: DescribeDomainRecordsRequest): Promise<DescribeDomainRecordsResponse>;
    describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainsResponse>;
    describeDomains(request: DescribeDomainsRequest): Promise<DescribeDomainsResponse>;
    describeDomainStatisticsWithOptions(request: DescribeDomainStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainStatisticsResponse>;
    describeDomainStatistics(request: DescribeDomainStatisticsRequest): Promise<DescribeDomainStatisticsResponse>;
    describeDomainStatisticsSummaryWithOptions(request: DescribeDomainStatisticsSummaryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDomainStatisticsSummaryResponse>;
    describeDomainStatisticsSummary(request: DescribeDomainStatisticsSummaryRequest): Promise<DescribeDomainStatisticsSummaryResponse>;
    describeGtmAccessStrategiesWithOptions(request: DescribeGtmAccessStrategiesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmAccessStrategiesResponse>;
    describeGtmAccessStrategies(request: DescribeGtmAccessStrategiesRequest): Promise<DescribeGtmAccessStrategiesResponse>;
    describeGtmAccessStrategyWithOptions(request: DescribeGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmAccessStrategyResponse>;
    describeGtmAccessStrategy(request: DescribeGtmAccessStrategyRequest): Promise<DescribeGtmAccessStrategyResponse>;
    describeGtmAccessStrategyAvailableConfigWithOptions(request: DescribeGtmAccessStrategyAvailableConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmAccessStrategyAvailableConfigResponse>;
    describeGtmAccessStrategyAvailableConfig(request: DescribeGtmAccessStrategyAvailableConfigRequest): Promise<DescribeGtmAccessStrategyAvailableConfigResponse>;
    describeGtmAvailableAlertGroupWithOptions(request: DescribeGtmAvailableAlertGroupRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmAvailableAlertGroupResponse>;
    describeGtmAvailableAlertGroup(request: DescribeGtmAvailableAlertGroupRequest): Promise<DescribeGtmAvailableAlertGroupResponse>;
    describeGtmInstanceWithOptions(request: DescribeGtmInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmInstanceResponse>;
    describeGtmInstance(request: DescribeGtmInstanceRequest): Promise<DescribeGtmInstanceResponse>;
    describeGtmInstanceAddressPoolWithOptions(request: DescribeGtmInstanceAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmInstanceAddressPoolResponse>;
    describeGtmInstanceAddressPool(request: DescribeGtmInstanceAddressPoolRequest): Promise<DescribeGtmInstanceAddressPoolResponse>;
    describeGtmInstanceAddressPoolsWithOptions(request: DescribeGtmInstanceAddressPoolsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmInstanceAddressPoolsResponse>;
    describeGtmInstanceAddressPools(request: DescribeGtmInstanceAddressPoolsRequest): Promise<DescribeGtmInstanceAddressPoolsResponse>;
    describeGtmInstancesWithOptions(request: DescribeGtmInstancesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmInstancesResponse>;
    describeGtmInstances(request: DescribeGtmInstancesRequest): Promise<DescribeGtmInstancesResponse>;
    describeGtmInstanceStatusWithOptions(request: DescribeGtmInstanceStatusRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmInstanceStatusResponse>;
    describeGtmInstanceStatus(request: DescribeGtmInstanceStatusRequest): Promise<DescribeGtmInstanceStatusResponse>;
    describeGtmInstanceSystemCnameWithOptions(request: DescribeGtmInstanceSystemCnameRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmInstanceSystemCnameResponse>;
    describeGtmInstanceSystemCname(request: DescribeGtmInstanceSystemCnameRequest): Promise<DescribeGtmInstanceSystemCnameResponse>;
    describeGtmLogsWithOptions(request: DescribeGtmLogsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmLogsResponse>;
    describeGtmLogs(request: DescribeGtmLogsRequest): Promise<DescribeGtmLogsResponse>;
    describeGtmMonitorAvailableConfigWithOptions(request: DescribeGtmMonitorAvailableConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmMonitorAvailableConfigResponse>;
    describeGtmMonitorAvailableConfig(request: DescribeGtmMonitorAvailableConfigRequest): Promise<DescribeGtmMonitorAvailableConfigResponse>;
    describeGtmMonitorConfigWithOptions(request: DescribeGtmMonitorConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmMonitorConfigResponse>;
    describeGtmMonitorConfig(request: DescribeGtmMonitorConfigRequest): Promise<DescribeGtmMonitorConfigResponse>;
    describeGtmRecoveryPlanWithOptions(request: DescribeGtmRecoveryPlanRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmRecoveryPlanResponse>;
    describeGtmRecoveryPlan(request: DescribeGtmRecoveryPlanRequest): Promise<DescribeGtmRecoveryPlanResponse>;
    describeGtmRecoveryPlanAvailableConfigWithOptions(request: DescribeGtmRecoveryPlanAvailableConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmRecoveryPlanAvailableConfigResponse>;
    describeGtmRecoveryPlanAvailableConfig(request: DescribeGtmRecoveryPlanAvailableConfigRequest): Promise<DescribeGtmRecoveryPlanAvailableConfigResponse>;
    describeGtmRecoveryPlansWithOptions(request: DescribeGtmRecoveryPlansRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGtmRecoveryPlansResponse>;
    describeGtmRecoveryPlans(request: DescribeGtmRecoveryPlansRequest): Promise<DescribeGtmRecoveryPlansResponse>;
    describeInstanceDomainsWithOptions(request: DescribeInstanceDomainsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceDomainsResponse>;
    describeInstanceDomains(request: DescribeInstanceDomainsRequest): Promise<DescribeInstanceDomainsResponse>;
    describeRecordLogsWithOptions(request: DescribeRecordLogsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecordLogsResponse>;
    describeRecordLogs(request: DescribeRecordLogsRequest): Promise<DescribeRecordLogsResponse>;
    describeRecordStatisticsWithOptions(request: DescribeRecordStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecordStatisticsResponse>;
    describeRecordStatistics(request: DescribeRecordStatisticsRequest): Promise<DescribeRecordStatisticsResponse>;
    describeRecordStatisticsSummaryWithOptions(request: DescribeRecordStatisticsSummaryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRecordStatisticsSummaryResponse>;
    describeRecordStatisticsSummary(request: DescribeRecordStatisticsSummaryRequest): Promise<DescribeRecordStatisticsSummaryResponse>;
    describeSubDomainRecordsWithOptions(request: DescribeSubDomainRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSubDomainRecordsResponse>;
    describeSubDomainRecords(request: DescribeSubDomainRecordsRequest): Promise<DescribeSubDomainRecordsResponse>;
    describeSupportLinesWithOptions(request: DescribeSupportLinesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSupportLinesResponse>;
    describeSupportLines(request: DescribeSupportLinesRequest): Promise<DescribeSupportLinesResponse>;
    describeTagsWithOptions(request: DescribeTagsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsResponse>;
    describeTags(request: DescribeTagsRequest): Promise<DescribeTagsResponse>;
    describeTransferDomainsWithOptions(request: DescribeTransferDomainsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTransferDomainsResponse>;
    describeTransferDomains(request: DescribeTransferDomainsRequest): Promise<DescribeTransferDomainsResponse>;
    executeGtmRecoveryPlanWithOptions(request: ExecuteGtmRecoveryPlanRequest, runtime: $Util.RuntimeOptions): Promise<ExecuteGtmRecoveryPlanResponse>;
    executeGtmRecoveryPlan(request: ExecuteGtmRecoveryPlanRequest): Promise<ExecuteGtmRecoveryPlanResponse>;
    getMainDomainNameWithOptions(request: GetMainDomainNameRequest, runtime: $Util.RuntimeOptions): Promise<GetMainDomainNameResponse>;
    getMainDomainName(request: GetMainDomainNameRequest): Promise<GetMainDomainNameResponse>;
    getTxtRecordForVerifyWithOptions(request: GetTxtRecordForVerifyRequest, runtime: $Util.RuntimeOptions): Promise<GetTxtRecordForVerifyResponse>;
    getTxtRecordForVerify(request: GetTxtRecordForVerifyRequest): Promise<GetTxtRecordForVerifyResponse>;
    listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<ListTagResourcesResponse>;
    listTagResources(request: ListTagResourcesRequest): Promise<ListTagResourcesResponse>;
    modifyHichinaDomainDNSWithOptions(request: ModifyHichinaDomainDNSRequest, runtime: $Util.RuntimeOptions): Promise<ModifyHichinaDomainDNSResponse>;
    modifyHichinaDomainDNS(request: ModifyHichinaDomainDNSRequest): Promise<ModifyHichinaDomainDNSResponse>;
    moveDomainResourceGroupWithOptions(request: MoveDomainResourceGroupRequest, runtime: $Util.RuntimeOptions): Promise<MoveDomainResourceGroupResponse>;
    moveDomainResourceGroup(request: MoveDomainResourceGroupRequest): Promise<MoveDomainResourceGroupResponse>;
    moveGtmResourceGroupWithOptions(request: MoveGtmResourceGroupRequest, runtime: $Util.RuntimeOptions): Promise<MoveGtmResourceGroupResponse>;
    moveGtmResourceGroup(request: MoveGtmResourceGroupRequest): Promise<MoveGtmResourceGroupResponse>;
    operateBatchDomainWithOptions(request: OperateBatchDomainRequest, runtime: $Util.RuntimeOptions): Promise<OperateBatchDomainResponse>;
    operateBatchDomain(request: OperateBatchDomainRequest): Promise<OperateBatchDomainResponse>;
    previewGtmRecoveryPlanWithOptions(request: PreviewGtmRecoveryPlanRequest, runtime: $Util.RuntimeOptions): Promise<PreviewGtmRecoveryPlanResponse>;
    previewGtmRecoveryPlan(request: PreviewGtmRecoveryPlanRequest): Promise<PreviewGtmRecoveryPlanResponse>;
    retrieveDomainWithOptions(request: RetrieveDomainRequest, runtime: $Util.RuntimeOptions): Promise<RetrieveDomainResponse>;
    retrieveDomain(request: RetrieveDomainRequest): Promise<RetrieveDomainResponse>;
    rollbackGtmRecoveryPlanWithOptions(request: RollbackGtmRecoveryPlanRequest, runtime: $Util.RuntimeOptions): Promise<RollbackGtmRecoveryPlanResponse>;
    rollbackGtmRecoveryPlan(request: RollbackGtmRecoveryPlanRequest): Promise<RollbackGtmRecoveryPlanResponse>;
    setDnsGtmAccessModeWithOptions(request: SetDnsGtmAccessModeRequest, runtime: $Util.RuntimeOptions): Promise<SetDnsGtmAccessModeResponse>;
    setDnsGtmAccessMode(request: SetDnsGtmAccessModeRequest): Promise<SetDnsGtmAccessModeResponse>;
    setDnsGtmMonitorStatusWithOptions(request: SetDnsGtmMonitorStatusRequest, runtime: $Util.RuntimeOptions): Promise<SetDnsGtmMonitorStatusResponse>;
    setDnsGtmMonitorStatus(request: SetDnsGtmMonitorStatusRequest): Promise<SetDnsGtmMonitorStatusResponse>;
    setDNSSLBStatusWithOptions(request: SetDNSSLBStatusRequest, runtime: $Util.RuntimeOptions): Promise<SetDNSSLBStatusResponse>;
    setDNSSLBStatus(request: SetDNSSLBStatusRequest): Promise<SetDNSSLBStatusResponse>;
    setDomainDnssecStatusWithOptions(request: SetDomainDnssecStatusRequest, runtime: $Util.RuntimeOptions): Promise<SetDomainDnssecStatusResponse>;
    setDomainDnssecStatus(request: SetDomainDnssecStatusRequest): Promise<SetDomainDnssecStatusResponse>;
    setDomainRecordStatusWithOptions(request: SetDomainRecordStatusRequest, runtime: $Util.RuntimeOptions): Promise<SetDomainRecordStatusResponse>;
    setDomainRecordStatus(request: SetDomainRecordStatusRequest): Promise<SetDomainRecordStatusResponse>;
    setGtmAccessModeWithOptions(request: SetGtmAccessModeRequest, runtime: $Util.RuntimeOptions): Promise<SetGtmAccessModeResponse>;
    setGtmAccessMode(request: SetGtmAccessModeRequest): Promise<SetGtmAccessModeResponse>;
    setGtmMonitorStatusWithOptions(request: SetGtmMonitorStatusRequest, runtime: $Util.RuntimeOptions): Promise<SetGtmMonitorStatusResponse>;
    setGtmMonitorStatus(request: SetGtmMonitorStatusRequest): Promise<SetGtmMonitorStatusResponse>;
    switchDnsGtmInstanceStrategyModeWithOptions(request: SwitchDnsGtmInstanceStrategyModeRequest, runtime: $Util.RuntimeOptions): Promise<SwitchDnsGtmInstanceStrategyModeResponse>;
    switchDnsGtmInstanceStrategyMode(request: SwitchDnsGtmInstanceStrategyModeRequest): Promise<SwitchDnsGtmInstanceStrategyModeResponse>;
    tagResourcesWithOptions(request: TagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<TagResourcesResponse>;
    tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse>;
    transferDomainWithOptions(request: TransferDomainRequest, runtime: $Util.RuntimeOptions): Promise<TransferDomainResponse>;
    transferDomain(request: TransferDomainRequest): Promise<TransferDomainResponse>;
    unbindInstanceDomainsWithOptions(request: UnbindInstanceDomainsRequest, runtime: $Util.RuntimeOptions): Promise<UnbindInstanceDomainsResponse>;
    unbindInstanceDomains(request: UnbindInstanceDomainsRequest): Promise<UnbindInstanceDomainsResponse>;
    untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<UntagResourcesResponse>;
    untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse>;
    updateCustomLineWithOptions(request: UpdateCustomLineRequest, runtime: $Util.RuntimeOptions): Promise<UpdateCustomLineResponse>;
    updateCustomLine(request: UpdateCustomLineRequest): Promise<UpdateCustomLineResponse>;
    updateDnsCacheDomainWithOptions(request: UpdateDnsCacheDomainRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDnsCacheDomainResponse>;
    updateDnsCacheDomain(request: UpdateDnsCacheDomainRequest): Promise<UpdateDnsCacheDomainResponse>;
    updateDnsCacheDomainRemarkWithOptions(request: UpdateDnsCacheDomainRemarkRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDnsCacheDomainRemarkResponse>;
    updateDnsCacheDomainRemark(request: UpdateDnsCacheDomainRemarkRequest): Promise<UpdateDnsCacheDomainRemarkResponse>;
    updateDnsGtmAccessStrategyWithOptions(request: UpdateDnsGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDnsGtmAccessStrategyResponse>;
    updateDnsGtmAccessStrategy(request: UpdateDnsGtmAccessStrategyRequest): Promise<UpdateDnsGtmAccessStrategyResponse>;
    updateDnsGtmAddressPoolWithOptions(request: UpdateDnsGtmAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDnsGtmAddressPoolResponse>;
    updateDnsGtmAddressPool(request: UpdateDnsGtmAddressPoolRequest): Promise<UpdateDnsGtmAddressPoolResponse>;
    updateDnsGtmInstanceGlobalConfigWithOptions(request: UpdateDnsGtmInstanceGlobalConfigRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDnsGtmInstanceGlobalConfigResponse>;
    updateDnsGtmInstanceGlobalConfig(request: UpdateDnsGtmInstanceGlobalConfigRequest): Promise<UpdateDnsGtmInstanceGlobalConfigResponse>;
    updateDnsGtmMonitorWithOptions(request: UpdateDnsGtmMonitorRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDnsGtmMonitorResponse>;
    updateDnsGtmMonitor(request: UpdateDnsGtmMonitorRequest): Promise<UpdateDnsGtmMonitorResponse>;
    updateDNSSLBWeightWithOptions(request: UpdateDNSSLBWeightRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDNSSLBWeightResponse>;
    updateDNSSLBWeight(request: UpdateDNSSLBWeightRequest): Promise<UpdateDNSSLBWeightResponse>;
    updateDomainGroupWithOptions(request: UpdateDomainGroupRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDomainGroupResponse>;
    updateDomainGroup(request: UpdateDomainGroupRequest): Promise<UpdateDomainGroupResponse>;
    updateDomainRecordWithOptions(request: UpdateDomainRecordRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDomainRecordResponse>;
    updateDomainRecord(request: UpdateDomainRecordRequest): Promise<UpdateDomainRecordResponse>;
    updateDomainRecordRemarkWithOptions(request: UpdateDomainRecordRemarkRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDomainRecordRemarkResponse>;
    updateDomainRecordRemark(request: UpdateDomainRecordRemarkRequest): Promise<UpdateDomainRecordRemarkResponse>;
    updateDomainRemarkWithOptions(request: UpdateDomainRemarkRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDomainRemarkResponse>;
    updateDomainRemark(request: UpdateDomainRemarkRequest): Promise<UpdateDomainRemarkResponse>;
    updateGtmAccessStrategyWithOptions(request: UpdateGtmAccessStrategyRequest, runtime: $Util.RuntimeOptions): Promise<UpdateGtmAccessStrategyResponse>;
    updateGtmAccessStrategy(request: UpdateGtmAccessStrategyRequest): Promise<UpdateGtmAccessStrategyResponse>;
    updateGtmAddressPoolWithOptions(request: UpdateGtmAddressPoolRequest, runtime: $Util.RuntimeOptions): Promise<UpdateGtmAddressPoolResponse>;
    updateGtmAddressPool(request: UpdateGtmAddressPoolRequest): Promise<UpdateGtmAddressPoolResponse>;
    updateGtmInstanceGlobalConfigWithOptions(request: UpdateGtmInstanceGlobalConfigRequest, runtime: $Util.RuntimeOptions): Promise<UpdateGtmInstanceGlobalConfigResponse>;
    updateGtmInstanceGlobalConfig(request: UpdateGtmInstanceGlobalConfigRequest): Promise<UpdateGtmInstanceGlobalConfigResponse>;
    updateGtmMonitorWithOptions(request: UpdateGtmMonitorRequest, runtime: $Util.RuntimeOptions): Promise<UpdateGtmMonitorResponse>;
    updateGtmMonitor(request: UpdateGtmMonitorRequest): Promise<UpdateGtmMonitorResponse>;
    updateGtmRecoveryPlanWithOptions(request: UpdateGtmRecoveryPlanRequest, runtime: $Util.RuntimeOptions): Promise<UpdateGtmRecoveryPlanResponse>;
    updateGtmRecoveryPlan(request: UpdateGtmRecoveryPlanRequest): Promise<UpdateGtmRecoveryPlanResponse>;
    validateDnsGtmAttributeInfoWithOptions(request: ValidateDnsGtmAttributeInfoRequest, runtime: $Util.RuntimeOptions): Promise<ValidateDnsGtmAttributeInfoResponse>;
    validateDnsGtmAttributeInfo(request: ValidateDnsGtmAttributeInfoRequest): Promise<ValidateDnsGtmAttributeInfoResponse>;
}
